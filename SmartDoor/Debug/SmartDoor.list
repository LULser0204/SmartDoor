
SmartDoor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015ec  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009790  08009790  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009798  08009798  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080097a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00013318  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013418  20013418  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a83  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c86  00000000  00000000  00038bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  0003c840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001478  00000000  00000000  0003de60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002676f  00000000  00000000  0003f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0c2  00000000  00000000  00065a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7a07  00000000  00000000  00084b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015c510  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063d0  00000000  00000000  0015c560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800818c 	.word	0x0800818c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800818c 	.word	0x0800818c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	; 0x30
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
 80005be:	4b95      	ldr	r3, [pc, #596]	; (8000814 <MX_GPIO_Init+0x270>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a94      	ldr	r2, [pc, #592]	; (8000814 <MX_GPIO_Init+0x270>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b92      	ldr	r3, [pc, #584]	; (8000814 <MX_GPIO_Init+0x270>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	4b8e      	ldr	r3, [pc, #568]	; (8000814 <MX_GPIO_Init+0x270>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a8d      	ldr	r2, [pc, #564]	; (8000814 <MX_GPIO_Init+0x270>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b8b      	ldr	r3, [pc, #556]	; (8000814 <MX_GPIO_Init+0x270>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b87      	ldr	r3, [pc, #540]	; (8000814 <MX_GPIO_Init+0x270>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a86      	ldr	r2, [pc, #536]	; (8000814 <MX_GPIO_Init+0x270>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b84      	ldr	r3, [pc, #528]	; (8000814 <MX_GPIO_Init+0x270>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b80      	ldr	r3, [pc, #512]	; (8000814 <MX_GPIO_Init+0x270>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a7f      	ldr	r2, [pc, #508]	; (8000814 <MX_GPIO_Init+0x270>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b7d      	ldr	r3, [pc, #500]	; (8000814 <MX_GPIO_Init+0x270>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b79      	ldr	r3, [pc, #484]	; (8000814 <MX_GPIO_Init+0x270>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a78      	ldr	r2, [pc, #480]	; (8000814 <MX_GPIO_Init+0x270>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b76      	ldr	r3, [pc, #472]	; (8000814 <MX_GPIO_Init+0x270>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b72      	ldr	r3, [pc, #456]	; (8000814 <MX_GPIO_Init+0x270>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a71      	ldr	r2, [pc, #452]	; (8000814 <MX_GPIO_Init+0x270>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b6f      	ldr	r3, [pc, #444]	; (8000814 <MX_GPIO_Init+0x270>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2108      	movs	r1, #8
 8000666:	486c      	ldr	r0, [pc, #432]	; (8000818 <MX_GPIO_Init+0x274>)
 8000668:	f001 fcac 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	486a      	ldr	r0, [pc, #424]	; (800081c <MX_GPIO_Init+0x278>)
 8000672:	f001 fca7 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000676:	2200      	movs	r2, #0
 8000678:	f24f 0110 	movw	r1, #61456	; 0xf010
 800067c:	4868      	ldr	r0, [pc, #416]	; (8000820 <MX_GPIO_Init+0x27c>)
 800067e:	f001 fca1 	bl	8001fc4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEY_col0_Pin|KEY_col1_Pin|KEY_col2_Pin|KEY_col3_Pin, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	210f      	movs	r1, #15
 8000686:	4866      	ldr	r0, [pc, #408]	; (8000820 <MX_GPIO_Init+0x27c>)
 8000688:	f001 fc9c 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800068c:	2308      	movs	r3, #8
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	485d      	ldr	r0, [pc, #372]	; (8000818 <MX_GPIO_Init+0x274>)
 80006a4:	f001 fada 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4857      	ldr	r0, [pc, #348]	; (800081c <MX_GPIO_Init+0x278>)
 80006c0:	f001 facc 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80006c4:	2308      	movs	r3, #8
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006d4:	2305      	movs	r3, #5
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	484f      	ldr	r0, [pc, #316]	; (800081c <MX_GPIO_Init+0x278>)
 80006e0:	f001 fabc 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006e4:	2310      	movs	r3, #16
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006f4:	2306      	movs	r3, #6
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4849      	ldr	r0, [pc, #292]	; (8000824 <MX_GPIO_Init+0x280>)
 8000700:	f001 faac 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000704:	23e0      	movs	r3, #224	; 0xe0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000714:	2305      	movs	r3, #5
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4841      	ldr	r0, [pc, #260]	; (8000824 <MX_GPIO_Init+0x280>)
 8000720:	f001 fa9c 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000724:	2304      	movs	r3, #4
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	483c      	ldr	r0, [pc, #240]	; (8000828 <MX_GPIO_Init+0x284>)
 8000738:	f001 fa90 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800073c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800074e:	2305      	movs	r3, #5
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	4833      	ldr	r0, [pc, #204]	; (8000828 <MX_GPIO_Init+0x284>)
 800075a:	f001 fa7f 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800075e:	f24f 031f 	movw	r3, #61471	; 0xf01f
 8000762:	61fb      	str	r3, [r7, #28]
                          |KEY_col0_Pin|KEY_col1_Pin|KEY_col2_Pin|KEY_col3_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	482a      	ldr	r0, [pc, #168]	; (8000820 <MX_GPIO_Init+0x27c>)
 8000778:	f001 fa70 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800077c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800078e:	2306      	movs	r3, #6
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4820      	ldr	r0, [pc, #128]	; (800081c <MX_GPIO_Init+0x278>)
 800079a:	f001 fa5f 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800079e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	481c      	ldr	r0, [pc, #112]	; (8000824 <MX_GPIO_Init+0x280>)
 80007b4:	f001 fa52 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80007b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007ca:	230a      	movs	r3, #10
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4813      	ldr	r0, [pc, #76]	; (8000824 <MX_GPIO_Init+0x280>)
 80007d6:	f001 fa41 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007da:	2320      	movs	r3, #32
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_GPIO_Init+0x27c>)
 80007ee:	f001 fa35 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEY_row0_Pin|KEY_row1_Pin|KEY_row2_Pin|KEY_row3_Pin;
 80007f2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4808      	ldr	r0, [pc, #32]	; (8000828 <MX_GPIO_Init+0x284>)
 8000808:	f001 fa28 	bl	8001c5c <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3730      	adds	r7, #48	; 0x30
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40021000 	.word	0x40021000
 800081c:	40020800 	.word	0x40020800
 8000820:	40020c00 	.word	0x40020c00
 8000824:	40020000 	.word	0x40020000
 8000828:	40020400 	.word	0x40020400

0800082c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_I2C1_Init+0x50>)
 8000832:	4a13      	ldr	r2, [pc, #76]	; (8000880 <MX_I2C1_Init+0x54>)
 8000834:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_I2C1_Init+0x50>)
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_I2C1_Init+0x58>)
 800083a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_I2C1_Init+0x50>)
 800084a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800084e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_I2C1_Init+0x50>)
 800086a:	f001 fbc5 	bl	8001ff8 <HAL_I2C_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000874:	f000 f9d2 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000011c 	.word	0x2000011c
 8000880:	40005400 	.word	0x40005400
 8000884:	000186a0 	.word	0x000186a0

08000888 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a19      	ldr	r2, [pc, #100]	; (800090c <HAL_I2C_MspInit+0x84>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d12c      	bne.n	8000904 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008c6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008cc:	2312      	movs	r3, #18
 80008ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d8:	2304      	movs	r3, #4
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	480c      	ldr	r0, [pc, #48]	; (8000914 <HAL_I2C_MspInit+0x8c>)
 80008e4:	f001 f9ba 	bl	8001c5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_I2C_MspInit+0x88>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40005400 	.word	0x40005400
 8000910:	40023800 	.word	0x40023800
 8000914:	40020400 	.word	0x40020400

08000918 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000920:	1d39      	adds	r1, r7, #4
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	2201      	movs	r2, #1
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <__io_putchar+0x20>)
 800092a:	f002 ff86 	bl	800383a <HAL_UART_Transmit>
	return ch;
 800092e:	687b      	ldr	r3, [r7, #4]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200001dc 	.word	0x200001dc

0800093c <Queue_Init>:



static void Queue_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
	QueueData QueueData_init;

	Ctrl_RFID_Queue = xQueueCreate(QUEUE_LENGTH, sizeof(QueueData_init));
 8000942:	2200      	movs	r2, #0
 8000944:	211c      	movs	r1, #28
 8000946:	2005      	movs	r0, #5
 8000948:	f003 fc08 	bl	800415c <xQueueGenericCreate>
 800094c:	4603      	mov	r3, r0
 800094e:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <Queue_Init+0x88>)
 8000950:	6013      	str	r3, [r2, #0]
	if (Ctrl_RFID_Queue == NULL) {
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <Queue_Init+0x88>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <Queue_Init+0x24>
		printf("Ctrl_RFID_Queue create fail \r \n");
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <Queue_Init+0x8c>)
 800095c:	f006 fc90 	bl	8007280 <puts>
	}

	RFID_Ctrl_Queue = xQueueCreate(QUEUE_LENGTH, sizeof(QueueData_init));
 8000960:	2200      	movs	r2, #0
 8000962:	211c      	movs	r1, #28
 8000964:	2005      	movs	r0, #5
 8000966:	f003 fbf9 	bl	800415c <xQueueGenericCreate>
 800096a:	4603      	mov	r3, r0
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <Queue_Init+0x90>)
 800096e:	6013      	str	r3, [r2, #0]
	if (RFID_Ctrl_Queue == NULL) {
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <Queue_Init+0x90>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <Queue_Init+0x42>
		printf("RFID_Ctrl_Queue create fail \r \n");
 8000978:	4815      	ldr	r0, [pc, #84]	; (80009d0 <Queue_Init+0x94>)
 800097a:	f006 fc81 	bl	8007280 <puts>
	}


	Ctrl_FP_Queue = xQueueCreate(QUEUE_LENGTH, sizeof(QueueData_init));
 800097e:	2200      	movs	r2, #0
 8000980:	211c      	movs	r1, #28
 8000982:	2005      	movs	r0, #5
 8000984:	f003 fbea 	bl	800415c <xQueueGenericCreate>
 8000988:	4603      	mov	r3, r0
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <Queue_Init+0x98>)
 800098c:	6013      	str	r3, [r2, #0]
	if (Ctrl_FP_Queue == NULL) {
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <Queue_Init+0x98>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d102      	bne.n	800099c <Queue_Init+0x60>
		printf("Ctrl_FP_Queue create fail \r \n");
 8000996:	4810      	ldr	r0, [pc, #64]	; (80009d8 <Queue_Init+0x9c>)
 8000998:	f006 fc72 	bl	8007280 <puts>
	}

	FP_Ctrl_Queue = xQueueCreate(QUEUE_LENGTH, sizeof(QueueData_init));
 800099c:	2200      	movs	r2, #0
 800099e:	211c      	movs	r1, #28
 80009a0:	2005      	movs	r0, #5
 80009a2:	f003 fbdb 	bl	800415c <xQueueGenericCreate>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <Queue_Init+0xa0>)
 80009aa:	6013      	str	r3, [r2, #0]
	if (FP_Ctrl_Queue == NULL) {
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <Queue_Init+0xa0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <Queue_Init+0x7e>
		printf("FP_Ctrl_Queue create fail \r \n");
 80009b4:	480a      	ldr	r0, [pc, #40]	; (80009e0 <Queue_Init+0xa4>)
 80009b6:	f006 fc63 	bl	8007280 <puts>
	}

}
 80009ba:	bf00      	nop
 80009bc:	3720      	adds	r7, #32
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000180 	.word	0x20000180
 80009c8:	080081a4 	.word	0x080081a4
 80009cc:	20000184 	.word	0x20000184
 80009d0:	080081c4 	.word	0x080081c4
 80009d4:	20000188 	.word	0x20000188
 80009d8:	080081e4 	.word	0x080081e4
 80009dc:	2000018c 	.word	0x2000018c
 80009e0:	08008204 	.word	0x08008204

080009e4 <BSP_Init>:


static void BSP_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

	OLED_Init();
 80009e8:	f000 fcf2 	bl	80013d0 <OLED_Init>
	OLED_Clear();
 80009ec:	f000 fd8c 	bl	8001508 <OLED_Clear>
	OLED_Update();
 80009f0:	f000 fd5e 	bl	80014b0 <OLED_Update>

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <AppTaskCreate>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


static void AppTaskCreate(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af02      	add	r7, sp, #8
	BaseType_t xReturn = pdPASS;
 80009fe:	2301      	movs	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
	taskENTER_CRITICAL();
 8000a02:	f005 fb3f 	bl	8006084 <vPortEnterCritical>



	xReturn = xTaskCreate((TaskFunction_t	)DoorCtrlTask,
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <AppTaskCreate+0x8c>)
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	491d      	ldr	r1, [pc, #116]	; (8000a88 <AppTaskCreate+0x90>)
 8000a14:	481d      	ldr	r0, [pc, #116]	; (8000a8c <AppTaskCreate+0x94>)
 8000a16:	f003 ffe5 	bl	80049e4 <xTaskCreate>
 8000a1a:	6078      	str	r0, [r7, #4]
															(uint32_t 		)128,
															(void* 		  	)NULL,
															(UBaseType_t 	)5,
															(TaskHandle_t*  )&DoorCtrlTask_Handle);

	if(pdPASS == xReturn)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d102      	bne.n	8000a28 <AppTaskCreate+0x30>
		printf("DoorCtrlTask Task Create Successful!\r\n");
 8000a22:	481b      	ldr	r0, [pc, #108]	; (8000a90 <AppTaskCreate+0x98>)
 8000a24:	f006 fc2c 	bl	8007280 <puts>

	xReturn = xTaskCreate((TaskFunction_t	)RFIDTask,
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <AppTaskCreate+0x9c>)
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	4918      	ldr	r1, [pc, #96]	; (8000a98 <AppTaskCreate+0xa0>)
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <AppTaskCreate+0xa4>)
 8000a38:	f003 ffd4 	bl	80049e4 <xTaskCreate>
 8000a3c:	6078      	str	r0, [r7, #4]
															(const char* 	)"RFIDTask",
															(uint32_t 		)128,
															(void* 		  	)NULL,
															(UBaseType_t 	)5,
															(TaskHandle_t*  )&RFIDTask_Handle);
	if(pdPASS == xReturn)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d102      	bne.n	8000a4a <AppTaskCreate+0x52>
		printf("RFIDTask Task Create Successful!\r\n");
 8000a44:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <AppTaskCreate+0xa8>)
 8000a46:	f006 fc1b 	bl	8007280 <puts>

	xReturn = xTaskCreate((TaskFunction_t	)FPTask,
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <AppTaskCreate+0xac>)
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	2305      	movs	r3, #5
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2300      	movs	r3, #0
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	4914      	ldr	r1, [pc, #80]	; (8000aa8 <AppTaskCreate+0xb0>)
 8000a58:	4814      	ldr	r0, [pc, #80]	; (8000aac <AppTaskCreate+0xb4>)
 8000a5a:	f003 ffc3 	bl	80049e4 <xTaskCreate>
 8000a5e:	6078      	str	r0, [r7, #4]
															(const char* 	)"FPTask",
															(uint32_t 		)128,
															(void* 		  	)NULL,
															(UBaseType_t 	)5,
															(TaskHandle_t*  )&FPTask_Handle);
	if(pdPASS == xReturn)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d102      	bne.n	8000a6c <AppTaskCreate+0x74>
		printf("FPTask Task Create Successful!\r\n");
 8000a66:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <AppTaskCreate+0xb8>)
 8000a68:	f006 fc0a 	bl	8007280 <puts>



  vTaskDelete(AppTaskCreate_Handle);
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <AppTaskCreate+0xbc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f004 f8f5 	bl	8004c60 <vTaskDelete>

  taskEXIT_CRITICAL();            //???��?��??��?
 8000a76:	f005 fb35 	bl	80060e4 <vPortExitCritical>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000174 	.word	0x20000174
 8000a88:	08008224 	.word	0x08008224
 8000a8c:	0800667d 	.word	0x0800667d
 8000a90:	08008234 	.word	0x08008234
 8000a94:	20000178 	.word	0x20000178
 8000a98:	0800825c 	.word	0x0800825c
 8000a9c:	0800703d 	.word	0x0800703d
 8000aa0:	08008268 	.word	0x08008268
 8000aa4:	2000017c 	.word	0x2000017c
 8000aa8:	0800828c 	.word	0x0800828c
 8000aac:	08006fe5 	.word	0x08006fe5
 8000ab0:	08008294 	.word	0x08008294
 8000ab4:	20000170 	.word	0x20000170

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 ff85 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f82f 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f7ff fd6d 	bl	80005a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000aca:	f000 fa27 	bl	8000f1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ace:	f7ff fead 	bl	800082c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BaseType_t xReturn = pdPASS;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]

  BSP_Init();
 8000ad6:	f7ff ff85 	bl	80009e4 <BSP_Init>
  printf("BSP Init Done!\r\n");
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <main+0x58>)
 8000adc:	f006 fbd0 	bl	8007280 <puts>

  Queue_Init();
 8000ae0:	f7ff ff2c 	bl	800093c <Queue_Init>
  printf("Queue Init Done!\r\n");
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <main+0x5c>)
 8000ae6:	f006 fbcb 	bl	8007280 <puts>

  xReturn = xTaskCreate((TaskFunction_t	)AppTaskCreate,
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <main+0x60>)
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	2304      	movs	r3, #4
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2300      	movs	r3, #0
 8000af4:	2280      	movs	r2, #128	; 0x80
 8000af6:	4909      	ldr	r1, [pc, #36]	; (8000b1c <main+0x64>)
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <main+0x68>)
 8000afa:	f003 ff73 	bl	80049e4 <xTaskCreate>
 8000afe:	6078      	str	r0, [r7, #4]
														(uint32_t 		)128,
														(void* 		  	)NULL,
														(UBaseType_t 	)4,
														(TaskHandle_t*  )&AppTaskCreate_Handle);

	if(NULL != AppTaskCreate_Handle)
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <main+0x60>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <main+0x54>
	vTaskStartScheduler();
 8000b08:	f004 f96e 	bl	8004de8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <main+0x54>
 8000b0e:	bf00      	nop
 8000b10:	080082b4 	.word	0x080082b4
 8000b14:	080082c4 	.word	0x080082c4
 8000b18:	20000170 	.word	0x20000170
 8000b1c:	080082d8 	.word	0x080082d8
 8000b20:	080009f9 	.word	0x080009f9

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	2230      	movs	r2, #48	; 0x30
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f006 fb16 	bl	8007164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a27      	ldr	r2, [pc, #156]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <SystemClock_Config+0xd0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <SystemClock_Config+0xd0>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <SystemClock_Config+0xd0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b94:	2308      	movs	r3, #8
 8000b96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b98:	2348      	movs	r3, #72	; 0x48
 8000b9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 fe81 	bl	80028b0 <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb4:	f000 f832 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb8:	230f      	movs	r3, #15
 8000bba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f8e2 	bl	8002da0 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000be2:	f000 f81b 	bl	8000c1c <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3750      	adds	r7, #80	; 0x50
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c0a:	f000 ff01 	bl	8001a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40001400 	.word	0x40001400

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <HAL_InitTick+0xe4>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a32      	ldr	r2, [pc, #200]	; (8000d5c <HAL_InitTick+0xe4>)
 8000c92:	f043 0320 	orr.w	r3, r3, #32
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <HAL_InitTick+0xe4>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f003 0320 	and.w	r3, r3, #32
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca4:	f107 0210 	add.w	r2, r7, #16
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 fa96 	bl	80031e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d103      	bne.n	8000cc6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cbe:	f002 fa67 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8000cc2:	6378      	str	r0, [r7, #52]	; 0x34
 8000cc4:	e004      	b.n	8000cd0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cc6:	f002 fa63 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <HAL_InitTick+0xe8>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	0c9b      	lsrs	r3, r3, #18
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <HAL_InitTick+0xec>)
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <HAL_InitTick+0xf0>)
 8000ce2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <HAL_InitTick+0xec>)
 8000ce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cea:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <HAL_InitTick+0xec>)
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_InitTick+0xec>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_InitTick+0xec>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_InitTick+0xec>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000d04:	4817      	ldr	r0, [pc, #92]	; (8000d64 <HAL_InitTick+0xec>)
 8000d06:	f002 fa9d 	bl	8003244 <HAL_TIM_Base_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d11b      	bne.n	8000d50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000d18:	4812      	ldr	r0, [pc, #72]	; (8000d64 <HAL_InitTick+0xec>)
 8000d1a:	f002 faed 	bl	80032f8 <HAL_TIM_Base_Start_IT>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d111      	bne.n	8000d50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d2c:	2037      	movs	r0, #55	; 0x37
 8000d2e:	f000 ff87 	bl	8001c40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d808      	bhi.n	8000d4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	2037      	movs	r0, #55	; 0x37
 8000d3e:	f000 ff63 	bl	8001c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_InitTick+0xf4>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e002      	b.n	8000d50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3738      	adds	r7, #56	; 0x38
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	431bde83 	.word	0x431bde83
 8000d64:	20000190 	.word	0x20000190
 8000d68:	40001400 	.word	0x40001400
 8000d6c:	20000008 	.word	0x20000008

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM7_IRQHandler+0x10>)
 8000da2:	f002 fb19 	bl	80033d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000190 	.word	0x20000190

08000db0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
  }

  return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e009      	b.n	8000e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fd87 	bl	8000918 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <_write+0x12>
  }
  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_isatty>:

int _isatty(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f006 f91a 	bl	80070f4 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	200001d8 	.word	0x200001d8
 8000ef4:	20013418 	.word	0x20013418

08000ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_USART2_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f002 fc24 	bl	80037a0 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f7ff fe5d 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200001dc 	.word	0x200001dc
 8000f6c:	40004400 	.word	0x40004400

08000f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <HAL_UART_MspInit+0x84>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d12b      	bne.n	8000fea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fca:	230c      	movs	r3, #12
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_UART_MspInit+0x8c>)
 8000fe6:	f000 fe39 	bl	8001c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	; (800104c <LoopFillZerobss+0x26>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800102a:	f7ff ff65 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f006 f867 	bl	8007100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fd41 	bl	8000ab8 <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001044:	080097a0 	.word	0x080097a0
  ldr r2, =_sbss
 8001048:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800104c:	20013418 	.word	0x20013418

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <KEY_ROW_SCAN>:

uint8_t Key_row[1]={0xff};


char KEY_ROW_SCAN(void)
{
 8001054:	b598      	push	{r3, r4, r7, lr}
 8001056:	af00      	add	r7, sp, #0
    //读出行扫描状态
    Key_row[0] = HAL_GPIO_ReadPin(GPIOB,KEY_row0_Pin)<<3;
 8001058:	2110      	movs	r1, #16
 800105a:	4832      	ldr	r0, [pc, #200]	; (8001124 <KEY_ROW_SCAN+0xd0>)
 800105c:	f000 ff9a 	bl	8001f94 <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <KEY_ROW_SCAN+0xd4>)
 8001068:	701a      	strb	r2, [r3, #0]
    Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOB,KEY_row1_Pin)<<2);
 800106a:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <KEY_ROW_SCAN+0xd4>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b25c      	sxtb	r4, r3
 8001070:	2120      	movs	r1, #32
 8001072:	482c      	ldr	r0, [pc, #176]	; (8001124 <KEY_ROW_SCAN+0xd0>)
 8001074:	f000 ff8e 	bl	8001f94 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	b25b      	sxtb	r3, r3
 800107e:	4323      	orrs	r3, r4
 8001080:	b25b      	sxtb	r3, r3
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <KEY_ROW_SCAN+0xd4>)
 8001086:	701a      	strb	r2, [r3, #0]
    Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOB,KEY_row2_Pin)<<1);
 8001088:	4b27      	ldr	r3, [pc, #156]	; (8001128 <KEY_ROW_SCAN+0xd4>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b25c      	sxtb	r4, r3
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	4824      	ldr	r0, [pc, #144]	; (8001124 <KEY_ROW_SCAN+0xd0>)
 8001092:	f000 ff7f 	bl	8001f94 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	b25b      	sxtb	r3, r3
 800109c:	4323      	orrs	r3, r4
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <KEY_ROW_SCAN+0xd4>)
 80010a4:	701a      	strb	r2, [r3, #0]
    Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOB,KEY_row3_Pin));
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <KEY_ROW_SCAN+0xd4>)
 80010a8:	781c      	ldrb	r4, [r3, #0]
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	481d      	ldr	r0, [pc, #116]	; (8001124 <KEY_ROW_SCAN+0xd0>)
 80010b0:	f000 ff70 	bl	8001f94 <HAL_GPIO_ReadPin>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4323      	orrs	r3, r4
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <KEY_ROW_SCAN+0xd4>)
 80010bc:	701a      	strb	r2, [r3, #0]

    if(Key_row[0] != 0x0f)         //行扫描有变化，判断该列有按键按下
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <KEY_ROW_SCAN+0xd4>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d02a      	beq.n	800111c <KEY_ROW_SCAN+0xc8>
    {
      HAL_Delay(10);                    //消抖
 80010c6:	200a      	movs	r0, #10
 80010c8:	f000 fcc2 	bl	8001a50 <HAL_Delay>
      if(Key_row[0] != 0x0f)
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <KEY_ROW_SCAN+0xd4>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d021      	beq.n	8001118 <KEY_ROW_SCAN+0xc4>
        {
                //printf("Key_Row_DATA = 0x%x\r\n",Key_row[0]);
                switch(Key_row[0])
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <KEY_ROW_SCAN+0xd4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	3b07      	subs	r3, #7
 80010da:	2b07      	cmp	r3, #7
 80010dc:	d81a      	bhi.n	8001114 <KEY_ROW_SCAN+0xc0>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <KEY_ROW_SCAN+0x90>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	08001105 	.word	0x08001105
 80010e8:	08001115 	.word	0x08001115
 80010ec:	08001115 	.word	0x08001115
 80010f0:	08001115 	.word	0x08001115
 80010f4:	08001109 	.word	0x08001109
 80010f8:	08001115 	.word	0x08001115
 80010fc:	0800110d 	.word	0x0800110d
 8001100:	08001111 	.word	0x08001111
                {
                    case 0x07:         //0111 判断为该列第1行的按键按下
                        return 1;
 8001104:	2301      	movs	r3, #1
 8001106:	e00a      	b.n	800111e <KEY_ROW_SCAN+0xca>
                    case 0x0b:         //1011 判断为该列第2行的按键按下
                        return 2;
 8001108:	2302      	movs	r3, #2
 800110a:	e008      	b.n	800111e <KEY_ROW_SCAN+0xca>
                    case 0x0d:         //1101 判断为该列第3行的按键按下
                        return 3;
 800110c:	2303      	movs	r3, #3
 800110e:	e006      	b.n	800111e <KEY_ROW_SCAN+0xca>
                    case 0x0e:         //1110 判断为该列第4行的按键按下
                        return 4;
 8001110:	2304      	movs	r3, #4
 8001112:	e004      	b.n	800111e <KEY_ROW_SCAN+0xca>
                    default :
                        return 0;
 8001114:	2300      	movs	r3, #0
 8001116:	e002      	b.n	800111e <KEY_ROW_SCAN+0xca>
                }
        }
        else return 0;
 8001118:	2300      	movs	r3, #0
 800111a:	e000      	b.n	800111e <KEY_ROW_SCAN+0xca>
    }
    else return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd98      	pop	{r3, r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	40020400 	.word	0x40020400
 8001128:	20000004 	.word	0x20000004

0800112c <KEY_SCAN>:

char KEY_SCAN(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
    char Key_Num=0;       //1-16对应的按键数
 8001132:	2300      	movs	r3, #0
 8001134:	71fb      	strb	r3, [r7, #7]
    char key_row_num=0;        //行扫描结果记录
 8001136:	2300      	movs	r3, #0
 8001138:	71bb      	strb	r3, [r7, #6]

    KEY_CLO0_OUT_LOW;
 800113a:	2200      	movs	r2, #0
 800113c:	2101      	movs	r1, #1
 800113e:	4867      	ldr	r0, [pc, #412]	; (80012dc <KEY_SCAN+0x1b0>)
 8001140:	f000 ff40 	bl	8001fc4 <HAL_GPIO_WritePin>
    if( (key_row_num=KEY_ROW_SCAN()) != 0 )
 8001144:	f7ff ff86 	bl	8001054 <KEY_ROW_SCAN>
 8001148:	4603      	mov	r3, r0
 800114a:	71bb      	strb	r3, [r7, #6]
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <KEY_SCAN+0x36>
    {
        while(KEY_ROW_SCAN() != 0);  //消抖
 8001152:	bf00      	nop
 8001154:	f7ff ff7e 	bl	8001054 <KEY_ROW_SCAN>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1fa      	bne.n	8001154 <KEY_SCAN+0x28>
        Key_Num = 0 + key_row_num;
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	71fb      	strb	r3, [r7, #7]
        //printf("Key_Clo_1\r\n");
    }
    KEY_CLO0_OUT_HIGH;
 8001162:	2201      	movs	r2, #1
 8001164:	2101      	movs	r1, #1
 8001166:	485d      	ldr	r0, [pc, #372]	; (80012dc <KEY_SCAN+0x1b0>)
 8001168:	f000 ff2c 	bl	8001fc4 <HAL_GPIO_WritePin>

    KEY_CLO1_OUT_LOW;
 800116c:	2200      	movs	r2, #0
 800116e:	2102      	movs	r1, #2
 8001170:	485a      	ldr	r0, [pc, #360]	; (80012dc <KEY_SCAN+0x1b0>)
 8001172:	f000 ff27 	bl	8001fc4 <HAL_GPIO_WritePin>
    if( (key_row_num=KEY_ROW_SCAN()) != 0 )
 8001176:	f7ff ff6d 	bl	8001054 <KEY_ROW_SCAN>
 800117a:	4603      	mov	r3, r0
 800117c:	71bb      	strb	r3, [r7, #6]
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <KEY_SCAN+0x6a>
    {
        while(KEY_ROW_SCAN() != 0);
 8001184:	bf00      	nop
 8001186:	f7ff ff65 	bl	8001054 <KEY_ROW_SCAN>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1fa      	bne.n	8001186 <KEY_SCAN+0x5a>
        Key_Num = 4 + key_row_num;
 8001190:	79bb      	ldrb	r3, [r7, #6]
 8001192:	3304      	adds	r3, #4
 8001194:	71fb      	strb	r3, [r7, #7]
        //printf("Key_Clo_2\r\n");
    }
    KEY_CLO1_OUT_HIGH;
 8001196:	2201      	movs	r2, #1
 8001198:	2102      	movs	r1, #2
 800119a:	4850      	ldr	r0, [pc, #320]	; (80012dc <KEY_SCAN+0x1b0>)
 800119c:	f000 ff12 	bl	8001fc4 <HAL_GPIO_WritePin>

    KEY_CLO2_OUT_LOW;
 80011a0:	2200      	movs	r2, #0
 80011a2:	2104      	movs	r1, #4
 80011a4:	484d      	ldr	r0, [pc, #308]	; (80012dc <KEY_SCAN+0x1b0>)
 80011a6:	f000 ff0d 	bl	8001fc4 <HAL_GPIO_WritePin>
    if( (key_row_num=KEY_ROW_SCAN()) != 0 )
 80011aa:	f7ff ff53 	bl	8001054 <KEY_ROW_SCAN>
 80011ae:	4603      	mov	r3, r0
 80011b0:	71bb      	strb	r3, [r7, #6]
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <KEY_SCAN+0x9e>
    {
        while(KEY_ROW_SCAN() != 0);
 80011b8:	bf00      	nop
 80011ba:	f7ff ff4b 	bl	8001054 <KEY_ROW_SCAN>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1fa      	bne.n	80011ba <KEY_SCAN+0x8e>
    Key_Num = 8 + key_row_num;
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	3308      	adds	r3, #8
 80011c8:	71fb      	strb	r3, [r7, #7]
        //printf("Key_Clo_3\r\n");
    }
    KEY_CLO2_OUT_HIGH;
 80011ca:	2201      	movs	r2, #1
 80011cc:	2104      	movs	r1, #4
 80011ce:	4843      	ldr	r0, [pc, #268]	; (80012dc <KEY_SCAN+0x1b0>)
 80011d0:	f000 fef8 	bl	8001fc4 <HAL_GPIO_WritePin>

    KEY_CLO3_OUT_LOW;
 80011d4:	2200      	movs	r2, #0
 80011d6:	2108      	movs	r1, #8
 80011d8:	4840      	ldr	r0, [pc, #256]	; (80012dc <KEY_SCAN+0x1b0>)
 80011da:	f000 fef3 	bl	8001fc4 <HAL_GPIO_WritePin>
    if( (key_row_num=KEY_ROW_SCAN()) != 0 )
 80011de:	f7ff ff39 	bl	8001054 <KEY_ROW_SCAN>
 80011e2:	4603      	mov	r3, r0
 80011e4:	71bb      	strb	r3, [r7, #6]
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <KEY_SCAN+0xd2>
    {
        while(KEY_ROW_SCAN() != 0);
 80011ec:	bf00      	nop
 80011ee:	f7ff ff31 	bl	8001054 <KEY_ROW_SCAN>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1fa      	bne.n	80011ee <KEY_SCAN+0xc2>
        Key_Num = 12 + key_row_num;
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	330c      	adds	r3, #12
 80011fc:	71fb      	strb	r3, [r7, #7]
        //printf("Key_Clo_4\r\n");
    }
    KEY_CLO3_OUT_HIGH;
 80011fe:	2201      	movs	r2, #1
 8001200:	2108      	movs	r1, #8
 8001202:	4836      	ldr	r0, [pc, #216]	; (80012dc <KEY_SCAN+0x1b0>)
 8001204:	f000 fede 	bl	8001fc4 <HAL_GPIO_WritePin>


	if(0 == Key_Num) Key_Num = '\0';
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <KEY_SCAN+0xe8>
 800120e:	2300      	movs	r3, #0
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	e05e      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(1 == Key_Num) Key_Num = '1';
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d102      	bne.n	8001220 <KEY_SCAN+0xf4>
 800121a:	2331      	movs	r3, #49	; 0x31
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	e058      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(2 == Key_Num) Key_Num = '2';
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d102      	bne.n	800122c <KEY_SCAN+0x100>
 8001226:	2332      	movs	r3, #50	; 0x32
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	e052      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(3 == Key_Num) Key_Num = '3';
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d102      	bne.n	8001238 <KEY_SCAN+0x10c>
 8001232:	2333      	movs	r3, #51	; 0x33
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	e04c      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(4 == Key_Num) Key_Num = 'A';
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b04      	cmp	r3, #4
 800123c:	d102      	bne.n	8001244 <KEY_SCAN+0x118>
 800123e:	2341      	movs	r3, #65	; 0x41
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	e046      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(5 == Key_Num) Key_Num = '4';
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b05      	cmp	r3, #5
 8001248:	d102      	bne.n	8001250 <KEY_SCAN+0x124>
 800124a:	2334      	movs	r3, #52	; 0x34
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	e040      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(6 == Key_Num) Key_Num = '5';
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b06      	cmp	r3, #6
 8001254:	d102      	bne.n	800125c <KEY_SCAN+0x130>
 8001256:	2335      	movs	r3, #53	; 0x35
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	e03a      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(7 == Key_Num) Key_Num = '6';
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b07      	cmp	r3, #7
 8001260:	d102      	bne.n	8001268 <KEY_SCAN+0x13c>
 8001262:	2336      	movs	r3, #54	; 0x36
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e034      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(8 == Key_Num) Key_Num = 'B';
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d102      	bne.n	8001274 <KEY_SCAN+0x148>
 800126e:	2342      	movs	r3, #66	; 0x42
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	e02e      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(9 == Key_Num) Key_Num = '7';
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b09      	cmp	r3, #9
 8001278:	d102      	bne.n	8001280 <KEY_SCAN+0x154>
 800127a:	2337      	movs	r3, #55	; 0x37
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	e028      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(10 == Key_Num) Key_Num = '8';
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b0a      	cmp	r3, #10
 8001284:	d102      	bne.n	800128c <KEY_SCAN+0x160>
 8001286:	2338      	movs	r3, #56	; 0x38
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	e022      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(11 == Key_Num) Key_Num = '9';
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b0b      	cmp	r3, #11
 8001290:	d102      	bne.n	8001298 <KEY_SCAN+0x16c>
 8001292:	2339      	movs	r3, #57	; 0x39
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	e01c      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(12 == Key_Num) Key_Num = 'C';
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b0c      	cmp	r3, #12
 800129c:	d102      	bne.n	80012a4 <KEY_SCAN+0x178>
 800129e:	2343      	movs	r3, #67	; 0x43
 80012a0:	71fb      	strb	r3, [r7, #7]
 80012a2:	e016      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(13 == Key_Num) Key_Num = '*';
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b0d      	cmp	r3, #13
 80012a8:	d102      	bne.n	80012b0 <KEY_SCAN+0x184>
 80012aa:	232a      	movs	r3, #42	; 0x2a
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	e010      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(14 == Key_Num) Key_Num = '0';
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b0e      	cmp	r3, #14
 80012b4:	d102      	bne.n	80012bc <KEY_SCAN+0x190>
 80012b6:	2330      	movs	r3, #48	; 0x30
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	e00a      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(15 == Key_Num) Key_Num = '#';
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	d102      	bne.n	80012c8 <KEY_SCAN+0x19c>
 80012c2:	2323      	movs	r3, #35	; 0x23
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e004      	b.n	80012d2 <KEY_SCAN+0x1a6>
	else if(16 == Key_Num) Key_Num = 'D';
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	2b10      	cmp	r3, #16
 80012cc:	d101      	bne.n	80012d2 <KEY_SCAN+0x1a6>
 80012ce:	2344      	movs	r3, #68	; 0x44
 80012d0:	71fb      	strb	r3, [r7, #7]



    return Key_Num;
 80012d2:	79fb      	ldrb	r3, [r7, #7]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <appendChar>:



void appendChar(char *str, char c, int max_length) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	460b      	mov	r3, r1
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	72fb      	strb	r3, [r7, #11]

	uint8_t error = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]
    int len = strlen(str);  // 找到字符串的當前長度
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7fe ff76 	bl	80001e4 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]

    if (len < max_length -1 )
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	429a      	cmp	r2, r3
 8001304:	da0b      	bge.n	800131e <appendChar+0x3e>
    {
        str[len] = c;           // 在原來的結尾 null 字符位置放置新字符
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	7afa      	ldrb	r2, [r7, #11]
 800130e:	701a      	strb	r2, [r3, #0]
        str[len + 1] = '\0';    // 添加新的結尾 null 字符
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	3301      	adds	r3, #1
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
    else
    {
    	error = 1;
    	printf("no space to append new char\n");
    }
}
 800131c:	e004      	b.n	8001328 <appendChar+0x48>
    	error = 1;
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
    	printf("no space to append new char\n");
 8001322:	4803      	ldr	r0, [pc, #12]	; (8001330 <appendChar+0x50>)
 8001324:	f005 ffac 	bl	8007280 <puts>
}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	080082e8 	.word	0x080082e8

08001334 <removeChar>:

void removeChar(char *str) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	uint8_t error;
	int len = strlen(str);  // 找到字符串的當前長度
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7fe ff51 	bl	80001e4 <strlen>
 8001342:	4603      	mov	r3, r0
 8001344:	60fb      	str	r3, [r7, #12]

	if(len > 0 )
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd06      	ble.n	800135a <removeChar+0x26>
	{
		str[len - 1] = '\0';  // 將最後一個字符設置為 null 字符
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3b01      	subs	r3, #1
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
    {
    	error = 1;
    	printf("no char to remove\n");
    }

}
 8001358:	e004      	b.n	8001364 <removeChar+0x30>
    	error = 1;
 800135a:	2301      	movs	r3, #1
 800135c:	72fb      	strb	r3, [r7, #11]
    	printf("no char to remove\n");
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <removeChar+0x38>)
 8001360:	f005 ff8e 	bl	8007280 <puts>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	08008304 	.word	0x08008304

08001370 <OLED_WriteCommand>:
  * 函    数：OLED写命令
  * 参    数：Command 要写入的命令值，范围：0x00~0xFF
  * 返 回 值：无
  */
void OLED_WriteCommand(uint8_t Command)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af04      	add	r7, sp, #16
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&Command,1,0x100);
 800137a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	2301      	movs	r3, #1
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2301      	movs	r3, #1
 800138a:	2200      	movs	r2, #0
 800138c:	2178      	movs	r1, #120	; 0x78
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <OLED_WriteCommand+0x2c>)
 8001390:	f000 ff76 	bl	8002280 <HAL_I2C_Mem_Write>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000011c 	.word	0x2000011c

080013a0 <OLED_WriteData>:
  * 参    数：Data 要写入数据的起始地址
  * 参    数：Count 要写入数据的数量
  * 返 回 值：无
  */
void OLED_WriteData(uint8_t Data)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af04      	add	r7, sp, #16
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&Data,1,0x100);
 80013aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	2178      	movs	r1, #120	; 0x78
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <OLED_WriteData+0x2c>)
 80013c0:	f000 ff5e 	bl	8002280 <HAL_I2C_Mem_Write>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000011c 	.word	0x2000011c

080013d0 <OLED_Init>:
  * 参    数：无
  * 返 回 值：无
  * 说    明：使用前，需要调用此初始化函数
  */
void OLED_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	/*写入一系列的命令，对OLED进行初始化配置*/
	OLED_WriteCommand(0xAE);	//设置显示开启/关闭，0xAE关闭，0xAF开启
 80013d4:	20ae      	movs	r0, #174	; 0xae
 80013d6:	f7ff ffcb 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80013da:	20d5      	movs	r0, #213	; 0xd5
 80013dc:	f7ff ffc8 	bl	8001370 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 80013e0:	2080      	movs	r0, #128	; 0x80
 80013e2:	f7ff ffc5 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xA8);	//设置多路复用率
 80013e6:	20a8      	movs	r0, #168	; 0xa8
 80013e8:	f7ff ffc2 	bl	8001370 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 80013ec:	203f      	movs	r0, #63	; 0x3f
 80013ee:	f7ff ffbf 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xD3);	//设置显示偏移
 80013f2:	20d3      	movs	r0, #211	; 0xd3
 80013f4:	f7ff ffbc 	bl	8001370 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff ffb9 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0x40);	//设置显示开始行，0x40~0x7F
 80013fe:	2040      	movs	r0, #64	; 0x40
 8001400:	f7ff ffb6 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常，0xA0左右反置
 8001404:	20a1      	movs	r0, #161	; 0xa1
 8001406:	f7ff ffb3 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常，0xC0上下反置
 800140a:	20c8      	movs	r0, #200	; 0xc8
 800140c:	f7ff ffb0 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8001410:	20da      	movs	r0, #218	; 0xda
 8001412:	f7ff ffad 	bl	8001370 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8001416:	2012      	movs	r0, #18
 8001418:	f7ff ffaa 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0x81);	//设置对比度
 800141c:	2081      	movs	r0, #129	; 0x81
 800141e:	f7ff ffa7 	bl	8001370 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 8001422:	20cf      	movs	r0, #207	; 0xcf
 8001424:	f7ff ffa4 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8001428:	20d9      	movs	r0, #217	; 0xd9
 800142a:	f7ff ffa1 	bl	8001370 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 800142e:	20f1      	movs	r0, #241	; 0xf1
 8001430:	f7ff ff9e 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8001434:	20db      	movs	r0, #219	; 0xdb
 8001436:	f7ff ff9b 	bl	8001370 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800143a:	2030      	movs	r0, #48	; 0x30
 800143c:	f7ff ff98 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8001440:	20a4      	movs	r0, #164	; 0xa4
 8001442:	f7ff ff95 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/反色显示，0xA6正常，0xA7反色
 8001446:	20a6      	movs	r0, #166	; 0xa6
 8001448:	f7ff ff92 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 800144c:	208d      	movs	r0, #141	; 0x8d
 800144e:	f7ff ff8f 	bl	8001370 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8001452:	2014      	movs	r0, #20
 8001454:	f7ff ff8c 	bl	8001370 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8001458:	20af      	movs	r0, #175	; 0xaf
 800145a:	f7ff ff89 	bl	8001370 <OLED_WriteCommand>
	
	OLED_Clear();				//清空显存数组
 800145e:	f000 f853 	bl	8001508 <OLED_Clear>
	OLED_Update();				//更新显示，清屏，防止初始化后未显示内容时花屏
 8001462:	f000 f825 	bl	80014b0 <OLED_Update>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}

0800146a <OLED_SetCursor>:
  * 参    数：X 指定光标所在的X轴坐标，范围：0~127
  * 返 回 值：无
  * 说    明：OLED默认的Y轴，只能8个Bit为一组写入，即1页等于8个Y轴坐标
  */
void OLED_SetCursor(uint8_t Page, uint8_t X)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	460a      	mov	r2, r1
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	4613      	mov	r3, r2
 8001478:	71bb      	strb	r3, [r7, #6]
	/*屏幕的起始列接在了第2列，而不是第0列*/
	/*所以需要将X加2，才能正常显示*/
//	X += 2;
	
	/*通过指令设置页地址和列地址*/
	OLED_WriteCommand(0xB0 | Page);					//设置页位置
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff74 	bl	8001370 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff6b 	bl	8001370 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 800149a:	79bb      	ldrb	r3, [r7, #6]
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff64 	bl	8001370 <OLED_WriteCommand>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <OLED_Update>:
  *           随后调用OLED_Update函数或OLED_UpdateArea函数
  *           才会将显存数组的数据发送到OLED硬件，进行显示
  *           故调用显示函数后，要想真正地呈现在屏幕上，还需调用更新函数
  */
void OLED_Update(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	uint8_t j,n;
	/*遍历每一页*/
	for (j = 0; j < 8; j ++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e01b      	b.n	80014f4 <OLED_Update+0x44>
	{
		/*设置光标位置为每一页的第一列*/
		OLED_SetCursor(j, 0);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ffd2 	bl	800146a <OLED_SetCursor>
		/*连续写入128个数据，将显存数组的数据写入到OLED硬件*/
//		OLED_WriteData(OLED_DisplayBuf[j],128);
		for(n=0;n<128;n++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	71bb      	strb	r3, [r7, #6]
 80014ca:	e00c      	b.n	80014e6 <OLED_Update+0x36>
		{
			OLED_WriteData(OLED_DisplayBuf[j][n]);
 80014cc:	79fa      	ldrb	r2, [r7, #7]
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <OLED_Update+0x54>)
 80014d2:	01d2      	lsls	r2, r2, #7
 80014d4:	440a      	add	r2, r1
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff60 	bl	80013a0 <OLED_WriteData>
		for(n=0;n<128;n++)
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	3301      	adds	r3, #1
 80014e4:	71bb      	strb	r3, [r7, #6]
 80014e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	daee      	bge.n	80014cc <OLED_Update+0x1c>
	for (j = 0; j < 8; j ++)
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	3301      	adds	r3, #1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b07      	cmp	r3, #7
 80014f8:	d9e0      	bls.n	80014bc <OLED_Update+0xc>
		}
	}
}
 80014fa:	bf00      	nop
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000220 	.word	0x20000220

08001508 <OLED_Clear>:
  * 参    数：无
  * 返 回 值：无
  * 说    明：调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
  */
void OLED_Clear(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j ++)				//遍历8页
 800150e:	2300      	movs	r3, #0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	e014      	b.n	800153e <OLED_Clear+0x36>
	{
		for (i = 0; i < 128; i ++)			//遍历128列
 8001514:	2300      	movs	r3, #0
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	e00a      	b.n	8001530 <OLED_Clear+0x28>
		{
			OLED_DisplayBuf[j][i] = 0x00;	//将显存数组数据全部清零
 800151a:	79ba      	ldrb	r2, [r7, #6]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	490d      	ldr	r1, [pc, #52]	; (8001554 <OLED_Clear+0x4c>)
 8001520:	01d2      	lsls	r2, r2, #7
 8001522:	440a      	add	r2, r1
 8001524:	4413      	add	r3, r2
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 128; i ++)			//遍历128列
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	3301      	adds	r3, #1
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	daf0      	bge.n	800151a <OLED_Clear+0x12>
	for (j = 0; j < 8; j ++)				//遍历8页
 8001538:	79bb      	ldrb	r3, [r7, #6]
 800153a:	3301      	adds	r3, #1
 800153c:	71bb      	strb	r3, [r7, #6]
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	2b07      	cmp	r3, #7
 8001542:	d9e7      	bls.n	8001514 <OLED_Clear+0xc>
		}
	}
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000220 	.word	0x20000220

08001558 <OLED_ClearArea>:
  * 参    数：Height 指定区域的高度，范围：0~64
  * 返 回 值：无
  * 说    明：调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
  */
void OLED_ClearArea(int16_t X, int16_t Y, uint8_t Width, uint8_t Height)
{
 8001558:	b490      	push	{r4, r7}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4604      	mov	r4, r0
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4623      	mov	r3, r4
 8001568:	80fb      	strh	r3, [r7, #6]
 800156a:	4603      	mov	r3, r0
 800156c:	80bb      	strh	r3, [r7, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	70fb      	strb	r3, [r7, #3]
 8001572:	4613      	mov	r3, r2
 8001574:	70bb      	strb	r3, [r7, #2]
	int16_t i, j;
	
	for (j = Y; j < Y + Height; j ++)		//遍历指定页
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	81bb      	strh	r3, [r7, #12]
 800157a:	e052      	b.n	8001622 <OLED_ClearArea+0xca>
	{
		for (i = X; i < X + Width; i ++)	//遍历指定列
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	81fb      	strh	r3, [r7, #14]
 8001580:	e041      	b.n	8001606 <OLED_ClearArea+0xae>
		{
			if (i >= 0 && i <= 127 && j >=0 && j <= 63)				//超出屏幕的内容不显示
 8001582:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db37      	blt.n	80015fa <OLED_ClearArea+0xa2>
 800158a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800158e:	2b7f      	cmp	r3, #127	; 0x7f
 8001590:	dc33      	bgt.n	80015fa <OLED_ClearArea+0xa2>
 8001592:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db2f      	blt.n	80015fa <OLED_ClearArea+0xa2>
 800159a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800159e:	2b3f      	cmp	r3, #63	; 0x3f
 80015a0:	dc2b      	bgt.n	80015fa <OLED_ClearArea+0xa2>
			{
				OLED_DisplayBuf[j / 8][i] &= ~(0x01 << (j % 8));	//将显存数组指定数据清零
 80015a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da00      	bge.n	80015ac <OLED_ClearArea+0x54>
 80015aa:	3307      	adds	r3, #7
 80015ac:	10db      	asrs	r3, r3, #3
 80015ae:	b218      	sxth	r0, r3
 80015b0:	4602      	mov	r2, r0
 80015b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b6:	4922      	ldr	r1, [pc, #136]	; (8001640 <OLED_ClearArea+0xe8>)
 80015b8:	01d2      	lsls	r2, r2, #7
 80015ba:	440a      	add	r2, r1
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25a      	sxtb	r2, r3
 80015c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015c6:	4259      	negs	r1, r3
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	f001 0107 	and.w	r1, r1, #7
 80015d0:	bf58      	it	pl
 80015d2:	424b      	negpl	r3, r1
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	2301      	movs	r3, #1
 80015da:	408b      	lsls	r3, r1
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	4013      	ands	r3, r2
 80015e4:	b259      	sxtb	r1, r3
 80015e6:	4602      	mov	r2, r0
 80015e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ec:	b2c8      	uxtb	r0, r1
 80015ee:	4914      	ldr	r1, [pc, #80]	; (8001640 <OLED_ClearArea+0xe8>)
 80015f0:	01d2      	lsls	r2, r2, #7
 80015f2:	440a      	add	r2, r1
 80015f4:	4413      	add	r3, r2
 80015f6:	4602      	mov	r2, r0
 80015f8:	701a      	strb	r2, [r3, #0]
		for (i = X; i < X + Width; i ++)	//遍历指定列
 80015fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3301      	adds	r3, #1
 8001602:	b29b      	uxth	r3, r3
 8001604:	81fb      	strh	r3, [r7, #14]
 8001606:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800160a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	440b      	add	r3, r1
 8001612:	429a      	cmp	r2, r3
 8001614:	dbb5      	blt.n	8001582 <OLED_ClearArea+0x2a>
	for (j = Y; j < Y + Height; j ++)		//遍历指定页
 8001616:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800161a:	b29b      	uxth	r3, r3
 800161c:	3301      	adds	r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	81bb      	strh	r3, [r7, #12]
 8001622:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001626:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800162a:	78bb      	ldrb	r3, [r7, #2]
 800162c:	440b      	add	r3, r1
 800162e:	429a      	cmp	r2, r3
 8001630:	dba4      	blt.n	800157c <OLED_ClearArea+0x24>
			}
		}
	}
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bc90      	pop	{r4, r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000220 	.word	0x20000220

08001644 <OLED_ShowChar>:
  *                 OLED_6X8		宽6像素，高8像素
  * 返 回 值：无
  * 说    明：调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
  */
void OLED_ShowChar(int16_t X, int16_t Y, char Char, uint8_t FontSize)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b085      	sub	sp, #20
 8001648:	af02      	add	r7, sp, #8
 800164a:	4604      	mov	r4, r0
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4623      	mov	r3, r4
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	4603      	mov	r3, r0
 8001658:	80bb      	strh	r3, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	70fb      	strb	r3, [r7, #3]
 800165e:	4613      	mov	r3, r2
 8001660:	70bb      	strb	r3, [r7, #2]
	if (FontSize == OLED_8X16)		//字体为宽8像素，高16像素
 8001662:	78bb      	ldrb	r3, [r7, #2]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d10e      	bne.n	8001686 <OLED_ShowChar+0x42>
	{
		/*将ASCII字模库OLED_F8x16的指定数据以8*16的图像格式显示*/
		OLED_ShowImage(X, Y, 8, 16, OLED_F8x16[Char - ' ']);
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	3b20      	subs	r3, #32
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <OLED_ShowChar+0x74>)
 8001670:	4413      	add	r3, r2
 8001672:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001676:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2310      	movs	r3, #16
 800167e:	2208      	movs	r2, #8
 8001680:	f000 f8c0 	bl	8001804 <OLED_ShowImage>
	else if(FontSize == OLED_6X8)	//字体为宽6像素，高8像素
	{
		/*将ASCII字模库OLED_F6x8的指定数据以6*8的图像格式显示*/
		OLED_ShowImage(X, Y, 6, 8, OLED_F6x8[Char - ' ']);
	}
}
 8001684:	e014      	b.n	80016b0 <OLED_ShowChar+0x6c>
	else if(FontSize == OLED_6X8)	//字体为宽6像素，高8像素
 8001686:	78bb      	ldrb	r3, [r7, #2]
 8001688:	2b06      	cmp	r3, #6
 800168a:	d111      	bne.n	80016b0 <OLED_ShowChar+0x6c>
		OLED_ShowImage(X, Y, 6, 8, OLED_F6x8[Char - ' ']);
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	f1a3 0220 	sub.w	r2, r3, #32
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <OLED_ShowChar+0x78>)
 800169c:	4413      	add	r3, r2
 800169e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2308      	movs	r3, #8
 80016aa:	2206      	movs	r2, #6
 80016ac:	f000 f8aa 	bl	8001804 <OLED_ShowImage>
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd90      	pop	{r4, r7, pc}
 80016b8:	08008680 	.word	0x08008680
 80016bc:	08008c70 	.word	0x08008c70

080016c0 <OLED_ShowString>:
  *                 OLED_6X8		宽6像素，高8像素
  * 返 回 值：无
  * 说    明：调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
  */
void OLED_ShowString(int16_t X, int16_t Y, char *String, uint8_t FontSize)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60ba      	str	r2, [r7, #8]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	81fb      	strh	r3, [r7, #14]
 80016ce:	460b      	mov	r3, r1
 80016d0:	81bb      	strh	r3, [r7, #12]
 80016d2:	4613      	mov	r3, r2
 80016d4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)		//遍历字符串的每个字符
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
 80016da:	e016      	b.n	800170a <OLED_ShowString+0x4a>
	{
		/*调用OLED_ShowChar函数，依次显示每个字符*/
		OLED_ShowChar(X + i * FontSize, Y, String[i], FontSize);
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	fb12 f303 	smulbb	r3, r2, r3
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	89fb      	ldrh	r3, [r7, #14]
 80016ec:	4413      	add	r3, r2
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	b218      	sxth	r0, r3
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	4413      	add	r3, r2
 80016f8:	781a      	ldrb	r2, [r3, #0]
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001700:	f7ff ffa0 	bl	8001644 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)		//遍历字符串的每个字符
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	3301      	adds	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	4413      	add	r3, r2
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1e2      	bne.n	80016dc <OLED_ShowString+0x1c>
	}
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <OLED_ShowChinese>:
  *           未找到指定汉字时，会显示默认图形（一个方框，内部一个问号）
  * 返 回 值：无
  * 说    明：调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
  */
void OLED_ShowChinese(int16_t X, int16_t Y, char *Chinese)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af02      	add	r7, sp, #8
 8001726:	4603      	mov	r3, r0
 8001728:	603a      	str	r2, [r7, #0]
 800172a:	80fb      	strh	r3, [r7, #6]
 800172c:	460b      	mov	r3, r1
 800172e:	80bb      	strh	r3, [r7, #4]
	uint8_t pChinese = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
	uint8_t pIndex;
	uint8_t i;
	char SingleChinese[OLED_CHN_CHAR_WIDTH + 1] = {0};
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; Chinese[i] != '\0'; i ++)		//遍历汉字串
 8001738:	2300      	movs	r3, #0
 800173a:	737b      	strb	r3, [r7, #13]
 800173c:	e053      	b.n	80017e6 <OLED_ShowChinese+0xc6>
	{
		SingleChinese[pChinese] = Chinese[i];	//提取汉字串数据到单个汉字数组
 800173e:	7b7b      	ldrb	r3, [r7, #13]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	441a      	add	r2, r3
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	7812      	ldrb	r2, [r2, #0]
 8001748:	3310      	adds	r3, #16
 800174a:	443b      	add	r3, r7
 800174c:	f803 2c08 	strb.w	r2, [r3, #-8]
		pChinese ++;							//计次自增
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	3301      	adds	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
		
		/*当提取次数到达OLED_CHN_CHAR_WIDTH时，即代表提取到了一个完整的汉字*/
		if (pChinese >= OLED_CHN_CHAR_WIDTH)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d941      	bls.n	80017e0 <OLED_ShowChinese+0xc0>
		{
			pChinese = 0;		//计次归零
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
			
			/*遍历整个汉字字模库，寻找匹配的汉字*/
			/*如果找到最后一个汉字（定义为空字符串），则表示汉字未在字模库定义，停止寻找*/
			for (pIndex = 0; strcmp(OLED_CF16x16[pIndex].Index, "") != 0; pIndex ++)
 8001760:	2300      	movs	r3, #0
 8001762:	73bb      	strb	r3, [r7, #14]
 8001764:	e012      	b.n	800178c <OLED_ShowChinese+0x6c>
			{
				/*找到匹配的汉字*/
				if (strcmp(OLED_CF16x16[pIndex].Index, SingleChinese) == 0)
 8001766:	7bba      	ldrb	r2, [r7, #14]
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4a22      	ldr	r2, [pc, #136]	; (80017fc <OLED_ShowChinese+0xdc>)
 8001772:	4413      	add	r3, r2
 8001774:	f107 0208 	add.w	r2, r7, #8
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fd28 	bl	80001d0 <strcmp>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00d      	beq.n	80017a2 <OLED_ShowChinese+0x82>
			for (pIndex = 0; strcmp(OLED_CF16x16[pIndex].Index, "") != 0; pIndex ++)
 8001786:	7bbb      	ldrb	r3, [r7, #14]
 8001788:	3301      	adds	r3, #1
 800178a:	73bb      	strb	r3, [r7, #14]
 800178c:	7bba      	ldrb	r2, [r7, #14]
 800178e:	4613      	mov	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4a19      	ldr	r2, [pc, #100]	; (80017fc <OLED_ShowChinese+0xdc>)
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e2      	bne.n	8001766 <OLED_ShowChinese+0x46>
 80017a0:	e000      	b.n	80017a4 <OLED_ShowChinese+0x84>
				{
					break;		//跳出循环，此时pIndex的值为指定汉字的索引
 80017a2:	bf00      	nop
				}
			}
			
			/*将汉字字模库OLED_CF16x16的指定数据以16*16的图像格式显示*/
			OLED_ShowImage(X + ((i + 1) / OLED_CHN_CHAR_WIDTH - 1) * 16, Y, 16, 16, OLED_CF16x16[pIndex].Data);
 80017a4:	7b7b      	ldrb	r3, [r7, #13]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a15      	ldr	r2, [pc, #84]	; (8001800 <OLED_ShowChinese+0xe0>)
 80017aa:	fb82 1203 	smull	r1, r2, r2, r3
 80017ae:	17db      	asrs	r3, r3, #31
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	4413      	add	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	b218      	sxth	r0, r3
 80017c2:	7bba      	ldrb	r2, [r7, #14]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <OLED_ShowChinese+0xdc>)
 80017ce:	4413      	add	r3, r2
 80017d0:	3304      	adds	r3, #4
 80017d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2310      	movs	r3, #16
 80017da:	2210      	movs	r2, #16
 80017dc:	f000 f812 	bl	8001804 <OLED_ShowImage>
	for (i = 0; Chinese[i] != '\0'; i ++)		//遍历汉字串
 80017e0:	7b7b      	ldrb	r3, [r7, #13]
 80017e2:	3301      	adds	r3, #1
 80017e4:	737b      	strb	r3, [r7, #13]
 80017e6:	7b7b      	ldrb	r3, [r7, #13]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1a5      	bne.n	800173e <OLED_ShowChinese+0x1e>
		}
	}
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	08008eac 	.word	0x08008eac
 8001800:	55555556 	.word	0x55555556

08001804 <OLED_ShowImage>:
  * 参    数：Image 指定要显示的图像
  * 返 回 值：无
  * 说    明：调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
  */
void OLED_ShowImage(int16_t X, int16_t Y, uint8_t Width, uint8_t Height, const uint8_t *Image)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	4604      	mov	r4, r0
 800180c:	4608      	mov	r0, r1
 800180e:	4611      	mov	r1, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4623      	mov	r3, r4
 8001814:	80fb      	strh	r3, [r7, #6]
 8001816:	4603      	mov	r3, r0
 8001818:	80bb      	strh	r3, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	70fb      	strb	r3, [r7, #3]
 800181e:	4613      	mov	r3, r2
 8001820:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, j = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
 8001826:	2300      	movs	r3, #0
 8001828:	73bb      	strb	r3, [r7, #14]
	int16_t Page, Shift;
	
	/*将图像所在区域清空*/
	OLED_ClearArea(X, Y, Width, Height);
 800182a:	78bb      	ldrb	r3, [r7, #2]
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001832:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001836:	f7ff fe8f 	bl	8001558 <OLED_ClearArea>
	
	/*遍历指定图像涉及的相关页*/
	/*(Height - 1) / 8 + 1的目的是Height / 8并向上取整*/
	for (j = 0; j < (Height - 1) / 8 + 1; j ++)
 800183a:	2300      	movs	r3, #0
 800183c:	73bb      	strb	r3, [r7, #14]
 800183e:	e0b3      	b.n	80019a8 <OLED_ShowImage+0x1a4>
	{
		/*遍历指定图像涉及的相关列*/
		for (i = 0; i < Width; i ++)
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e0a8      	b.n	8001998 <OLED_ShowImage+0x194>
		{
			if (X + i >= 0 && X + i <= 127)		//超出屏幕的内容不显示
 8001846:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	4413      	add	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	f2c0 809f 	blt.w	8001992 <OLED_ShowImage+0x18e>
 8001854:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	4413      	add	r3, r2
 800185c:	2b7f      	cmp	r3, #127	; 0x7f
 800185e:	f300 8098 	bgt.w	8001992 <OLED_ShowImage+0x18e>
			{
				/*负数坐标在计算页地址和移位时需要加一个偏移*/
				Page = Y / 8;
 8001862:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	da00      	bge.n	800186c <OLED_ShowImage+0x68>
 800186a:	3307      	adds	r3, #7
 800186c:	10db      	asrs	r3, r3, #3
 800186e:	81bb      	strh	r3, [r7, #12]
				Shift = Y % 8;
 8001870:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001874:	425a      	negs	r2, r3
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	f002 0207 	and.w	r2, r2, #7
 800187e:	bf58      	it	pl
 8001880:	4253      	negpl	r3, r2
 8001882:	817b      	strh	r3, [r7, #10]
				if (Y < 0)
 8001884:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	da07      	bge.n	800189c <OLED_ShowImage+0x98>
				{
					Page -= 1;
 800188c:	89bb      	ldrh	r3, [r7, #12]
 800188e:	3b01      	subs	r3, #1
 8001890:	b29b      	uxth	r3, r3
 8001892:	81bb      	strh	r3, [r7, #12]
					Shift += 8;
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	3308      	adds	r3, #8
 8001898:	b29b      	uxth	r3, r3
 800189a:	817b      	strh	r3, [r7, #10]
				}
				
				if (Page + j >= 0 && Page + j <= 7)		//超出屏幕的内容不显示
 800189c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018a0:	7bbb      	ldrb	r3, [r7, #14]
 80018a2:	4413      	add	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db34      	blt.n	8001912 <OLED_ShowImage+0x10e>
 80018a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	4413      	add	r3, r2
 80018b0:	2b07      	cmp	r3, #7
 80018b2:	dc2e      	bgt.n	8001912 <OLED_ShowImage+0x10e>
				{
					/*显示图像在当前页的内容*/
					OLED_DisplayBuf[Page + j][X + i] |= Image[j * Width + i] << (Shift);
 80018b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	441a      	add	r2, r3
 80018bc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	440b      	add	r3, r1
 80018c4:	4940      	ldr	r1, [pc, #256]	; (80019c8 <OLED_ShowImage+0x1c4>)
 80018c6:	01d2      	lsls	r2, r2, #7
 80018c8:	440a      	add	r2, r1
 80018ca:	4413      	add	r3, r2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b25a      	sxtb	r2, r3
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	78f9      	ldrb	r1, [r7, #3]
 80018d4:	fb03 f101 	mul.w	r1, r3, r1
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	440b      	add	r3, r1
 80018dc:	4619      	mov	r1, r3
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	440b      	add	r3, r1
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b258      	sxtb	r0, r3
 80018f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018f8:	7bbb      	ldrb	r3, [r7, #14]
 80018fa:	441a      	add	r2, r3
 80018fc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	440b      	add	r3, r1
 8001904:	b2c0      	uxtb	r0, r0
 8001906:	4930      	ldr	r1, [pc, #192]	; (80019c8 <OLED_ShowImage+0x1c4>)
 8001908:	01d2      	lsls	r2, r2, #7
 800190a:	440a      	add	r2, r1
 800190c:	4413      	add	r3, r2
 800190e:	4602      	mov	r2, r0
 8001910:	701a      	strb	r2, [r3, #0]
				}
				
				if (Page + j + 1 >= 0 && Page + j + 1 <= 7)		//超出屏幕的内容不显示
 8001912:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001916:	7bbb      	ldrb	r3, [r7, #14]
 8001918:	4413      	add	r3, r2
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	db38      	blt.n	8001992 <OLED_ShowImage+0x18e>
 8001920:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	4413      	add	r3, r2
 8001928:	2b06      	cmp	r3, #6
 800192a:	dc32      	bgt.n	8001992 <OLED_ShowImage+0x18e>
				{					
					/*显示图像在下一页的内容*/
					OLED_DisplayBuf[Page + j + 1][X + i] |= Image[j * Width + i] >> (8 - Shift);
 800192c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001930:	7bbb      	ldrb	r3, [r7, #14]
 8001932:	4413      	add	r3, r2
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	440b      	add	r3, r1
 800193e:	4922      	ldr	r1, [pc, #136]	; (80019c8 <OLED_ShowImage+0x1c4>)
 8001940:	01d2      	lsls	r2, r2, #7
 8001942:	440a      	add	r2, r1
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b25a      	sxtb	r2, r3
 800194a:	7bbb      	ldrb	r3, [r7, #14]
 800194c:	78f9      	ldrb	r1, [r7, #3]
 800194e:	fb03 f101 	mul.w	r1, r3, r1
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	440b      	add	r3, r1
 8001956:	4619      	mov	r1, r3
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	440b      	add	r3, r1
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001964:	f1c3 0308 	rsb	r3, r3, #8
 8001968:	fa41 f303 	asr.w	r3, r1, r3
 800196c:	b25b      	sxtb	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b258      	sxtb	r0, r3
 8001972:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001976:	7bbb      	ldrb	r3, [r7, #14]
 8001978:	4413      	add	r3, r2
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	440b      	add	r3, r1
 8001984:	b2c0      	uxtb	r0, r0
 8001986:	4910      	ldr	r1, [pc, #64]	; (80019c8 <OLED_ShowImage+0x1c4>)
 8001988:	01d2      	lsls	r2, r2, #7
 800198a:	440a      	add	r2, r1
 800198c:	4413      	add	r3, r2
 800198e:	4602      	mov	r2, r0
 8001990:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < Width; i ++)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3301      	adds	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	429a      	cmp	r2, r3
 800199e:	f4ff af52 	bcc.w	8001846 <OLED_ShowImage+0x42>
	for (j = 0; j < (Height - 1) / 8 + 1; j ++)
 80019a2:	7bbb      	ldrb	r3, [r7, #14]
 80019a4:	3301      	adds	r3, #1
 80019a6:	73bb      	strb	r3, [r7, #14]
 80019a8:	78bb      	ldrb	r3, [r7, #2]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	da00      	bge.n	80019b2 <OLED_ShowImage+0x1ae>
 80019b0:	3307      	adds	r3, #7
 80019b2:	10db      	asrs	r3, r3, #3
 80019b4:	461a      	mov	r2, r3
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f6bf af41 	bge.w	8001840 <OLED_ShowImage+0x3c>
				}
			}
		}
	}
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	20000220 	.word	0x20000220

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_Init+0x40>)
 80019d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_Init+0x40>)
 80019e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_Init+0x40>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f8fc 	bl	8001bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff f93c 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a00:	f7ff f912 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023c00 	.word	0x40023c00

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	2000000c 	.word	0x2000000c
 8001a34:	20000620 	.word	0x20000620

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000620 	.word	0x20000620

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000000c 	.word	0x2000000c

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db0b      	blt.n	8001b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4907      	ldr	r1, [pc, #28]	; (8001b34 <__NVIC_EnableIRQ+0x38>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff4c 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1a:	f7ff ff61 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	6978      	ldr	r0, [r7, #20]
 8001c26:	f7ff ffb1 	bl	8001b8c <NVIC_EncodePriority>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff80 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c38:	bf00      	nop
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff54 	bl	8001afc <__NVIC_EnableIRQ>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e16b      	b.n	8001f50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 815a 	bne.w	8001f4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d005      	beq.n	8001cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d130      	bne.n	8001d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0201 	and.w	r2, r3, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d017      	beq.n	8001d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d123      	bne.n	8001da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	08da      	lsrs	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3208      	adds	r2, #8
 8001d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	69b9      	ldr	r1, [r7, #24]
 8001d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80b4 	beq.w	8001f4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b60      	ldr	r3, [pc, #384]	; (8001f68 <HAL_GPIO_Init+0x30c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a5f      	ldr	r2, [pc, #380]	; (8001f68 <HAL_GPIO_Init+0x30c>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b5d      	ldr	r3, [pc, #372]	; (8001f68 <HAL_GPIO_Init+0x30c>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfe:	4a5b      	ldr	r2, [pc, #364]	; (8001f6c <HAL_GPIO_Init+0x310>)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a52      	ldr	r2, [pc, #328]	; (8001f70 <HAL_GPIO_Init+0x314>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d02b      	beq.n	8001e82 <HAL_GPIO_Init+0x226>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a51      	ldr	r2, [pc, #324]	; (8001f74 <HAL_GPIO_Init+0x318>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d025      	beq.n	8001e7e <HAL_GPIO_Init+0x222>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a50      	ldr	r2, [pc, #320]	; (8001f78 <HAL_GPIO_Init+0x31c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01f      	beq.n	8001e7a <HAL_GPIO_Init+0x21e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4f      	ldr	r2, [pc, #316]	; (8001f7c <HAL_GPIO_Init+0x320>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d019      	beq.n	8001e76 <HAL_GPIO_Init+0x21a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4e      	ldr	r2, [pc, #312]	; (8001f80 <HAL_GPIO_Init+0x324>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_GPIO_Init+0x216>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4d      	ldr	r2, [pc, #308]	; (8001f84 <HAL_GPIO_Init+0x328>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00d      	beq.n	8001e6e <HAL_GPIO_Init+0x212>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4c      	ldr	r2, [pc, #304]	; (8001f88 <HAL_GPIO_Init+0x32c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <HAL_GPIO_Init+0x20e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <HAL_GPIO_Init+0x330>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_GPIO_Init+0x20a>
 8001e62:	2307      	movs	r3, #7
 8001e64:	e00e      	b.n	8001e84 <HAL_GPIO_Init+0x228>
 8001e66:	2308      	movs	r3, #8
 8001e68:	e00c      	b.n	8001e84 <HAL_GPIO_Init+0x228>
 8001e6a:	2306      	movs	r3, #6
 8001e6c:	e00a      	b.n	8001e84 <HAL_GPIO_Init+0x228>
 8001e6e:	2305      	movs	r3, #5
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x228>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x228>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x228>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x228>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x228>
 8001e82:	2300      	movs	r3, #0
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e94:	4935      	ldr	r1, [pc, #212]	; (8001f6c <HAL_GPIO_Init+0x310>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec6:	4a32      	ldr	r2, [pc, #200]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ecc:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef0:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f1a:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f44:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	f67f ae90 	bls.w	8001c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40021400 	.word	0x40021400
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40021c00 	.word	0x40021c00
 8001f90:	40013c00 	.word	0x40013c00

08001f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e001      	b.n	8001fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe0:	e003      	b.n	8001fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e12b      	b.n	8002262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fc32 	bl	8000888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800204a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800205a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800205c:	f001 f898 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8002060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a81      	ldr	r2, [pc, #516]	; (800226c <HAL_I2C_Init+0x274>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d807      	bhi.n	800207c <HAL_I2C_Init+0x84>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a80      	ldr	r2, [pc, #512]	; (8002270 <HAL_I2C_Init+0x278>)
 8002070:	4293      	cmp	r3, r2
 8002072:	bf94      	ite	ls
 8002074:	2301      	movls	r3, #1
 8002076:	2300      	movhi	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e006      	b.n	800208a <HAL_I2C_Init+0x92>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a7d      	ldr	r2, [pc, #500]	; (8002274 <HAL_I2C_Init+0x27c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	bf94      	ite	ls
 8002084:	2301      	movls	r3, #1
 8002086:	2300      	movhi	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0e7      	b.n	8002262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4a78      	ldr	r2, [pc, #480]	; (8002278 <HAL_I2C_Init+0x280>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0c9b      	lsrs	r3, r3, #18
 800209c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a6a      	ldr	r2, [pc, #424]	; (800226c <HAL_I2C_Init+0x274>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d802      	bhi.n	80020cc <HAL_I2C_Init+0xd4>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	3301      	adds	r3, #1
 80020ca:	e009      	b.n	80020e0 <HAL_I2C_Init+0xe8>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	4a69      	ldr	r2, [pc, #420]	; (800227c <HAL_I2C_Init+0x284>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	3301      	adds	r3, #1
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	495c      	ldr	r1, [pc, #368]	; (800226c <HAL_I2C_Init+0x274>)
 80020fc:	428b      	cmp	r3, r1
 80020fe:	d819      	bhi.n	8002134 <HAL_I2C_Init+0x13c>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e59      	subs	r1, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fbb1 f3f3 	udiv	r3, r1, r3
 800210e:	1c59      	adds	r1, r3, #1
 8002110:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002114:	400b      	ands	r3, r1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_I2C_Init+0x138>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e59      	subs	r1, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fbb1 f3f3 	udiv	r3, r1, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212e:	e051      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 8002130:	2304      	movs	r3, #4
 8002132:	e04f      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d111      	bne.n	8002160 <HAL_I2C_Init+0x168>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1e58      	subs	r0, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	e012      	b.n	8002186 <HAL_I2C_Init+0x18e>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e58      	subs	r0, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	0099      	lsls	r1, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	fbb0 f3f3 	udiv	r3, r0, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Init+0x196>
 800218a:	2301      	movs	r3, #1
 800218c:	e022      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10e      	bne.n	80021b4 <HAL_I2C_Init+0x1bc>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1e58      	subs	r0, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	440b      	add	r3, r1
 80021a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b2:	e00f      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1e58      	subs	r0, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	0099      	lsls	r1, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	6809      	ldr	r1, [r1, #0]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6911      	ldr	r1, [r2, #16]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68d2      	ldr	r2, [r2, #12]
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	430b      	orrs	r3, r1
 8002216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	000186a0 	.word	0x000186a0
 8002270:	001e847f 	.word	0x001e847f
 8002274:	003d08ff 	.word	0x003d08ff
 8002278:	431bde83 	.word	0x431bde83
 800227c:	10624dd3 	.word	0x10624dd3

08002280 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	461a      	mov	r2, r3
 800228e:	4603      	mov	r3, r0
 8002290:	817b      	strh	r3, [r7, #10]
 8002292:	460b      	mov	r3, r1
 8002294:	813b      	strh	r3, [r7, #8]
 8002296:	4613      	mov	r3, r2
 8002298:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800229a:	f7ff fbcd 	bl	8001a38 <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	f040 80d9 	bne.w	8002460 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2319      	movs	r3, #25
 80022b4:	2201      	movs	r2, #1
 80022b6:	496d      	ldr	r1, [pc, #436]	; (800246c <HAL_I2C_Mem_Write+0x1ec>)
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f971 	bl	80025a0 <I2C_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
 80022c6:	e0cc      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_I2C_Mem_Write+0x56>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e0c5      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d007      	beq.n	80022fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2221      	movs	r2, #33	; 0x21
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2240      	movs	r2, #64	; 0x40
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a3a      	ldr	r2, [r7, #32]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800232c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a4d      	ldr	r2, [pc, #308]	; (8002470 <HAL_I2C_Mem_Write+0x1f0>)
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800233e:	88f8      	ldrh	r0, [r7, #6]
 8002340:	893a      	ldrh	r2, [r7, #8]
 8002342:	8979      	ldrh	r1, [r7, #10]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4603      	mov	r3, r0
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f890 	bl	8002474 <I2C_RequestMemoryWrite>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d052      	beq.n	8002400 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e081      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f9f2 	bl	800274c <I2C_WaitOnTXEFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00d      	beq.n	800238a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2b04      	cmp	r3, #4
 8002374:	d107      	bne.n	8002386 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06b      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d11b      	bne.n	8002400 <HAL_I2C_Mem_Write+0x180>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d017      	beq.n	8002400 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1aa      	bne.n	800235e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f9de 	bl	80027ce <I2C_WaitOnBTFFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00d      	beq.n	8002434 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2b04      	cmp	r3, #4
 800241e:	d107      	bne.n	8002430 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e016      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	00100002 	.word	0x00100002
 8002470:	ffff0000 	.word	0xffff0000

08002474 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4603      	mov	r3, r0
 8002484:	817b      	strh	r3, [r7, #10]
 8002486:	460b      	mov	r3, r1
 8002488:	813b      	strh	r3, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800249c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f878 	bl	80025a0 <I2C_WaitOnFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00d      	beq.n	80024d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c4:	d103      	bne.n	80024ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e05f      	b.n	8002592 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024d2:	897b      	ldrh	r3, [r7, #10]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	6a3a      	ldr	r2, [r7, #32]
 80024e6:	492d      	ldr	r1, [pc, #180]	; (800259c <I2C_RequestMemoryWrite+0x128>)
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 f8b0 	bl	800264e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e04c      	b.n	8002592 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800250e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002510:	6a39      	ldr	r1, [r7, #32]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f91a 	bl	800274c <I2C_WaitOnTXEFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00d      	beq.n	800253a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	2b04      	cmp	r3, #4
 8002524:	d107      	bne.n	8002536 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002534:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e02b      	b.n	8002592 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d105      	bne.n	800254c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002540:	893b      	ldrh	r3, [r7, #8]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	611a      	str	r2, [r3, #16]
 800254a:	e021      	b.n	8002590 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800254c:	893b      	ldrh	r3, [r7, #8]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	b29b      	uxth	r3, r3
 8002552:	b2da      	uxtb	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	6a39      	ldr	r1, [r7, #32]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f8f4 	bl	800274c <I2C_WaitOnTXEFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00d      	beq.n	8002586 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	2b04      	cmp	r3, #4
 8002570:	d107      	bne.n	8002582 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002580:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e005      	b.n	8002592 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002586:	893b      	ldrh	r3, [r7, #8]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	00010002 	.word	0x00010002

080025a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b0:	e025      	b.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d021      	beq.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ba:	f7ff fa3d 	bl	8001a38 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d302      	bcc.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d116      	bne.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e023      	b.n	8002646 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10d      	bne.n	8002624 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4013      	ands	r3, r2
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	e00c      	b.n	800263e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4013      	ands	r3, r2
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf0c      	ite	eq
 8002636:	2301      	moveq	r3, #1
 8002638:	2300      	movne	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	429a      	cmp	r2, r3
 8002642:	d0b6      	beq.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800265c:	e051      	b.n	8002702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266c:	d123      	bne.n	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002686:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0204 	orr.w	r2, r3, #4
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e046      	b.n	8002744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d021      	beq.n	8002702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026be:	f7ff f9bb 	bl	8001a38 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d116      	bne.n	8002702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f043 0220 	orr.w	r2, r3, #32
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e020      	b.n	8002744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d10c      	bne.n	8002726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4013      	ands	r3, r2
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf14      	ite	ne
 800271e:	2301      	movne	r3, #1
 8002720:	2300      	moveq	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	e00b      	b.n	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	43da      	mvns	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4013      	ands	r3, r2
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d18d      	bne.n	800265e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002758:	e02d      	b.n	80027b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f878 	bl	8002850 <I2C_IsAcknowledgeFailed>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e02d      	b.n	80027c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d021      	beq.n	80027b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7ff f961 	bl	8001a38 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d116      	bne.n	80027b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e007      	b.n	80027c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d1ca      	bne.n	800275a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027da:	e02d      	b.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f837 	bl	8002850 <I2C_IsAcknowledgeFailed>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e02d      	b.n	8002848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d021      	beq.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f4:	f7ff f920 	bl	8001a38 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	429a      	cmp	r2, r3
 8002802:	d302      	bcc.n	800280a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d116      	bne.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e007      	b.n	8002848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d1ca      	bne.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002866:	d11b      	bne.n	80028a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002870:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f043 0204 	orr.w	r2, r3, #4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e267      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d075      	beq.n	80029ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ce:	4b88      	ldr	r3, [pc, #544]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d00c      	beq.n	80028f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028da:	4b85      	ldr	r3, [pc, #532]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d112      	bne.n	800290c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e6:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f2:	d10b      	bne.n	800290c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	4b7e      	ldr	r3, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d05b      	beq.n	80029b8 <HAL_RCC_OscConfig+0x108>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d157      	bne.n	80029b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e242      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002914:	d106      	bne.n	8002924 <HAL_RCC_OscConfig+0x74>
 8002916:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a75      	ldr	r2, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e01d      	b.n	8002960 <HAL_RCC_OscConfig+0xb0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x98>
 800292e:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6f      	ldr	r2, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b6d      	ldr	r3, [pc, #436]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a6c      	ldr	r2, [pc, #432]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0xb0>
 8002948:	4b69      	ldr	r3, [pc, #420]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a68      	ldr	r2, [pc, #416]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 800294e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a65      	ldr	r2, [pc, #404]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 800295a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d013      	beq.n	8002990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7ff f866 	bl	8001a38 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002970:	f7ff f862 	bl	8001a38 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e207      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0xc0>
 800298e:	e014      	b.n	80029ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7ff f852 	bl	8001a38 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002998:	f7ff f84e 	bl	8001a38 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e1f3      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0xe8>
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d063      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d11c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029de:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d116      	bne.n	8002a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_RCC_OscConfig+0x152>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e1c7      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4937      	ldr	r1, [pc, #220]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	e03a      	b.n	8002a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d020      	beq.n	8002a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a20:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <HAL_RCC_OscConfig+0x244>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7ff f807 	bl	8001a38 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7ff f803 	bl	8001a38 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e1a8      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4925      	ldr	r1, [pc, #148]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a62:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCC_OscConfig+0x244>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7fe ffe6 	bl	8001a38 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a70:	f7fe ffe2 	bl	8001a38 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e187      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d036      	beq.n	8002b08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_RCC_OscConfig+0x248>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe ffc6 	bl	8001a38 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7fe ffc2 	bl	8001a38 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e167      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x200>
 8002ace:	e01b      	b.n	8002b08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_OscConfig+0x248>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe ffaf 	bl	8001a38 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	e00e      	b.n	8002afc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ade:	f7fe ffab 	bl	8001a38 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d907      	bls.n	8002afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e150      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
 8002af0:	40023800 	.word	0x40023800
 8002af4:	42470000 	.word	0x42470000
 8002af8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	4b88      	ldr	r3, [pc, #544]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ea      	bne.n	8002ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8097 	beq.w	8002c44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1a:	4b81      	ldr	r3, [pc, #516]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	4b7d      	ldr	r3, [pc, #500]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a7c      	ldr	r2, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b7a      	ldr	r3, [pc, #488]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b42:	2301      	movs	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <HAL_RCC_OscConfig+0x474>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d118      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b52:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <HAL_RCC_OscConfig+0x474>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a73      	ldr	r2, [pc, #460]	; (8002d24 <HAL_RCC_OscConfig+0x474>)
 8002b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe ff6b 	bl	8001a38 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b66:	f7fe ff67 	bl	8001a38 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e10c      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <HAL_RCC_OscConfig+0x474>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x2ea>
 8002b8c:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
 8002b98:	e01c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x324>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x30c>
 8002ba2:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	4a5e      	ldr	r2, [pc, #376]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	6713      	str	r3, [r2, #112]	; 0x70
 8002bae:	4b5c      	ldr	r3, [pc, #368]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a5b      	ldr	r2, [pc, #364]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x324>
 8002bbc:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a57      	ldr	r2, [pc, #348]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	4b55      	ldr	r3, [pc, #340]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a54      	ldr	r2, [pc, #336]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bce:	f023 0304 	bic.w	r3, r3, #4
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d015      	beq.n	8002c08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fe ff2c 	bl	8001a38 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fe ff28 	bl	8001a38 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e0cb      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfa:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0ee      	beq.n	8002be4 <HAL_RCC_OscConfig+0x334>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c08:	f7fe ff16 	bl	8001a38 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe ff12 	bl	8001a38 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0b5      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c26:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ee      	bne.n	8002c10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4a38      	ldr	r2, [pc, #224]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80a1 	beq.w	8002d90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c4e:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d05c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d141      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <HAL_RCC_OscConfig+0x478>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fee6 	bl	8001a38 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fee2 	bl	8001a38 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e087      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	061b      	lsls	r3, r3, #24
 8002cb2:	491b      	ldr	r1, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x478>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fe febb 	bl	8001a38 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe feb7 	bl	8001a38 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e05c      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x416>
 8002ce4:	e054      	b.n	8002d90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_OscConfig+0x478>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe fea4 	bl	8001a38 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fea0 	bl	8001a38 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e045      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x444>
 8002d12:	e03d      	b.n	8002d90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e038      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x4ec>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d028      	beq.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d121      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d11a      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d111      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	3b01      	subs	r3, #1
 8002d76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800

08002da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0cc      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d90c      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	494d      	ldr	r1, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d044      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d119      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e06f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e067      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4934      	ldr	r1, [pc, #208]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e90:	f7fe fdd2 	bl	8001a38 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fdce 	bl	8001a38 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e04f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d20c      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f26:	f000 f821 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fe96 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023c00 	.word	0x40023c00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08008668 	.word	0x08008668
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000008 	.word	0x20000008

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f70:	b094      	sub	sp, #80	; 0x50
 8002f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	647b      	str	r3, [r7, #68]	; 0x44
 8002f78:	2300      	movs	r3, #0
 8002f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f84:	4b79      	ldr	r3, [pc, #484]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d00d      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x40>
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	f200 80e1 	bhi.w	8003158 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f9e:	e0db      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b73      	ldr	r3, [pc, #460]	; (8003170 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fa4:	e0db      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002faa:	e0d8      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fac:	4b6f      	ldr	r3, [pc, #444]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc2:	4b6a      	ldr	r3, [pc, #424]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	2200      	movs	r2, #0
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fde:	4622      	mov	r2, r4
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	f04f 0000 	mov.w	r0, #0
 8002fe6:	f04f 0100 	mov.w	r1, #0
 8002fea:	0159      	lsls	r1, r3, #5
 8002fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff0:	0150      	lsls	r0, r2, #5
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	1a51      	subs	r1, r2, r1
 8002ffa:	6139      	str	r1, [r7, #16]
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003010:	4659      	mov	r1, fp
 8003012:	018b      	lsls	r3, r1, #6
 8003014:	4651      	mov	r1, sl
 8003016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800301a:	4651      	mov	r1, sl
 800301c:	018a      	lsls	r2, r1, #6
 800301e:	4651      	mov	r1, sl
 8003020:	ebb2 0801 	subs.w	r8, r2, r1
 8003024:	4659      	mov	r1, fp
 8003026:	eb63 0901 	sbc.w	r9, r3, r1
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800303a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800303e:	4690      	mov	r8, r2
 8003040:	4699      	mov	r9, r3
 8003042:	4623      	mov	r3, r4
 8003044:	eb18 0303 	adds.w	r3, r8, r3
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	462b      	mov	r3, r5
 800304c:	eb49 0303 	adc.w	r3, r9, r3
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800305e:	4629      	mov	r1, r5
 8003060:	024b      	lsls	r3, r1, #9
 8003062:	4621      	mov	r1, r4
 8003064:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003068:	4621      	mov	r1, r4
 800306a:	024a      	lsls	r2, r1, #9
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003072:	2200      	movs	r2, #0
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
 8003076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003078:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800307c:	f7fd f910 	bl	80002a0 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4613      	mov	r3, r2
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003088:	e058      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b38      	ldr	r3, [pc, #224]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	2200      	movs	r2, #0
 8003092:	4618      	mov	r0, r3
 8003094:	4611      	mov	r1, r2
 8003096:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	2300      	movs	r3, #0
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
 80030a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030a4:	4642      	mov	r2, r8
 80030a6:	464b      	mov	r3, r9
 80030a8:	f04f 0000 	mov.w	r0, #0
 80030ac:	f04f 0100 	mov.w	r1, #0
 80030b0:	0159      	lsls	r1, r3, #5
 80030b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b6:	0150      	lsls	r0, r2, #5
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4641      	mov	r1, r8
 80030be:	ebb2 0a01 	subs.w	sl, r2, r1
 80030c2:	4649      	mov	r1, r9
 80030c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030dc:	ebb2 040a 	subs.w	r4, r2, sl
 80030e0:	eb63 050b 	sbc.w	r5, r3, fp
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	00eb      	lsls	r3, r5, #3
 80030ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f2:	00e2      	lsls	r2, r4, #3
 80030f4:	4614      	mov	r4, r2
 80030f6:	461d      	mov	r5, r3
 80030f8:	4643      	mov	r3, r8
 80030fa:	18e3      	adds	r3, r4, r3
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	464b      	mov	r3, r9
 8003100:	eb45 0303 	adc.w	r3, r5, r3
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003112:	4629      	mov	r1, r5
 8003114:	028b      	lsls	r3, r1, #10
 8003116:	4621      	mov	r1, r4
 8003118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800311c:	4621      	mov	r1, r4
 800311e:	028a      	lsls	r2, r1, #10
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003126:	2200      	movs	r2, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	61fa      	str	r2, [r7, #28]
 800312c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003130:	f7fd f8b6 	bl	80002a0 <__aeabi_uldivmod>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4613      	mov	r3, r2
 800313a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	3301      	adds	r3, #1
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800314c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800314e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003156:	e002      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetSysClockFreq+0x204>)
 800315a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800315c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800315e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003160:	4618      	mov	r0, r3
 8003162:	3750      	adds	r7, #80	; 0x50
 8003164:	46bd      	mov	sp, r7
 8003166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800
 8003170:	00f42400 	.word	0x00f42400
 8003174:	007a1200 	.word	0x007a1200

08003178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCC_GetHCLKFreq+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000000 	.word	0x20000000

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003194:	f7ff fff0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0a9b      	lsrs	r3, r3, #10
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4903      	ldr	r1, [pc, #12]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08008678 	.word	0x08008678

080031b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031bc:	f7ff ffdc 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0b5b      	lsrs	r3, r3, #13
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	; (80031dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	08008678 	.word	0x08008678

080031e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	220f      	movs	r2, #15
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_RCC_GetClockConfig+0x5c>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0203 	and.w	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_RCC_GetClockConfig+0x5c>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <HAL_RCC_GetClockConfig+0x5c>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_GetClockConfig+0x5c>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	08db      	lsrs	r3, r3, #3
 800321a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <HAL_RCC_GetClockConfig+0x60>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0207 	and.w	r2, r3, #7
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	601a      	str	r2, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40023c00 	.word	0x40023c00

08003244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e041      	b.n	80032da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f839 	bl	80032e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3304      	adds	r3, #4
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f000 f9d8 	bl	8003638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d001      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e04e      	b.n	80033ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <HAL_TIM_Base_Start_IT+0xc4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d022      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x80>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333a:	d01d      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x80>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1f      	ldr	r2, [pc, #124]	; (80033c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d018      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x80>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x80>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00e      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x80>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d009      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x80>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x80>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d111      	bne.n	800339c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b06      	cmp	r3, #6
 8003388:	d010      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339a:	e007      	b.n	80033ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40010400 	.word	0x40010400
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40001800 	.word	0x40001800

080033d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d122      	bne.n	8003434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d11b      	bne.n	8003434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0202 	mvn.w	r2, #2
 8003404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8ee 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8e0 	bl	80035e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8f1 	bl	8003610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b04      	cmp	r3, #4
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b04      	cmp	r3, #4
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0204 	mvn.w	r2, #4
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8c4 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8b6 	bl	80035e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f8c7 	bl	8003610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b08      	cmp	r3, #8
 8003494:	d122      	bne.n	80034dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d11b      	bne.n	80034dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0208 	mvn.w	r2, #8
 80034ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2204      	movs	r2, #4
 80034b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f89a 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 80034c8:	e005      	b.n	80034d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f88c 	bl	80035e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f89d 	bl	8003610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d122      	bne.n	8003530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d11b      	bne.n	8003530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0210 	mvn.w	r2, #16
 8003500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2208      	movs	r2, #8
 8003506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f870 	bl	80035fc <HAL_TIM_IC_CaptureCallback>
 800351c:	e005      	b.n	800352a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f862 	bl	80035e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f873 	bl	8003610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10e      	bne.n	800355c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d107      	bne.n	800355c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0201 	mvn.w	r2, #1
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd fb4e 	bl	8000bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b80      	cmp	r3, #128	; 0x80
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d107      	bne.n	8003588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f902 	bl	800378c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b40      	cmp	r3, #64	; 0x40
 8003594:	d10e      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f838 	bl	8003624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d10e      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d107      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0220 	mvn.w	r2, #32
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8cc 	bl	8003778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a40      	ldr	r2, [pc, #256]	; (800374c <TIM_Base_SetConfig+0x114>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003656:	d00f      	beq.n	8003678 <TIM_Base_SetConfig+0x40>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3d      	ldr	r2, [pc, #244]	; (8003750 <TIM_Base_SetConfig+0x118>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00b      	beq.n	8003678 <TIM_Base_SetConfig+0x40>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a3c      	ldr	r2, [pc, #240]	; (8003754 <TIM_Base_SetConfig+0x11c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a3b      	ldr	r2, [pc, #236]	; (8003758 <TIM_Base_SetConfig+0x120>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_Base_SetConfig+0x40>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a3a      	ldr	r2, [pc, #232]	; (800375c <TIM_Base_SetConfig+0x124>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d108      	bne.n	800368a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a2f      	ldr	r2, [pc, #188]	; (800374c <TIM_Base_SetConfig+0x114>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02b      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003698:	d027      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <TIM_Base_SetConfig+0x118>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d023      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a2b      	ldr	r2, [pc, #172]	; (8003754 <TIM_Base_SetConfig+0x11c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01f      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <TIM_Base_SetConfig+0x120>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01b      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a29      	ldr	r2, [pc, #164]	; (800375c <TIM_Base_SetConfig+0x124>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d017      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a28      	ldr	r2, [pc, #160]	; (8003760 <TIM_Base_SetConfig+0x128>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a27      	ldr	r2, [pc, #156]	; (8003764 <TIM_Base_SetConfig+0x12c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00f      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a26      	ldr	r2, [pc, #152]	; (8003768 <TIM_Base_SetConfig+0x130>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00b      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a25      	ldr	r2, [pc, #148]	; (800376c <TIM_Base_SetConfig+0x134>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a24      	ldr	r2, [pc, #144]	; (8003770 <TIM_Base_SetConfig+0x138>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a23      	ldr	r2, [pc, #140]	; (8003774 <TIM_Base_SetConfig+0x13c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d108      	bne.n	80036fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <TIM_Base_SetConfig+0x114>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <TIM_Base_SetConfig+0xf8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a0c      	ldr	r2, [pc, #48]	; (800375c <TIM_Base_SetConfig+0x124>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d103      	bne.n	8003738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	615a      	str	r2, [r3, #20]
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40010000 	.word	0x40010000
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800
 8003758:	40000c00 	.word	0x40000c00
 800375c:	40010400 	.word	0x40010400
 8003760:	40014000 	.word	0x40014000
 8003764:	40014400 	.word	0x40014400
 8003768:	40014800 	.word	0x40014800
 800376c:	40001800 	.word	0x40001800
 8003770:	40001c00 	.word	0x40001c00
 8003774:	40002000 	.word	0x40002000

08003778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e03f      	b.n	8003832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fbd2 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f929 	bl	8003a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b08a      	sub	sp, #40	; 0x28
 800383e:	af02      	add	r7, sp, #8
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b20      	cmp	r3, #32
 8003858:	d17c      	bne.n	8003954 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_UART_Transmit+0x2c>
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e075      	b.n	8003956 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_UART_Transmit+0x3e>
 8003874:	2302      	movs	r3, #2
 8003876:	e06e      	b.n	8003956 <HAL_UART_Transmit+0x11c>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2221      	movs	r2, #33	; 0x21
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388e:	f7fe f8d3 	bl	8001a38 <HAL_GetTick>
 8003892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d108      	bne.n	80038bc <HAL_UART_Transmit+0x82>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	e003      	b.n	80038c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038cc:	e02a      	b.n	8003924 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2180      	movs	r1, #128	; 0x80
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f840 	bl	800395e <UART_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e036      	b.n	8003956 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	3302      	adds	r3, #2
 8003902:	61bb      	str	r3, [r7, #24]
 8003904:	e007      	b.n	8003916 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1cf      	bne.n	80038ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2200      	movs	r2, #0
 8003936:	2140      	movs	r1, #64	; 0x40
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f810 	bl	800395e <UART_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e006      	b.n	8003956 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b090      	sub	sp, #64	; 0x40
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396e:	e050      	b.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d04c      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <UART_WaitOnFlagUntilTimeout+0x30>
 800397e:	f7fe f85b 	bl	8001a38 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800398a:	429a      	cmp	r2, r3
 800398c:	d241      	bcs.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ae:	637a      	str	r2, [r7, #52]	; 0x34
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e5      	bne.n	800398e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3314      	adds	r3, #20
 80039c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	613b      	str	r3, [r7, #16]
   return(result);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3314      	adds	r3, #20
 80039e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039e2:	623a      	str	r2, [r7, #32]
 80039e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	69f9      	ldr	r1, [r7, #28]
 80039e8:	6a3a      	ldr	r2, [r7, #32]
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e5      	bne.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e00f      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	bf0c      	ite	eq
 8003a22:	2301      	moveq	r3, #1
 8003a24:	2300      	movne	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d09f      	beq.n	8003970 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3740      	adds	r7, #64	; 0x40
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a40:	b0c0      	sub	sp, #256	; 0x100
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	68d9      	ldr	r1, [r3, #12]
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	ea40 0301 	orr.w	r3, r0, r1
 8003a64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a94:	f021 010c 	bic.w	r1, r1, #12
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab6:	6999      	ldr	r1, [r3, #24]
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	ea40 0301 	orr.w	r3, r0, r1
 8003ac2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4b8f      	ldr	r3, [pc, #572]	; (8003d08 <UART_SetConfig+0x2cc>)
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d005      	beq.n	8003adc <UART_SetConfig+0xa0>
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b8d      	ldr	r3, [pc, #564]	; (8003d0c <UART_SetConfig+0x2d0>)
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d104      	bne.n	8003ae6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003adc:	f7ff fb6c 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 8003ae0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ae4:	e003      	b.n	8003aee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ae6:	f7ff fb53 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8003aea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af8:	f040 810c 	bne.w	8003d14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b00:	2200      	movs	r2, #0
 8003b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b0e:	4622      	mov	r2, r4
 8003b10:	462b      	mov	r3, r5
 8003b12:	1891      	adds	r1, r2, r2
 8003b14:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b16:	415b      	adcs	r3, r3
 8003b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b1e:	4621      	mov	r1, r4
 8003b20:	eb12 0801 	adds.w	r8, r2, r1
 8003b24:	4629      	mov	r1, r5
 8003b26:	eb43 0901 	adc.w	r9, r3, r1
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b3e:	4690      	mov	r8, r2
 8003b40:	4699      	mov	r9, r3
 8003b42:	4623      	mov	r3, r4
 8003b44:	eb18 0303 	adds.w	r3, r8, r3
 8003b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b4c:	462b      	mov	r3, r5
 8003b4e:	eb49 0303 	adc.w	r3, r9, r3
 8003b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	18db      	adds	r3, r3, r3
 8003b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b70:	4613      	mov	r3, r2
 8003b72:	eb42 0303 	adc.w	r3, r2, r3
 8003b76:	657b      	str	r3, [r7, #84]	; 0x54
 8003b78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b80:	f7fc fb8e 	bl	80002a0 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4b61      	ldr	r3, [pc, #388]	; (8003d10 <UART_SetConfig+0x2d4>)
 8003b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	011c      	lsls	r4, r3, #4
 8003b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ba0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	1891      	adds	r1, r2, r2
 8003baa:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bac:	415b      	adcs	r3, r3
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	eb12 0a01 	adds.w	sl, r2, r1
 8003bba:	4649      	mov	r1, r9
 8003bbc:	eb43 0b01 	adc.w	fp, r3, r1
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd4:	4692      	mov	sl, r2
 8003bd6:	469b      	mov	fp, r3
 8003bd8:	4643      	mov	r3, r8
 8003bda:	eb1a 0303 	adds.w	r3, sl, r3
 8003bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003be2:	464b      	mov	r3, r9
 8003be4:	eb4b 0303 	adc.w	r3, fp, r3
 8003be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c00:	460b      	mov	r3, r1
 8003c02:	18db      	adds	r3, r3, r3
 8003c04:	643b      	str	r3, [r7, #64]	; 0x40
 8003c06:	4613      	mov	r3, r2
 8003c08:	eb42 0303 	adc.w	r3, r2, r3
 8003c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c16:	f7fc fb43 	bl	80002a0 <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <UART_SetConfig+0x2d4>)
 8003c22:	fba3 2301 	umull	r2, r3, r3, r1
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	2264      	movs	r2, #100	; 0x64
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	1acb      	subs	r3, r1, r3
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c36:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <UART_SetConfig+0x2d4>)
 8003c38:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c44:	441c      	add	r4, r3
 8003c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c58:	4642      	mov	r2, r8
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	1891      	adds	r1, r2, r2
 8003c5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c60:	415b      	adcs	r3, r3
 8003c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c68:	4641      	mov	r1, r8
 8003c6a:	1851      	adds	r1, r2, r1
 8003c6c:	6339      	str	r1, [r7, #48]	; 0x30
 8003c6e:	4649      	mov	r1, r9
 8003c70:	414b      	adcs	r3, r1
 8003c72:	637b      	str	r3, [r7, #52]	; 0x34
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c80:	4659      	mov	r1, fp
 8003c82:	00cb      	lsls	r3, r1, #3
 8003c84:	4651      	mov	r1, sl
 8003c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	00ca      	lsls	r2, r1, #3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	4603      	mov	r3, r0
 8003c94:	4642      	mov	r2, r8
 8003c96:	189b      	adds	r3, r3, r2
 8003c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c9c:	464b      	mov	r3, r9
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	eb42 0303 	adc.w	r3, r2, r3
 8003ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	18db      	adds	r3, r3, r3
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	eb42 0303 	adc.w	r3, r2, r3
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cd2:	f7fc fae5 	bl	80002a0 <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <UART_SetConfig+0x2d4>)
 8003cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	2164      	movs	r1, #100	; 0x64
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	3332      	adds	r3, #50	; 0x32
 8003cee:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <UART_SetConfig+0x2d4>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	f003 0207 	and.w	r2, r3, #7
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4422      	add	r2, r4
 8003d02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d04:	e105      	b.n	8003f12 <UART_SetConfig+0x4d6>
 8003d06:	bf00      	nop
 8003d08:	40011000 	.word	0x40011000
 8003d0c:	40011400 	.word	0x40011400
 8003d10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d26:	4642      	mov	r2, r8
 8003d28:	464b      	mov	r3, r9
 8003d2a:	1891      	adds	r1, r2, r2
 8003d2c:	6239      	str	r1, [r7, #32]
 8003d2e:	415b      	adcs	r3, r3
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d36:	4641      	mov	r1, r8
 8003d38:	1854      	adds	r4, r2, r1
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	eb43 0501 	adc.w	r5, r3, r1
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	00eb      	lsls	r3, r5, #3
 8003d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4e:	00e2      	lsls	r2, r4, #3
 8003d50:	4614      	mov	r4, r2
 8003d52:	461d      	mov	r5, r3
 8003d54:	4643      	mov	r3, r8
 8003d56:	18e3      	adds	r3, r4, r3
 8003d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d5c:	464b      	mov	r3, r9
 8003d5e:	eb45 0303 	adc.w	r3, r5, r3
 8003d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d82:	4629      	mov	r1, r5
 8003d84:	008b      	lsls	r3, r1, #2
 8003d86:	4621      	mov	r1, r4
 8003d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	008a      	lsls	r2, r1, #2
 8003d90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d94:	f7fc fa84 	bl	80002a0 <__aeabi_uldivmod>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4b60      	ldr	r3, [pc, #384]	; (8003f20 <UART_SetConfig+0x4e4>)
 8003d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	011c      	lsls	r4, r3, #4
 8003da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003db0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003db4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003db8:	4642      	mov	r2, r8
 8003dba:	464b      	mov	r3, r9
 8003dbc:	1891      	adds	r1, r2, r2
 8003dbe:	61b9      	str	r1, [r7, #24]
 8003dc0:	415b      	adcs	r3, r3
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc8:	4641      	mov	r1, r8
 8003dca:	1851      	adds	r1, r2, r1
 8003dcc:	6139      	str	r1, [r7, #16]
 8003dce:	4649      	mov	r1, r9
 8003dd0:	414b      	adcs	r3, r1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de0:	4659      	mov	r1, fp
 8003de2:	00cb      	lsls	r3, r1, #3
 8003de4:	4651      	mov	r1, sl
 8003de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dea:	4651      	mov	r1, sl
 8003dec:	00ca      	lsls	r2, r1, #3
 8003dee:	4610      	mov	r0, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	4642      	mov	r2, r8
 8003df6:	189b      	adds	r3, r3, r2
 8003df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	460a      	mov	r2, r1
 8003e00:	eb42 0303 	adc.w	r3, r2, r3
 8003e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e20:	4649      	mov	r1, r9
 8003e22:	008b      	lsls	r3, r1, #2
 8003e24:	4641      	mov	r1, r8
 8003e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e2a:	4641      	mov	r1, r8
 8003e2c:	008a      	lsls	r2, r1, #2
 8003e2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e32:	f7fc fa35 	bl	80002a0 <__aeabi_uldivmod>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <UART_SetConfig+0x4e4>)
 8003e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	2164      	movs	r1, #100	; 0x64
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	3332      	adds	r3, #50	; 0x32
 8003e4e:	4a34      	ldr	r2, [pc, #208]	; (8003f20 <UART_SetConfig+0x4e4>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5a:	441c      	add	r4, r3
 8003e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e60:	2200      	movs	r2, #0
 8003e62:	673b      	str	r3, [r7, #112]	; 0x70
 8003e64:	677a      	str	r2, [r7, #116]	; 0x74
 8003e66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e6a:	4642      	mov	r2, r8
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	1891      	adds	r1, r2, r2
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	415b      	adcs	r3, r3
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	1851      	adds	r1, r2, r1
 8003e7e:	6039      	str	r1, [r7, #0]
 8003e80:	4649      	mov	r1, r9
 8003e82:	414b      	adcs	r3, r1
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e92:	4659      	mov	r1, fp
 8003e94:	00cb      	lsls	r3, r1, #3
 8003e96:	4651      	mov	r1, sl
 8003e98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9c:	4651      	mov	r1, sl
 8003e9e:	00ca      	lsls	r2, r1, #3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4642      	mov	r2, r8
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eac:	464b      	mov	r3, r9
 8003eae:	460a      	mov	r2, r1
 8003eb0:	eb42 0303 	adc.w	r3, r2, r3
 8003eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8003ec0:	667a      	str	r2, [r7, #100]	; 0x64
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ece:	4649      	mov	r1, r9
 8003ed0:	008b      	lsls	r3, r1, #2
 8003ed2:	4641      	mov	r1, r8
 8003ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed8:	4641      	mov	r1, r8
 8003eda:	008a      	lsls	r2, r1, #2
 8003edc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ee0:	f7fc f9de 	bl	80002a0 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <UART_SetConfig+0x4e4>)
 8003eea:	fba3 1302 	umull	r1, r3, r3, r2
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2164      	movs	r1, #100	; 0x64
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	3332      	adds	r3, #50	; 0x32
 8003efc:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <UART_SetConfig+0x4e4>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4422      	add	r2, r4
 8003f10:	609a      	str	r2, [r3, #8]
}
 8003f12:	bf00      	nop
 8003f14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	51eb851f 	.word	0x51eb851f

08003f24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f103 0208 	add.w	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f103 0208 	add.w	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f103 0208 	add.w	r2, r3, #8
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	601a      	str	r2, [r3, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d103      	bne.n	8003fe6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e00c      	b.n	8004000 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e002      	b.n	8003ff4 <vListInsert+0x2e>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d2f6      	bcs.n	8003fee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	601a      	str	r2, [r3, #0]
}
 800402c:	bf00      	nop
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6892      	ldr	r2, [r2, #8]
 800404e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6852      	ldr	r2, [r2, #4]
 8004058:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d103      	bne.n	800406c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	1e5a      	subs	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040b6:	f001 ffe5 	bl	8006084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040c6:	fb01 f303 	mul.w	r3, r1, r3
 80040ca:	441a      	add	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	3b01      	subs	r3, #1
 80040e8:	68f9      	ldr	r1, [r7, #12]
 80040ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	441a      	add	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	22ff      	movs	r2, #255	; 0xff
 80040fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	22ff      	movs	r2, #255	; 0xff
 8004102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d114      	bne.n	8004136 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01a      	beq.n	800414a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3310      	adds	r3, #16
 8004118:	4618      	mov	r0, r3
 800411a:	f001 f8d1 	bl	80052c0 <xTaskRemoveFromEventList>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d012      	beq.n	800414a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <xQueueGenericReset+0xcc>)
 8004126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	e009      	b.n	800414a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3310      	adds	r3, #16
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fef2 	bl	8003f24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3324      	adds	r3, #36	; 0x24
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff feed 	bl	8003f24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800414a:	f001 ffcb 	bl	80060e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800414e:	2301      	movs	r3, #1
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	613b      	str	r3, [r7, #16]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800418c:	2300      	movs	r3, #0
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	e004      	b.n	800419c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	3350      	adds	r3, #80	; 0x50
 80041a0:	4618      	mov	r0, r3
 80041a2:	f002 f891 	bl	80062c8 <pvPortMalloc>
 80041a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3350      	adds	r3, #80	; 0x50
 80041b6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041b8:	79fa      	ldrb	r2, [r7, #7]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f805 	bl	80041d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041ca:	69bb      	ldr	r3, [r7, #24]
	}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d103      	bne.n	80041f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004202:	2101      	movs	r1, #1
 8004204:	69b8      	ldr	r0, [r7, #24]
 8004206:	f7ff ff41 	bl	800408c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	78fa      	ldrb	r2, [r7, #3]
 800420e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08e      	sub	sp, #56	; 0x38
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800422a:	2300      	movs	r3, #0
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueGenericSend+0x32>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <xQueueGenericSend+0x40>
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <xQueueGenericSend+0x44>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <xQueueGenericSend+0x46>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <xQueueGenericSend+0x60>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004278:	bf00      	nop
 800427a:	e7fe      	b.n	800427a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d103      	bne.n	800428a <xQueueGenericSend+0x6e>
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <xQueueGenericSend+0x72>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <xQueueGenericSend+0x74>
 800428e:	2300      	movs	r3, #0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <xQueueGenericSend+0x8e>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	623b      	str	r3, [r7, #32]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042aa:	f001 f9a5 	bl	80055f8 <xTaskGetSchedulerState>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d102      	bne.n	80042ba <xQueueGenericSend+0x9e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <xQueueGenericSend+0xa2>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <xQueueGenericSend+0xa4>
 80042be:	2300      	movs	r3, #0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <xQueueGenericSend+0xbe>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	61fb      	str	r3, [r7, #28]
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042da:	f001 fed3 	bl	8006084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d302      	bcc.n	80042f0 <xQueueGenericSend+0xd4>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d129      	bne.n	8004344 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042f6:	f000 fa07 	bl	8004708 <prvCopyDataToQueue>
 80042fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	3324      	adds	r3, #36	; 0x24
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ffd9 	bl	80052c0 <xTaskRemoveFromEventList>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004314:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <xQueueGenericSend+0x1f8>)
 8004316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	e00a      	b.n	800433c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800432c:	4b39      	ldr	r3, [pc, #228]	; (8004414 <xQueueGenericSend+0x1f8>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800433c:	f001 fed2 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 8004340:	2301      	movs	r3, #1
 8004342:	e063      	b.n	800440c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800434a:	f001 fecb 	bl	80060e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800434e:	2300      	movs	r3, #0
 8004350:	e05c      	b.n	800440c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004358:	f107 0314 	add.w	r3, r7, #20
 800435c:	4618      	mov	r0, r3
 800435e:	f001 f811 	bl	8005384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004362:	2301      	movs	r3, #1
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004366:	f001 febd 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800436a:	f000 fd8b 	bl	8004e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800436e:	f001 fe89 	bl	8006084 <vPortEnterCritical>
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004378:	b25b      	sxtb	r3, r3
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437e:	d103      	bne.n	8004388 <xQueueGenericSend+0x16c>
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800438e:	b25b      	sxtb	r3, r3
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d103      	bne.n	800439e <xQueueGenericSend+0x182>
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800439e:	f001 fea1 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043a2:	1d3a      	adds	r2, r7, #4
 80043a4:	f107 0314 	add.w	r3, r7, #20
 80043a8:	4611      	mov	r1, r2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 f800 	bl	80053b0 <xTaskCheckForTimeOut>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d124      	bne.n	8004400 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043b8:	f000 fa9e 	bl	80048f8 <prvIsQueueFull>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d018      	beq.n	80043f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	3310      	adds	r3, #16
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 ff28 	bl	8005220 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043d2:	f000 fa29 	bl	8004828 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043d6:	f000 fd63 	bl	8004ea0 <xTaskResumeAll>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f47f af7c 	bne.w	80042da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <xQueueGenericSend+0x1f8>)
 80043e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	e772      	b.n	80042da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f6:	f000 fa17 	bl	8004828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043fa:	f000 fd51 	bl	8004ea0 <xTaskResumeAll>
 80043fe:	e76c      	b.n	80042da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004402:	f000 fa11 	bl	8004828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004406:	f000 fd4b 	bl	8004ea0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800440a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800440c:	4618      	mov	r0, r3
 800440e:	3738      	adds	r7, #56	; 0x38
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	e000ed04 	.word	0xe000ed04

08004418 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08e      	sub	sp, #56	; 0x38
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <xQueueGenericSendFromISR+0x3c>
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <xQueueGenericSendFromISR+0x40>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <xQueueGenericSendFromISR+0x42>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	623b      	str	r3, [r7, #32]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d103      	bne.n	8004482 <xQueueGenericSendFromISR+0x6a>
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <xQueueGenericSendFromISR+0x6e>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <xQueueGenericSendFromISR+0x70>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	61fb      	str	r3, [r7, #28]
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044a2:	f001 fed1 	bl	8006248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044a6:	f3ef 8211 	mrs	r2, BASEPRI
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	61ba      	str	r2, [r7, #24]
 80044bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <xQueueGenericSendFromISR+0xbc>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d12c      	bne.n	800452e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e4:	f000 f910 	bl	8004708 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d112      	bne.n	8004518 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	3324      	adds	r3, #36	; 0x24
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fede 	bl	80052c0 <xTaskRemoveFromEventList>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00e      	beq.n	8004528 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e007      	b.n	8004528 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004518:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800451c:	3301      	adds	r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	b25a      	sxtb	r2, r3
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004528:	2301      	movs	r3, #1
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800452c:	e001      	b.n	8004532 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800452e:	2300      	movs	r3, #0
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800453c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800453e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004540:	4618      	mov	r0, r3
 8004542:	3738      	adds	r7, #56	; 0x38
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08c      	sub	sp, #48	; 0x30
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004554:	2300      	movs	r3, #0
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <xQueueReceive+0x30>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	623b      	str	r3, [r7, #32]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <xQueueReceive+0x3e>
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <xQueueReceive+0x42>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <xQueueReceive+0x44>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xQueueReceive+0x5e>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	61fb      	str	r3, [r7, #28]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045a6:	f001 f827 	bl	80055f8 <xTaskGetSchedulerState>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <xQueueReceive+0x6e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <xQueueReceive+0x72>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <xQueueReceive+0x74>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <xQueueReceive+0x8e>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	61bb      	str	r3, [r7, #24]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045d6:	f001 fd55 	bl	8006084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01f      	beq.n	8004626 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ea:	f000 f8f7 	bl	80047dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	1e5a      	subs	r2, r3, #1
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00f      	beq.n	800461e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	3310      	adds	r3, #16
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fe5c 	bl	80052c0 <xTaskRemoveFromEventList>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800460e:	4b3d      	ldr	r3, [pc, #244]	; (8004704 <xQueueReceive+0x1bc>)
 8004610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800461e:	f001 fd61 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 8004622:	2301      	movs	r3, #1
 8004624:	e069      	b.n	80046fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d103      	bne.n	8004634 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800462c:	f001 fd5a 	bl	80060e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004630:	2300      	movs	r3, #0
 8004632:	e062      	b.n	80046fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800463a:	f107 0310 	add.w	r3, r7, #16
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fea0 	bl	8005384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004648:	f001 fd4c 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800464c:	f000 fc1a 	bl	8004e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004650:	f001 fd18 	bl	8006084 <vPortEnterCritical>
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800465a:	b25b      	sxtb	r3, r3
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d103      	bne.n	800466a <xQueueReceive+0x122>
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004670:	b25b      	sxtb	r3, r3
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d103      	bne.n	8004680 <xQueueReceive+0x138>
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004680:	f001 fd30 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004684:	1d3a      	adds	r2, r7, #4
 8004686:	f107 0310 	add.w	r3, r7, #16
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fe8f 	bl	80053b0 <xTaskCheckForTimeOut>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d123      	bne.n	80046e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800469a:	f000 f917 	bl	80048cc <prvIsQueueEmpty>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	3324      	adds	r3, #36	; 0x24
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fdb7 	bl	8005220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b4:	f000 f8b8 	bl	8004828 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046b8:	f000 fbf2 	bl	8004ea0 <xTaskResumeAll>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d189      	bne.n	80045d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <xQueueReceive+0x1bc>)
 80046c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	e780      	b.n	80045d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d6:	f000 f8a7 	bl	8004828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046da:	f000 fbe1 	bl	8004ea0 <xTaskResumeAll>
 80046de:	e77a      	b.n	80045d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e2:	f000 f8a1 	bl	8004828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046e6:	f000 fbdb 	bl	8004ea0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ec:	f000 f8ee 	bl	80048cc <prvIsQueueEmpty>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f43f af6f 	beq.w	80045d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3730      	adds	r7, #48	; 0x30
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d14d      	bne.n	80047ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 ff7e 	bl	8005634 <xTaskPriorityDisinherit>
 8004738:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	e043      	b.n	80047ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d119      	bne.n	800477c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6858      	ldr	r0, [r3, #4]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	461a      	mov	r2, r3
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	f002 fcf8 	bl	8007148 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	441a      	add	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	d32b      	bcc.n	80047ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	605a      	str	r2, [r3, #4]
 800477a:	e026      	b.n	80047ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	68d8      	ldr	r0, [r3, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	461a      	mov	r2, r3
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	f002 fcde 	bl	8007148 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	425b      	negs	r3, r3
 8004796:	441a      	add	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d207      	bcs.n	80047b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	425b      	negs	r3, r3
 80047b2:	441a      	add	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d105      	bne.n	80047ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047d2:	697b      	ldr	r3, [r7, #20]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d018      	beq.n	8004820 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	441a      	add	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	d303      	bcc.n	8004810 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68d9      	ldr	r1, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	461a      	mov	r2, r3
 800481a:	6838      	ldr	r0, [r7, #0]
 800481c:	f002 fc94 	bl	8007148 <memcpy>
	}
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004830:	f001 fc28 	bl	8006084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800483a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800483c:	e011      	b.n	8004862 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d012      	beq.n	800486c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3324      	adds	r3, #36	; 0x24
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fd38 	bl	80052c0 <xTaskRemoveFromEventList>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004856:	f000 fe0d 	bl	8005474 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	3b01      	subs	r3, #1
 800485e:	b2db      	uxtb	r3, r3
 8004860:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004866:	2b00      	cmp	r3, #0
 8004868:	dce9      	bgt.n	800483e <prvUnlockQueue+0x16>
 800486a:	e000      	b.n	800486e <prvUnlockQueue+0x46>
					break;
 800486c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	22ff      	movs	r2, #255	; 0xff
 8004872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004876:	f001 fc35 	bl	80060e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800487a:	f001 fc03 	bl	8006084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004884:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004886:	e011      	b.n	80048ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d012      	beq.n	80048b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3310      	adds	r3, #16
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fd13 	bl	80052c0 <xTaskRemoveFromEventList>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048a0:	f000 fde8 	bl	8005474 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048a4:	7bbb      	ldrb	r3, [r7, #14]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dce9      	bgt.n	8004888 <prvUnlockQueue+0x60>
 80048b4:	e000      	b.n	80048b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	22ff      	movs	r2, #255	; 0xff
 80048bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048c0:	f001 fc10 	bl	80060e4 <vPortExitCritical>
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048d4:	f001 fbd6 	bl	8006084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048e0:	2301      	movs	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e001      	b.n	80048ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048ea:	f001 fbfb 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 80048ee:	68fb      	ldr	r3, [r7, #12]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004900:	f001 fbc0 	bl	8006084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490c:	429a      	cmp	r2, r3
 800490e:	d102      	bne.n	8004916 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e001      	b.n	800491a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800491a:	f001 fbe3 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e014      	b.n	8004962 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004938:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <vQueueAddToRegistry+0x50>)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004944:	490c      	ldr	r1, [pc, #48]	; (8004978 <vQueueAddToRegistry+0x50>)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800494e:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <vQueueAddToRegistry+0x50>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4413      	add	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800495a:	e006      	b.n	800496a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b07      	cmp	r3, #7
 8004966:	d9e7      	bls.n	8004938 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000624 	.word	0x20000624

0800497c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800498c:	f001 fb7a 	bl	8006084 <vPortEnterCritical>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004996:	b25b      	sxtb	r3, r3
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d103      	bne.n	80049a6 <vQueueWaitForMessageRestricted+0x2a>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ac:	b25b      	sxtb	r3, r3
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b2:	d103      	bne.n	80049bc <vQueueWaitForMessageRestricted+0x40>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049bc:	f001 fb92 	bl	80060e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	3324      	adds	r3, #36	; 0x24
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fc49 	bl	8005268 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049d6:	6978      	ldr	r0, [r7, #20]
 80049d8:	f7ff ff26 	bl	8004828 <prvUnlockQueue>
	}
 80049dc:	bf00      	nop
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08c      	sub	sp, #48	; 0x30
 80049e8:	af04      	add	r7, sp, #16
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	4613      	mov	r3, r2
 80049f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 fc65 	bl	80062c8 <pvPortMalloc>
 80049fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00e      	beq.n	8004a24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a06:	2058      	movs	r0, #88	; 0x58
 8004a08:	f001 fc5e 	bl	80062c8 <pvPortMalloc>
 8004a0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
 8004a1a:	e005      	b.n	8004a28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a1c:	6978      	ldr	r0, [r7, #20]
 8004a1e:	f001 fd17 	bl	8006450 <vPortFree>
 8004a22:	e001      	b.n	8004a28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d013      	beq.n	8004a56 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	2300      	movs	r3, #0
 8004a32:	9303      	str	r3, [sp, #12]
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	9302      	str	r3, [sp, #8]
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f80e 	bl	8004a66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a4a:	69f8      	ldr	r0, [r7, #28]
 8004a4c:	f000 f89a 	bl	8004b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a50:	2301      	movs	r3, #1
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	e002      	b.n	8004a5c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a56:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b088      	sub	sp, #32
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	21a5      	movs	r1, #165	; 0xa5
 8004a80:	f002 fb70 	bl	8007164 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	f023 0307 	bic.w	r3, r3, #7
 8004a9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <prvInitialiseNewTask+0x58>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	617b      	str	r3, [r7, #20]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01f      	beq.n	8004b04 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	e012      	b.n	8004af0 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	7819      	ldrb	r1, [r3, #0]
 8004ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3334      	adds	r3, #52	; 0x34
 8004ada:	460a      	mov	r2, r1
 8004adc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d006      	beq.n	8004af8 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	3301      	adds	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b09      	cmp	r3, #9
 8004af4:	d9e9      	bls.n	8004aca <prvInitialiseNewTask+0x64>
 8004af6:	e000      	b.n	8004afa <prvInitialiseNewTask+0x94>
			{
				break;
 8004af8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b02:	e003      	b.n	8004b0c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d901      	bls.n	8004b16 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b12:	2304      	movs	r3, #4
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b20:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	2200      	movs	r2, #0
 8004b26:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fa19 	bl	8003f64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	3318      	adds	r3, #24
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fa14 	bl	8003f64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	f1c3 0205 	rsb	r2, r3, #5
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2200      	movs	r2, #0
 8004b56:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	69b8      	ldr	r0, [r7, #24]
 8004b66:	f001 f963 	bl	8005e30 <pxPortInitialiseStack>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b7c:	bf00      	nop
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b8c:	f001 fa7a 	bl	8006084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b90:	4b2c      	ldr	r3, [pc, #176]	; (8004c44 <prvAddNewTaskToReadyList+0xc0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	4a2b      	ldr	r2, [pc, #172]	; (8004c44 <prvAddNewTaskToReadyList+0xc0>)
 8004b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b9a:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <prvAddNewTaskToReadyList+0xc4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ba2:	4a29      	ldr	r2, [pc, #164]	; (8004c48 <prvAddNewTaskToReadyList+0xc4>)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ba8:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <prvAddNewTaskToReadyList+0xc0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d110      	bne.n	8004bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bb0:	f000 fc84 	bl	80054bc <prvInitialiseTaskLists>
 8004bb4:	e00d      	b.n	8004bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bb6:	4b25      	ldr	r3, [pc, #148]	; (8004c4c <prvAddNewTaskToReadyList+0xc8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bbe:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <prvAddNewTaskToReadyList+0xc4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d802      	bhi.n	8004bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bcc:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <prvAddNewTaskToReadyList+0xc4>)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bd2:	4b1f      	ldr	r3, [pc, #124]	; (8004c50 <prvAddNewTaskToReadyList+0xcc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <prvAddNewTaskToReadyList+0xcc>)
 8004bda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bdc:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <prvAddNewTaskToReadyList+0xcc>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	2201      	movs	r2, #1
 8004bea:	409a      	lsls	r2, r3
 8004bec:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <prvAddNewTaskToReadyList+0xd0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <prvAddNewTaskToReadyList+0xd0>)
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <prvAddNewTaskToReadyList+0xd4>)
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f7ff f9b6 	bl	8003f7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c12:	f001 fa67 	bl	80060e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c16:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <prvAddNewTaskToReadyList+0xc8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <prvAddNewTaskToReadyList+0xc4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d207      	bcs.n	8004c3c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <prvAddNewTaskToReadyList+0xd8>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	2000073c 	.word	0x2000073c
 8004c48:	20000664 	.word	0x20000664
 8004c4c:	20000748 	.word	0x20000748
 8004c50:	20000758 	.word	0x20000758
 8004c54:	20000744 	.word	0x20000744
 8004c58:	20000668 	.word	0x20000668
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004c68:	f001 fa0c 	bl	8006084 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <vTaskDelete+0x18>
 8004c72:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <vTaskDelete+0xf8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	e000      	b.n	8004c7a <vTaskDelete+0x1a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff f9d9 	bl	8004038 <uxListRemove>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d115      	bne.n	8004cb8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	4932      	ldr	r1, [pc, #200]	; (8004d5c <vTaskDelete+0xfc>)
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <vTaskDelete+0x58>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	43da      	mvns	r2, r3
 8004cae:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <vTaskDelete+0x100>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <vTaskDelete+0x100>)
 8004cb6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3318      	adds	r3, #24
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff f9b7 	bl	8004038 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004cca:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <vTaskDelete+0x104>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <vTaskDelete+0x104>)
 8004cd2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004cd4:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <vTaskDelete+0xf8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d10b      	bne.n	8004cf6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4820      	ldr	r0, [pc, #128]	; (8004d68 <vTaskDelete+0x108>)
 8004ce6:	f7ff f94a 	bl	8003f7e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004cea:	4b20      	ldr	r3, [pc, #128]	; (8004d6c <vTaskDelete+0x10c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	4a1e      	ldr	r2, [pc, #120]	; (8004d6c <vTaskDelete+0x10c>)
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e009      	b.n	8004d0a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <vTaskDelete+0x110>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	4a1c      	ldr	r2, [pc, #112]	; (8004d70 <vTaskDelete+0x110>)
 8004cfe:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fc49 	bl	8005598 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004d06:	f000 fc57 	bl	80055b8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8004d0a:	f001 f9eb 	bl	80060e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004d0e:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <vTaskDelete+0x114>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01b      	beq.n	8004d4e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <vTaskDelete+0xf8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d116      	bne.n	8004d4e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004d20:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <vTaskDelete+0x118>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <vTaskDelete+0xde>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	60bb      	str	r3, [r7, #8]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8004d3e:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <vTaskDelete+0x11c>)
 8004d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000664 	.word	0x20000664
 8004d5c:	20000668 	.word	0x20000668
 8004d60:	20000744 	.word	0x20000744
 8004d64:	20000758 	.word	0x20000758
 8004d68:	20000710 	.word	0x20000710
 8004d6c:	20000724 	.word	0x20000724
 8004d70:	2000073c 	.word	0x2000073c
 8004d74:	20000748 	.word	0x20000748
 8004d78:	20000764 	.word	0x20000764
 8004d7c:	e000ed04 	.word	0xe000ed04

08004d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d017      	beq.n	8004dc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d92:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <vTaskDelay+0x60>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <vTaskDelay+0x30>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	60bb      	str	r3, [r7, #8]
}
 8004dac:	bf00      	nop
 8004dae:	e7fe      	b.n	8004dae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004db0:	f000 f868 	bl	8004e84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004db4:	2100      	movs	r1, #0
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fcc2 	bl	8005740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dbc:	f000 f870 	bl	8004ea0 <xTaskResumeAll>
 8004dc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d107      	bne.n	8004dd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <vTaskDelay+0x64>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000764 	.word	0x20000764
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004dee:	4b1f      	ldr	r3, [pc, #124]	; (8004e6c <vTaskStartScheduler+0x84>)
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	2300      	movs	r3, #0
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	2300      	movs	r3, #0
 8004df8:	2282      	movs	r2, #130	; 0x82
 8004dfa:	491d      	ldr	r1, [pc, #116]	; (8004e70 <vTaskStartScheduler+0x88>)
 8004dfc:	481d      	ldr	r0, [pc, #116]	; (8004e74 <vTaskStartScheduler+0x8c>)
 8004dfe:	f7ff fdf1 	bl	80049e4 <xTaskCreate>
 8004e02:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d102      	bne.n	8004e10 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004e0a:	f000 fcff 	bl	800580c <xTimerCreateTimerTask>
 8004e0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d116      	bne.n	8004e44 <vTaskStartScheduler+0x5c>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	60bb      	str	r3, [r7, #8]
}
 8004e28:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e2a:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <vTaskStartScheduler+0x90>)
 8004e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <vTaskStartScheduler+0x94>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <vTaskStartScheduler+0x98>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e3e:	f001 f87f 	bl	8005f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e42:	e00e      	b.n	8004e62 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d10a      	bne.n	8004e62 <vTaskStartScheduler+0x7a>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	607b      	str	r3, [r7, #4]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <vTaskStartScheduler+0x78>
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000760 	.word	0x20000760
 8004e70:	08008318 	.word	0x08008318
 8004e74:	0800548d 	.word	0x0800548d
 8004e78:	2000075c 	.word	0x2000075c
 8004e7c:	20000748 	.word	0x20000748
 8004e80:	20000740 	.word	0x20000740

08004e84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e88:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <vTaskSuspendAll+0x18>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	4a03      	ldr	r2, [pc, #12]	; (8004e9c <vTaskSuspendAll+0x18>)
 8004e90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004e92:	bf00      	nop
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	20000764 	.word	0x20000764

08004ea0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eae:	4b41      	ldr	r3, [pc, #260]	; (8004fb4 <xTaskResumeAll+0x114>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <xTaskResumeAll+0x2c>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	603b      	str	r3, [r7, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ecc:	f001 f8da 	bl	8006084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ed0:	4b38      	ldr	r3, [pc, #224]	; (8004fb4 <xTaskResumeAll+0x114>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	4a37      	ldr	r2, [pc, #220]	; (8004fb4 <xTaskResumeAll+0x114>)
 8004ed8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eda:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <xTaskResumeAll+0x114>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d161      	bne.n	8004fa6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ee2:	4b35      	ldr	r3, [pc, #212]	; (8004fb8 <xTaskResumeAll+0x118>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d05d      	beq.n	8004fa6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004eea:	e02e      	b.n	8004f4a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eec:	4b33      	ldr	r3, [pc, #204]	; (8004fbc <xTaskResumeAll+0x11c>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3318      	adds	r3, #24
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff f89d 	bl	8004038 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3304      	adds	r3, #4
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff f898 	bl	8004038 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	4b2b      	ldr	r3, [pc, #172]	; (8004fc0 <xTaskResumeAll+0x120>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	4a2a      	ldr	r2, [pc, #168]	; (8004fc0 <xTaskResumeAll+0x120>)
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4a27      	ldr	r2, [pc, #156]	; (8004fc4 <xTaskResumeAll+0x124>)
 8004f28:	441a      	add	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f7ff f824 	bl	8003f7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <xTaskResumeAll+0x128>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d302      	bcc.n	8004f4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f44:	4b21      	ldr	r3, [pc, #132]	; (8004fcc <xTaskResumeAll+0x12c>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <xTaskResumeAll+0x11c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1cc      	bne.n	8004eec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f58:	f000 fb2e 	bl	80055b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f5c:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <xTaskResumeAll+0x130>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d010      	beq.n	8004f8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f68:	f000 f846 	bl	8004ff8 <xTaskIncrementTick>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f72:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <xTaskResumeAll+0x12c>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f1      	bne.n	8004f68 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004f84:	4b12      	ldr	r3, [pc, #72]	; (8004fd0 <xTaskResumeAll+0x130>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <xTaskResumeAll+0x12c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f92:	2301      	movs	r3, #1
 8004f94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f96:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <xTaskResumeAll+0x134>)
 8004f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fa6:	f001 f89d 	bl	80060e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004faa:	68bb      	ldr	r3, [r7, #8]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000764 	.word	0x20000764
 8004fb8:	2000073c 	.word	0x2000073c
 8004fbc:	200006fc 	.word	0x200006fc
 8004fc0:	20000744 	.word	0x20000744
 8004fc4:	20000668 	.word	0x20000668
 8004fc8:	20000664 	.word	0x20000664
 8004fcc:	20000750 	.word	0x20000750
 8004fd0:	2000074c 	.word	0x2000074c
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <xTaskGetTickCount+0x1c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fe4:	687b      	ldr	r3, [r7, #4]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000740 	.word	0x20000740

08004ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005002:	4b4e      	ldr	r3, [pc, #312]	; (800513c <xTaskIncrementTick+0x144>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 8088 	bne.w	800511c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800500c:	4b4c      	ldr	r3, [pc, #304]	; (8005140 <xTaskIncrementTick+0x148>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3301      	adds	r3, #1
 8005012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005014:	4a4a      	ldr	r2, [pc, #296]	; (8005140 <xTaskIncrementTick+0x148>)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d120      	bne.n	8005062 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005020:	4b48      	ldr	r3, [pc, #288]	; (8005144 <xTaskIncrementTick+0x14c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <xTaskIncrementTick+0x48>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	603b      	str	r3, [r7, #0]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <xTaskIncrementTick+0x46>
 8005040:	4b40      	ldr	r3, [pc, #256]	; (8005144 <xTaskIncrementTick+0x14c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	4b40      	ldr	r3, [pc, #256]	; (8005148 <xTaskIncrementTick+0x150>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3e      	ldr	r2, [pc, #248]	; (8005144 <xTaskIncrementTick+0x14c>)
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4a3e      	ldr	r2, [pc, #248]	; (8005148 <xTaskIncrementTick+0x150>)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b3d      	ldr	r3, [pc, #244]	; (800514c <xTaskIncrementTick+0x154>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	4a3c      	ldr	r2, [pc, #240]	; (800514c <xTaskIncrementTick+0x154>)
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	f000 faab 	bl	80055b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005062:	4b3b      	ldr	r3, [pc, #236]	; (8005150 <xTaskIncrementTick+0x158>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	429a      	cmp	r2, r3
 800506a:	d348      	bcc.n	80050fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800506c:	4b35      	ldr	r3, [pc, #212]	; (8005144 <xTaskIncrementTick+0x14c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d104      	bne.n	8005080 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005076:	4b36      	ldr	r3, [pc, #216]	; (8005150 <xTaskIncrementTick+0x158>)
 8005078:	f04f 32ff 	mov.w	r2, #4294967295
 800507c:	601a      	str	r2, [r3, #0]
					break;
 800507e:	e03e      	b.n	80050fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005080:	4b30      	ldr	r3, [pc, #192]	; (8005144 <xTaskIncrementTick+0x14c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d203      	bcs.n	80050a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005098:	4a2d      	ldr	r2, [pc, #180]	; (8005150 <xTaskIncrementTick+0x158>)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800509e:	e02e      	b.n	80050fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe ffc7 	bl	8004038 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	3318      	adds	r3, #24
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe ffbe 	bl	8004038 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	2201      	movs	r2, #1
 80050c2:	409a      	lsls	r2, r3
 80050c4:	4b23      	ldr	r3, [pc, #140]	; (8005154 <xTaskIncrementTick+0x15c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	4a22      	ldr	r2, [pc, #136]	; (8005154 <xTaskIncrementTick+0x15c>)
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <xTaskIncrementTick+0x160>)
 80050dc:	441a      	add	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f7fe ff4a 	bl	8003f7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ee:	4b1b      	ldr	r3, [pc, #108]	; (800515c <xTaskIncrementTick+0x164>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d3b9      	bcc.n	800506c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050fc:	e7b6      	b.n	800506c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050fe:	4b17      	ldr	r3, [pc, #92]	; (800515c <xTaskIncrementTick+0x164>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	4914      	ldr	r1, [pc, #80]	; (8005158 <xTaskIncrementTick+0x160>)
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d907      	bls.n	8005126 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e004      	b.n	8005126 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800511c:	4b10      	ldr	r3, [pc, #64]	; (8005160 <xTaskIncrementTick+0x168>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	4a0f      	ldr	r2, [pc, #60]	; (8005160 <xTaskIncrementTick+0x168>)
 8005124:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <xTaskIncrementTick+0x16c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800512e:	2301      	movs	r3, #1
 8005130:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005132:	697b      	ldr	r3, [r7, #20]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000764 	.word	0x20000764
 8005140:	20000740 	.word	0x20000740
 8005144:	200006f4 	.word	0x200006f4
 8005148:	200006f8 	.word	0x200006f8
 800514c:	20000754 	.word	0x20000754
 8005150:	2000075c 	.word	0x2000075c
 8005154:	20000744 	.word	0x20000744
 8005158:	20000668 	.word	0x20000668
 800515c:	20000664 	.word	0x20000664
 8005160:	2000074c 	.word	0x2000074c
 8005164:	20000750 	.word	0x20000750

08005168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800516e:	4b27      	ldr	r3, [pc, #156]	; (800520c <vTaskSwitchContext+0xa4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005176:	4b26      	ldr	r3, [pc, #152]	; (8005210 <vTaskSwitchContext+0xa8>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800517c:	e03f      	b.n	80051fe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <vTaskSwitchContext+0xa8>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005184:	4b23      	ldr	r3, [pc, #140]	; (8005214 <vTaskSwitchContext+0xac>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	fab3 f383 	clz	r3, r3
 8005190:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005192:	7afb      	ldrb	r3, [r7, #11]
 8005194:	f1c3 031f 	rsb	r3, r3, #31
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	491f      	ldr	r1, [pc, #124]	; (8005218 <vTaskSwitchContext+0xb0>)
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	607b      	str	r3, [r7, #4]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <vTaskSwitchContext+0x5a>
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4a12      	ldr	r2, [pc, #72]	; (8005218 <vTaskSwitchContext+0xb0>)
 80051d0:	4413      	add	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3308      	adds	r3, #8
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d104      	bne.n	80051f4 <vTaskSwitchContext+0x8c>
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	4a08      	ldr	r2, [pc, #32]	; (800521c <vTaskSwitchContext+0xb4>)
 80051fc:	6013      	str	r3, [r2, #0]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20000764 	.word	0x20000764
 8005210:	20000750 	.word	0x20000750
 8005214:	20000744 	.word	0x20000744
 8005218:	20000668 	.word	0x20000668
 800521c:	20000664 	.word	0x20000664

08005220 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005246:	4b07      	ldr	r3, [pc, #28]	; (8005264 <vTaskPlaceOnEventList+0x44>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3318      	adds	r3, #24
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fe feb9 	bl	8003fc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005254:	2101      	movs	r1, #1
 8005256:	6838      	ldr	r0, [r7, #0]
 8005258:	f000 fa72 	bl	8005740 <prvAddCurrentTaskToDelayedList>
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000664 	.word	0x20000664

08005268 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	617b      	str	r3, [r7, #20]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3318      	adds	r3, #24
 8005296:	4619      	mov	r1, r3
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7fe fe70 	bl	8003f7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80052a4:	f04f 33ff 	mov.w	r3, #4294967295
 80052a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	68b8      	ldr	r0, [r7, #8]
 80052ae:	f000 fa47 	bl	8005740 <prvAddCurrentTaskToDelayedList>
	}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000664 	.word	0x20000664

080052c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	3318      	adds	r3, #24
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fe fea1 	bl	8004038 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052f6:	4b1d      	ldr	r3, [pc, #116]	; (800536c <xTaskRemoveFromEventList+0xac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d11c      	bne.n	8005338 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	3304      	adds	r3, #4
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fe98 	bl	8004038 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	2201      	movs	r2, #1
 800530e:	409a      	lsls	r2, r3
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <xTaskRemoveFromEventList+0xb0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4313      	orrs	r3, r2
 8005316:	4a16      	ldr	r2, [pc, #88]	; (8005370 <xTaskRemoveFromEventList+0xb0>)
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4a13      	ldr	r2, [pc, #76]	; (8005374 <xTaskRemoveFromEventList+0xb4>)
 8005328:	441a      	add	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3304      	adds	r3, #4
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f7fe fe24 	bl	8003f7e <vListInsertEnd>
 8005336:	e005      	b.n	8005344 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	3318      	adds	r3, #24
 800533c:	4619      	mov	r1, r3
 800533e:	480e      	ldr	r0, [pc, #56]	; (8005378 <xTaskRemoveFromEventList+0xb8>)
 8005340:	f7fe fe1d 	bl	8003f7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <xTaskRemoveFromEventList+0xbc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	429a      	cmp	r2, r3
 8005350:	d905      	bls.n	800535e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005352:	2301      	movs	r3, #1
 8005354:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <xTaskRemoveFromEventList+0xc0>)
 8005358:	2201      	movs	r2, #1
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e001      	b.n	8005362 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005362:	697b      	ldr	r3, [r7, #20]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000764 	.word	0x20000764
 8005370:	20000744 	.word	0x20000744
 8005374:	20000668 	.word	0x20000668
 8005378:	200006fc 	.word	0x200006fc
 800537c:	20000664 	.word	0x20000664
 8005380:	20000750 	.word	0x20000750

08005384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <vTaskInternalSetTimeOutState+0x24>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <vTaskInternalSetTimeOutState+0x28>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	605a      	str	r2, [r3, #4]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	20000754 	.word	0x20000754
 80053ac:	20000740 	.word	0x20000740

080053b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	613b      	str	r3, [r7, #16]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	60fb      	str	r3, [r7, #12]
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80053f2:	f000 fe47 	bl	8006084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053f6:	4b1d      	ldr	r3, [pc, #116]	; (800546c <xTaskCheckForTimeOut+0xbc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d102      	bne.n	8005416 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005410:	2300      	movs	r3, #0
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	e023      	b.n	800545e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <xTaskCheckForTimeOut+0xc0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d007      	beq.n	8005432 <xTaskCheckForTimeOut+0x82>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800542c:	2301      	movs	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	e015      	b.n	800545e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	429a      	cmp	r2, r3
 800543a:	d20b      	bcs.n	8005454 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff ff9b 	bl	8005384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800544e:	2300      	movs	r3, #0
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	e004      	b.n	800545e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800545a:	2301      	movs	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800545e:	f000 fe41 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 8005462:	69fb      	ldr	r3, [r7, #28]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000740 	.word	0x20000740
 8005470:	20000754 	.word	0x20000754

08005474 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <vTaskMissedYield+0x14>)
 800547a:	2201      	movs	r2, #1
 800547c:	601a      	str	r2, [r3, #0]
}
 800547e:	bf00      	nop
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	20000750 	.word	0x20000750

0800548c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005494:	f000 f852 	bl	800553c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <prvIdleTask+0x28>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d9f9      	bls.n	8005494 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <prvIdleTask+0x2c>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054b0:	e7f0      	b.n	8005494 <prvIdleTask+0x8>
 80054b2:	bf00      	nop
 80054b4:	20000668 	.word	0x20000668
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054c2:	2300      	movs	r3, #0
 80054c4:	607b      	str	r3, [r7, #4]
 80054c6:	e00c      	b.n	80054e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4a12      	ldr	r2, [pc, #72]	; (800551c <prvInitialiseTaskLists+0x60>)
 80054d4:	4413      	add	r3, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe fd24 	bl	8003f24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3301      	adds	r3, #1
 80054e0:	607b      	str	r3, [r7, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d9ef      	bls.n	80054c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054e8:	480d      	ldr	r0, [pc, #52]	; (8005520 <prvInitialiseTaskLists+0x64>)
 80054ea:	f7fe fd1b 	bl	8003f24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054ee:	480d      	ldr	r0, [pc, #52]	; (8005524 <prvInitialiseTaskLists+0x68>)
 80054f0:	f7fe fd18 	bl	8003f24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054f4:	480c      	ldr	r0, [pc, #48]	; (8005528 <prvInitialiseTaskLists+0x6c>)
 80054f6:	f7fe fd15 	bl	8003f24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054fa:	480c      	ldr	r0, [pc, #48]	; (800552c <prvInitialiseTaskLists+0x70>)
 80054fc:	f7fe fd12 	bl	8003f24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005500:	480b      	ldr	r0, [pc, #44]	; (8005530 <prvInitialiseTaskLists+0x74>)
 8005502:	f7fe fd0f 	bl	8003f24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <prvInitialiseTaskLists+0x78>)
 8005508:	4a05      	ldr	r2, [pc, #20]	; (8005520 <prvInitialiseTaskLists+0x64>)
 800550a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <prvInitialiseTaskLists+0x7c>)
 800550e:	4a05      	ldr	r2, [pc, #20]	; (8005524 <prvInitialiseTaskLists+0x68>)
 8005510:	601a      	str	r2, [r3, #0]
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000668 	.word	0x20000668
 8005520:	200006cc 	.word	0x200006cc
 8005524:	200006e0 	.word	0x200006e0
 8005528:	200006fc 	.word	0x200006fc
 800552c:	20000710 	.word	0x20000710
 8005530:	20000728 	.word	0x20000728
 8005534:	200006f4 	.word	0x200006f4
 8005538:	200006f8 	.word	0x200006f8

0800553c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005542:	e019      	b.n	8005578 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005544:	f000 fd9e 	bl	8006084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005548:	4b10      	ldr	r3, [pc, #64]	; (800558c <prvCheckTasksWaitingTermination+0x50>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3304      	adds	r3, #4
 8005554:	4618      	mov	r0, r3
 8005556:	f7fe fd6f 	bl	8004038 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800555a:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <prvCheckTasksWaitingTermination+0x54>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3b01      	subs	r3, #1
 8005560:	4a0b      	ldr	r2, [pc, #44]	; (8005590 <prvCheckTasksWaitingTermination+0x54>)
 8005562:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <prvCheckTasksWaitingTermination+0x58>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3b01      	subs	r3, #1
 800556a:	4a0a      	ldr	r2, [pc, #40]	; (8005594 <prvCheckTasksWaitingTermination+0x58>)
 800556c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800556e:	f000 fdb9 	bl	80060e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f810 	bl	8005598 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005578:	4b06      	ldr	r3, [pc, #24]	; (8005594 <prvCheckTasksWaitingTermination+0x58>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e1      	bne.n	8005544 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000710 	.word	0x20000710
 8005590:	2000073c 	.word	0x2000073c
 8005594:	20000724 	.word	0x20000724

08005598 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 ff53 	bl	8006450 <vPortFree>
			vPortFree( pxTCB );
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 ff50 	bl	8006450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <prvResetNextTaskUnblockTime+0x38>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <prvResetNextTaskUnblockTime+0x3c>)
 80055ca:	f04f 32ff 	mov.w	r2, #4294967295
 80055ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055d0:	e008      	b.n	80055e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <prvResetNextTaskUnblockTime+0x38>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <prvResetNextTaskUnblockTime+0x3c>)
 80055e2:	6013      	str	r3, [r2, #0]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	200006f4 	.word	0x200006f4
 80055f4:	2000075c 	.word	0x2000075c

080055f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <xTaskGetSchedulerState+0x34>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005606:	2301      	movs	r3, #1
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	e008      	b.n	800561e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800560c:	4b08      	ldr	r3, [pc, #32]	; (8005630 <xTaskGetSchedulerState+0x38>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005614:	2302      	movs	r3, #2
 8005616:	607b      	str	r3, [r7, #4]
 8005618:	e001      	b.n	800561e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800561a:	2300      	movs	r3, #0
 800561c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800561e:	687b      	ldr	r3, [r7, #4]
	}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	20000748 	.word	0x20000748
 8005630:	20000764 	.word	0x20000764

08005634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d06e      	beq.n	8005728 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800564a:	4b3a      	ldr	r3, [pc, #232]	; (8005734 <xTaskPriorityDisinherit+0x100>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	429a      	cmp	r2, r3
 8005652:	d00a      	beq.n	800566a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	60fb      	str	r3, [r7, #12]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	60bb      	str	r3, [r7, #8]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568c:	1e5a      	subs	r2, r3, #1
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569a:	429a      	cmp	r2, r3
 800569c:	d044      	beq.n	8005728 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d140      	bne.n	8005728 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe fcc4 	bl	8004038 <uxListRemove>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d115      	bne.n	80056e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ba:	491f      	ldr	r1, [pc, #124]	; (8005738 <xTaskPriorityDisinherit+0x104>)
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <xTaskPriorityDisinherit+0xae>
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	2201      	movs	r2, #1
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43da      	mvns	r2, r3
 80056d8:	4b18      	ldr	r3, [pc, #96]	; (800573c <xTaskPriorityDisinherit+0x108>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4013      	ands	r3, r2
 80056de:	4a17      	ldr	r2, [pc, #92]	; (800573c <xTaskPriorityDisinherit+0x108>)
 80056e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	f1c3 0205 	rsb	r2, r3, #5
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	2201      	movs	r2, #1
 80056fc:	409a      	lsls	r2, r3
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <xTaskPriorityDisinherit+0x108>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4313      	orrs	r3, r2
 8005704:	4a0d      	ldr	r2, [pc, #52]	; (800573c <xTaskPriorityDisinherit+0x108>)
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4a08      	ldr	r2, [pc, #32]	; (8005738 <xTaskPriorityDisinherit+0x104>)
 8005716:	441a      	add	r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7fe fc2d 	bl	8003f7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005728:	697b      	ldr	r3, [r7, #20]
	}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000664 	.word	0x20000664
 8005738:	20000668 	.word	0x20000668
 800573c:	20000744 	.word	0x20000744

08005740 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800574a:	4b29      	ldr	r3, [pc, #164]	; (80057f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005750:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3304      	adds	r3, #4
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe fc6e 	bl	8004038 <uxListRemove>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	2201      	movs	r2, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43da      	mvns	r2, r3
 8005770:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4013      	ands	r3, r2
 8005776:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005778:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d10a      	bne.n	8005798 <prvAddCurrentTaskToDelayedList+0x58>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d007      	beq.n	8005798 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005788:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	481a      	ldr	r0, [pc, #104]	; (80057fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005792:	f7fe fbf4 	bl	8003f7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005796:	e026      	b.n	80057e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4413      	add	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d209      	bcs.n	80057c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b0:	4b13      	ldr	r3, [pc, #76]	; (8005800 <prvAddCurrentTaskToDelayedList+0xc0>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3304      	adds	r3, #4
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f7fe fc02 	bl	8003fc6 <vListInsert>
}
 80057c2:	e010      	b.n	80057e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c4:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <prvAddCurrentTaskToDelayedList+0xc4>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7fe fbf8 	bl	8003fc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d202      	bcs.n	80057e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80057e0:	4a09      	ldr	r2, [pc, #36]	; (8005808 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6013      	str	r3, [r2, #0]
}
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000740 	.word	0x20000740
 80057f4:	20000664 	.word	0x20000664
 80057f8:	20000744 	.word	0x20000744
 80057fc:	20000728 	.word	0x20000728
 8005800:	200006f8 	.word	0x200006f8
 8005804:	200006f4 	.word	0x200006f4
 8005808:	2000075c 	.word	0x2000075c

0800580c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005812:	2300      	movs	r3, #0
 8005814:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005816:	f000 fad5 	bl	8005dc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800581a:	4b11      	ldr	r3, [pc, #68]	; (8005860 <xTimerCreateTimerTask+0x54>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005822:	4b10      	ldr	r3, [pc, #64]	; (8005864 <xTimerCreateTimerTask+0x58>)
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	2302      	movs	r3, #2
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	2300      	movs	r3, #0
 800582c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005830:	490d      	ldr	r1, [pc, #52]	; (8005868 <xTimerCreateTimerTask+0x5c>)
 8005832:	480e      	ldr	r0, [pc, #56]	; (800586c <xTimerCreateTimerTask+0x60>)
 8005834:	f7ff f8d6 	bl	80049e4 <xTaskCreate>
 8005838:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	603b      	str	r3, [r7, #0]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8005856:	687b      	ldr	r3, [r7, #4]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000798 	.word	0x20000798
 8005864:	2000079c 	.word	0x2000079c
 8005868:	08008320 	.word	0x08008320
 800586c:	080059a5 	.word	0x080059a5

08005870 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08a      	sub	sp, #40	; 0x28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800587e:	2300      	movs	r3, #0
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	623b      	str	r3, [r7, #32]
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800589e:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <xTimerGenericCommand+0x98>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d02a      	beq.n	80058fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b05      	cmp	r3, #5
 80058b6:	dc18      	bgt.n	80058ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058b8:	f7ff fe9e 	bl	80055f8 <xTaskGetSchedulerState>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d109      	bne.n	80058d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058c2:	4b11      	ldr	r3, [pc, #68]	; (8005908 <xTimerGenericCommand+0x98>)
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	f107 0114 	add.w	r1, r7, #20
 80058ca:	2300      	movs	r3, #0
 80058cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ce:	f7fe fca5 	bl	800421c <xQueueGenericSend>
 80058d2:	6278      	str	r0, [r7, #36]	; 0x24
 80058d4:	e012      	b.n	80058fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058d6:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <xTimerGenericCommand+0x98>)
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	f107 0114 	add.w	r1, r7, #20
 80058de:	2300      	movs	r3, #0
 80058e0:	2200      	movs	r2, #0
 80058e2:	f7fe fc9b 	bl	800421c <xQueueGenericSend>
 80058e6:	6278      	str	r0, [r7, #36]	; 0x24
 80058e8:	e008      	b.n	80058fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058ea:	4b07      	ldr	r3, [pc, #28]	; (8005908 <xTimerGenericCommand+0x98>)
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	f107 0114 	add.w	r1, r7, #20
 80058f2:	2300      	movs	r3, #0
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	f7fe fd8f 	bl	8004418 <xQueueGenericSendFromISR>
 80058fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3728      	adds	r7, #40	; 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000798 	.word	0x20000798

0800590c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af02      	add	r7, sp, #8
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005916:	4b22      	ldr	r3, [pc, #136]	; (80059a0 <prvProcessExpiredTimer+0x94>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	3304      	adds	r3, #4
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe fb87 	bl	8004038 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d022      	beq.n	800597e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	18d1      	adds	r1, r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	6978      	ldr	r0, [r7, #20]
 8005946:	f000 f8d1 	bl	8005aec <prvInsertTimerInActiveList>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01f      	beq.n	8005990 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005950:	2300      	movs	r3, #0
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2300      	movs	r3, #0
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	2100      	movs	r1, #0
 800595a:	6978      	ldr	r0, [r7, #20]
 800595c:	f7ff ff88 	bl	8005870 <xTimerGenericCommand>
 8005960:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d113      	bne.n	8005990 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	60fb      	str	r3, [r7, #12]
}
 800597a:	bf00      	nop
 800597c:	e7fe      	b.n	800597c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	b2da      	uxtb	r2, r3
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	6978      	ldr	r0, [r7, #20]
 8005996:	4798      	blx	r3
}
 8005998:	bf00      	nop
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000790 	.word	0x20000790

080059a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059ac:	f107 0308 	add.w	r3, r7, #8
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 f857 	bl	8005a64 <prvGetNextExpireTime>
 80059b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4619      	mov	r1, r3
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f803 	bl	80059c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059c2:	f000 f8d5 	bl	8005b70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059c6:	e7f1      	b.n	80059ac <prvTimerTask+0x8>

080059c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059d2:	f7ff fa57 	bl	8004e84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059d6:	f107 0308 	add.w	r3, r7, #8
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 f866 	bl	8005aac <prvSampleTimeNow>
 80059e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d130      	bne.n	8005a4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <prvProcessTimerOrBlockTask+0x3c>
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d806      	bhi.n	8005a04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059f6:	f7ff fa53 	bl	8004ea0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7ff ff85 	bl	800590c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a02:	e024      	b.n	8005a4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a0a:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <prvProcessTimerOrBlockTask+0x90>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <prvProcessTimerOrBlockTask+0x50>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <prvProcessTimerOrBlockTask+0x52>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <prvProcessTimerOrBlockTask+0x94>)
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f7fe ffa7 	bl	800497c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a2e:	f7ff fa37 	bl	8004ea0 <xTaskResumeAll>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a38:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <prvProcessTimerOrBlockTask+0x98>)
 8005a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	f3bf 8f6f 	isb	sy
}
 8005a48:	e001      	b.n	8005a4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a4a:	f7ff fa29 	bl	8004ea0 <xTaskResumeAll>
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000794 	.word	0x20000794
 8005a5c:	20000798 	.word	0x20000798
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a6c:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <prvGetNextExpireTime+0x44>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <prvGetNextExpireTime+0x16>
 8005a76:	2201      	movs	r2, #1
 8005a78:	e000      	b.n	8005a7c <prvGetNextExpireTime+0x18>
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a88:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <prvGetNextExpireTime+0x44>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	e001      	b.n	8005a98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a98:	68fb      	ldr	r3, [r7, #12]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	20000790 	.word	0x20000790

08005aac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ab4:	f7ff fa90 	bl	8004fd8 <xTaskGetTickCount>
 8005ab8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <prvSampleTimeNow+0x3c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d205      	bcs.n	8005ad0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ac4:	f000 f91a 	bl	8005cfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e002      	b.n	8005ad6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ad6:	4a04      	ldr	r2, [pc, #16]	; (8005ae8 <prvSampleTimeNow+0x3c>)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005adc:	68fb      	ldr	r3, [r7, #12]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	200007a0 	.word	0x200007a0

08005aec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d812      	bhi.n	8005b38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d302      	bcc.n	8005b26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b20:	2301      	movs	r3, #1
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e01b      	b.n	8005b5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b26:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <prvInsertTimerInActiveList+0x7c>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f7fe fa48 	bl	8003fc6 <vListInsert>
 8005b36:	e012      	b.n	8005b5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d206      	bcs.n	8005b4e <prvInsertTimerInActiveList+0x62>
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d302      	bcc.n	8005b4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	e007      	b.n	8005b5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <prvInsertTimerInActiveList+0x80>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3304      	adds	r3, #4
 8005b56:	4619      	mov	r1, r3
 8005b58:	4610      	mov	r0, r2
 8005b5a:	f7fe fa34 	bl	8003fc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b5e:	697b      	ldr	r3, [r7, #20]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000794 	.word	0x20000794
 8005b6c:	20000790 	.word	0x20000790

08005b70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08c      	sub	sp, #48	; 0x30
 8005b74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b76:	e0ae      	b.n	8005cd6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f2c0 80aa 	blt.w	8005cd4 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fa51 	bl	8004038 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b96:	1d3b      	adds	r3, r7, #4
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff ff87 	bl	8005aac <prvSampleTimeNow>
 8005b9e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b09      	cmp	r3, #9
 8005ba4:	f200 8097 	bhi.w	8005cd6 <prvProcessReceivedCommands+0x166>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <prvProcessReceivedCommands+0x40>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005bd9 	.word	0x08005bd9
 8005bb8:	08005bd9 	.word	0x08005bd9
 8005bbc:	08005c4d 	.word	0x08005c4d
 8005bc0:	08005c61 	.word	0x08005c61
 8005bc4:	08005cab 	.word	0x08005cab
 8005bc8:	08005bd9 	.word	0x08005bd9
 8005bcc:	08005bd9 	.word	0x08005bd9
 8005bd0:	08005c4d 	.word	0x08005c4d
 8005bd4:	08005c61 	.word	0x08005c61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bde:	f043 0301 	orr.w	r3, r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	18d1      	adds	r1, r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bf8:	f7ff ff78 	bl	8005aec <prvInsertTimerInActiveList>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d069      	beq.n	8005cd6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d05e      	beq.n	8005cd6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	441a      	add	r2, r3
 8005c20:	2300      	movs	r3, #0
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2300      	movs	r3, #0
 8005c26:	2100      	movs	r1, #0
 8005c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c2a:	f7ff fe21 	bl	8005870 <xTimerGenericCommand>
 8005c2e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d14f      	bne.n	8005cd6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	61bb      	str	r3, [r7, #24]
}
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c5e:	e03a      	b.n	8005cd6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	617b      	str	r3, [r7, #20]
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	18d1      	adds	r1, r2, r3
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	6a3a      	ldr	r2, [r7, #32]
 8005ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ca4:	f7ff ff22 	bl	8005aec <prvInsertTimerInActiveList>
					break;
 8005ca8:	e015      	b.n	8005cd6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d103      	bne.n	8005cc0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cba:	f000 fbc9 	bl	8006450 <vPortFree>
 8005cbe:	e00a      	b.n	8005cd6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cd2:	e000      	b.n	8005cd6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005cd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <prvProcessReceivedCommands+0x188>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f107 0108 	add.w	r1, r7, #8
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fe fc31 	bl	8004548 <xQueueReceive>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f47f af45 	bne.w	8005b78 <prvProcessReceivedCommands+0x8>
	}
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	3728      	adds	r7, #40	; 0x28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000798 	.word	0x20000798

08005cfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d02:	e048      	b.n	8005d96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d04:	4b2d      	ldr	r3, [pc, #180]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0e:	4b2b      	ldr	r3, [pc, #172]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe f98b 	bl	8004038 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d02e      	beq.n	8005d96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d90e      	bls.n	8005d68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d56:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f7fe f930 	bl	8003fc6 <vListInsert>
 8005d66:	e016      	b.n	8005d96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	2100      	movs	r1, #0
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff fd7c 	bl	8005870 <xTimerGenericCommand>
 8005d78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	603b      	str	r3, [r7, #0]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d96:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1b1      	bne.n	8005d04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005da0:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <prvSwitchTimerLists+0xc4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005dac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005dae:	4a04      	ldr	r2, [pc, #16]	; (8005dc0 <prvSwitchTimerLists+0xc4>)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	6013      	str	r3, [r2, #0]
}
 8005db4:	bf00      	nop
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000790 	.word	0x20000790
 8005dc0:	20000794 	.word	0x20000794

08005dc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005dc8:	f000 f95c 	bl	8006084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005dcc:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <prvCheckForValidListAndQueue+0x54>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d11d      	bne.n	8005e10 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005dd4:	4811      	ldr	r0, [pc, #68]	; (8005e1c <prvCheckForValidListAndQueue+0x58>)
 8005dd6:	f7fe f8a5 	bl	8003f24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005dda:	4811      	ldr	r0, [pc, #68]	; (8005e20 <prvCheckForValidListAndQueue+0x5c>)
 8005ddc:	f7fe f8a2 	bl	8003f24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005de0:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <prvCheckForValidListAndQueue+0x60>)
 8005de2:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <prvCheckForValidListAndQueue+0x58>)
 8005de4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <prvCheckForValidListAndQueue+0x64>)
 8005de8:	4a0d      	ldr	r2, [pc, #52]	; (8005e20 <prvCheckForValidListAndQueue+0x5c>)
 8005dea:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005dec:	2200      	movs	r2, #0
 8005dee:	210c      	movs	r1, #12
 8005df0:	200a      	movs	r0, #10
 8005df2:	f7fe f9b3 	bl	800415c <xQueueGenericCreate>
 8005df6:	4603      	mov	r3, r0
 8005df8:	4a07      	ldr	r2, [pc, #28]	; (8005e18 <prvCheckForValidListAndQueue+0x54>)
 8005dfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <prvCheckForValidListAndQueue+0x54>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <prvCheckForValidListAndQueue+0x54>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4908      	ldr	r1, [pc, #32]	; (8005e2c <prvCheckForValidListAndQueue+0x68>)
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fd8c 	bl	8004928 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e10:	f000 f968 	bl	80060e4 <vPortExitCritical>
}
 8005e14:	bf00      	nop
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000798 	.word	0x20000798
 8005e1c:	20000768 	.word	0x20000768
 8005e20:	2000077c 	.word	0x2000077c
 8005e24:	20000790 	.word	0x20000790
 8005e28:	20000794 	.word	0x20000794
 8005e2c:	08008328 	.word	0x08008328

08005e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3b04      	subs	r3, #4
 8005e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3b04      	subs	r3, #4
 8005e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3b04      	subs	r3, #4
 8005e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e60:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <pxPortInitialiseStack+0x64>)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3b14      	subs	r3, #20
 8005e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3b04      	subs	r3, #4
 8005e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f06f 0202 	mvn.w	r2, #2
 8005e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3b20      	subs	r3, #32
 8005e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e86:	68fb      	ldr	r3, [r7, #12]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	08005e99 	.word	0x08005e99

08005e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <prvTaskExitError+0x54>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d00a      	beq.n	8005ec2 <prvTaskExitError+0x2a>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	60fb      	str	r3, [r7, #12]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <prvTaskExitError+0x28>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60bb      	str	r3, [r7, #8]
}
 8005ed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ed6:	bf00      	nop
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0fc      	beq.n	8005ed8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20000010 	.word	0x20000010

08005ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <pxCurrentTCBConst2>)
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	6808      	ldr	r0, [r1, #0]
 8005ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	f380 8809 	msr	PSP, r0
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	4770      	bx	lr
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst2>:
 8005f10:	20000664 	.word	0x20000664
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f18:	4808      	ldr	r0, [pc, #32]	; (8005f3c <prvPortStartFirstTask+0x24>)
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	6800      	ldr	r0, [r0, #0]
 8005f1e:	f380 8808 	msr	MSP, r0
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8814 	msr	CONTROL, r0
 8005f2a:	b662      	cpsie	i
 8005f2c:	b661      	cpsie	f
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	df00      	svc	0
 8005f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f3a:	bf00      	nop
 8005f3c:	e000ed08 	.word	0xe000ed08

08005f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f46:	4b46      	ldr	r3, [pc, #280]	; (8006060 <xPortStartScheduler+0x120>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a46      	ldr	r2, [pc, #280]	; (8006064 <xPortStartScheduler+0x124>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10a      	bne.n	8005f66 <xPortStartScheduler+0x26>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f66:	4b3e      	ldr	r3, [pc, #248]	; (8006060 <xPortStartScheduler+0x120>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a3f      	ldr	r2, [pc, #252]	; (8006068 <xPortStartScheduler+0x128>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10a      	bne.n	8005f86 <xPortStartScheduler+0x46>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f86:	4b39      	ldr	r3, [pc, #228]	; (800606c <xPortStartScheduler+0x12c>)
 8005f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	22ff      	movs	r2, #255	; 0xff
 8005f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4b31      	ldr	r3, [pc, #196]	; (8006070 <xPortStartScheduler+0x130>)
 8005fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fae:	4b31      	ldr	r3, [pc, #196]	; (8006074 <xPortStartScheduler+0x134>)
 8005fb0:	2207      	movs	r2, #7
 8005fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fb4:	e009      	b.n	8005fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <xPortStartScheduler+0x134>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	4a2d      	ldr	r2, [pc, #180]	; (8006074 <xPortStartScheduler+0x134>)
 8005fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b80      	cmp	r3, #128	; 0x80
 8005fd4:	d0ef      	beq.n	8005fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fd6:	4b27      	ldr	r3, [pc, #156]	; (8006074 <xPortStartScheduler+0x134>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1c3 0307 	rsb	r3, r3, #7
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d00a      	beq.n	8005ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60bb      	str	r3, [r7, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <xPortStartScheduler+0x134>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <xPortStartScheduler+0x134>)
 8006000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006002:	4b1c      	ldr	r3, [pc, #112]	; (8006074 <xPortStartScheduler+0x134>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800600a:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <xPortStartScheduler+0x134>)
 800600c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006016:	4b18      	ldr	r3, [pc, #96]	; (8006078 <xPortStartScheduler+0x138>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <xPortStartScheduler+0x138>)
 800601c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <xPortStartScheduler+0x138>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a14      	ldr	r2, [pc, #80]	; (8006078 <xPortStartScheduler+0x138>)
 8006028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800602c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800602e:	f000 f8dd 	bl	80061ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <xPortStartScheduler+0x13c>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006038:	f000 f8fc 	bl	8006234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <xPortStartScheduler+0x140>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <xPortStartScheduler+0x140>)
 8006042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006048:	f7ff ff66 	bl	8005f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800604c:	f7ff f88c 	bl	8005168 <vTaskSwitchContext>
	prvTaskExitError();
 8006050:	f7ff ff22 	bl	8005e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	e000ed00 	.word	0xe000ed00
 8006064:	410fc271 	.word	0x410fc271
 8006068:	410fc270 	.word	0x410fc270
 800606c:	e000e400 	.word	0xe000e400
 8006070:	200007a4 	.word	0x200007a4
 8006074:	200007a8 	.word	0x200007a8
 8006078:	e000ed20 	.word	0xe000ed20
 800607c:	20000010 	.word	0x20000010
 8006080:	e000ef34 	.word	0xe000ef34

08006084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	607b      	str	r3, [r7, #4]
}
 800609c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <vPortEnterCritical+0x58>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <vPortEnterCritical+0x58>)
 80060a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <vPortEnterCritical+0x58>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d10f      	bne.n	80060d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <vPortEnterCritical+0x5c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	603b      	str	r3, [r7, #0]
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <vPortEnterCritical+0x4a>
	}
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20000010 	.word	0x20000010
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060ea:	4b12      	ldr	r3, [pc, #72]	; (8006134 <vPortExitCritical+0x50>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <vPortExitCritical+0x24>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	607b      	str	r3, [r7, #4]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <vPortExitCritical+0x50>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3b01      	subs	r3, #1
 800610e:	4a09      	ldr	r2, [pc, #36]	; (8006134 <vPortExitCritical+0x50>)
 8006110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <vPortExitCritical+0x50>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d105      	bne.n	8006126 <vPortExitCritical+0x42>
 800611a:	2300      	movs	r3, #0
 800611c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f383 8811 	msr	BASEPRI, r3
}
 8006124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20000010 	.word	0x20000010
	...

08006140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006140:	f3ef 8009 	mrs	r0, PSP
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <pxCurrentTCBConst>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f01e 0f10 	tst.w	lr, #16
 8006150:	bf08      	it	eq
 8006152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615a:	6010      	str	r0, [r2, #0]
 800615c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006164:	f380 8811 	msr	BASEPRI, r0
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f7fe fffa 	bl	8005168 <vTaskSwitchContext>
 8006174:	f04f 0000 	mov.w	r0, #0
 8006178:	f380 8811 	msr	BASEPRI, r0
 800617c:	bc09      	pop	{r0, r3}
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	6808      	ldr	r0, [r1, #0]
 8006182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006186:	f01e 0f10 	tst.w	lr, #16
 800618a:	bf08      	it	eq
 800618c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006190:	f380 8809 	msr	PSP, r0
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	f3af 8000 	nop.w

080061a0 <pxCurrentTCBConst>:
 80061a0:	20000664 	.word	0x20000664
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop

080061a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	607b      	str	r3, [r7, #4]
}
 80061c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061c2:	f7fe ff19 	bl	8004ff8 <xTaskIncrementTick>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061cc:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <SysTick_Handler+0x40>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	2300      	movs	r3, #0
 80061d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f383 8811 	msr	BASEPRI, r3
}
 80061de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <vPortSetupTimerInterrupt+0x34>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <vPortSetupTimerInterrupt+0x38>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <vPortSetupTimerInterrupt+0x3c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <vPortSetupTimerInterrupt+0x40>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	4a09      	ldr	r2, [pc, #36]	; (8006230 <vPortSetupTimerInterrupt+0x44>)
 800620a:	3b01      	subs	r3, #1
 800620c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800620e:	4b04      	ldr	r3, [pc, #16]	; (8006220 <vPortSetupTimerInterrupt+0x34>)
 8006210:	2207      	movs	r2, #7
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	e000e010 	.word	0xe000e010
 8006224:	e000e018 	.word	0xe000e018
 8006228:	20000000 	.word	0x20000000
 800622c:	10624dd3 	.word	0x10624dd3
 8006230:	e000e014 	.word	0xe000e014

08006234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006244 <vPortEnableVFP+0x10>
 8006238:	6801      	ldr	r1, [r0, #0]
 800623a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800623e:	6001      	str	r1, [r0, #0]
 8006240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006242:	bf00      	nop
 8006244:	e000ed88 	.word	0xe000ed88

08006248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800624e:	f3ef 8305 	mrs	r3, IPSR
 8006252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b0f      	cmp	r3, #15
 8006258:	d914      	bls.n	8006284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800625a:	4a17      	ldr	r2, [pc, #92]	; (80062b8 <vPortValidateInterruptPriority+0x70>)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006264:	4b15      	ldr	r3, [pc, #84]	; (80062bc <vPortValidateInterruptPriority+0x74>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	7afa      	ldrb	r2, [r7, #11]
 800626a:	429a      	cmp	r2, r3
 800626c:	d20a      	bcs.n	8006284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	607b      	str	r3, [r7, #4]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006284:	4b0e      	ldr	r3, [pc, #56]	; (80062c0 <vPortValidateInterruptPriority+0x78>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800628c:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <vPortValidateInterruptPriority+0x7c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d90a      	bls.n	80062aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	603b      	str	r3, [r7, #0]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <vPortValidateInterruptPriority+0x60>
	}
 80062aa:	bf00      	nop
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	e000e3f0 	.word	0xe000e3f0
 80062bc:	200007a4 	.word	0x200007a4
 80062c0:	e000ed0c 	.word	0xe000ed0c
 80062c4:	200007a8 	.word	0x200007a8

080062c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062d4:	f7fe fdd6 	bl	8004e84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062d8:	4b58      	ldr	r3, [pc, #352]	; (800643c <pvPortMalloc+0x174>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062e0:	f000 f910 	bl	8006504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062e4:	4b56      	ldr	r3, [pc, #344]	; (8006440 <pvPortMalloc+0x178>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4013      	ands	r3, r2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f040 808e 	bne.w	800640e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01d      	beq.n	8006334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80062f8:	2208      	movs	r2, #8
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4413      	add	r3, r2
 80062fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	2b00      	cmp	r3, #0
 8006308:	d014      	beq.n	8006334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f023 0307 	bic.w	r3, r3, #7
 8006310:	3308      	adds	r3, #8
 8006312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <pvPortMalloc+0x6c>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	617b      	str	r3, [r7, #20]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d069      	beq.n	800640e <pvPortMalloc+0x146>
 800633a:	4b42      	ldr	r3, [pc, #264]	; (8006444 <pvPortMalloc+0x17c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d864      	bhi.n	800640e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006344:	4b40      	ldr	r3, [pc, #256]	; (8006448 <pvPortMalloc+0x180>)
 8006346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006348:	4b3f      	ldr	r3, [pc, #252]	; (8006448 <pvPortMalloc+0x180>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800634e:	e004      	b.n	800635a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	429a      	cmp	r2, r3
 8006362:	d903      	bls.n	800636c <pvPortMalloc+0xa4>
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f1      	bne.n	8006350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800636c:	4b33      	ldr	r3, [pc, #204]	; (800643c <pvPortMalloc+0x174>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006372:	429a      	cmp	r2, r3
 8006374:	d04b      	beq.n	800640e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2208      	movs	r2, #8
 800637c:	4413      	add	r3, r2
 800637e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	1ad2      	subs	r2, r2, r3
 8006390:	2308      	movs	r3, #8
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	429a      	cmp	r2, r3
 8006396:	d91f      	bls.n	80063d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4413      	add	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <pvPortMalloc+0xf8>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	613b      	str	r3, [r7, #16]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	1ad2      	subs	r2, r2, r3
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063d2:	69b8      	ldr	r0, [r7, #24]
 80063d4:	f000 f8f8 	bl	80065c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063d8:	4b1a      	ldr	r3, [pc, #104]	; (8006444 <pvPortMalloc+0x17c>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	4a18      	ldr	r2, [pc, #96]	; (8006444 <pvPortMalloc+0x17c>)
 80063e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063e6:	4b17      	ldr	r3, [pc, #92]	; (8006444 <pvPortMalloc+0x17c>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4b18      	ldr	r3, [pc, #96]	; (800644c <pvPortMalloc+0x184>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d203      	bcs.n	80063fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063f2:	4b14      	ldr	r3, [pc, #80]	; (8006444 <pvPortMalloc+0x17c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a15      	ldr	r2, [pc, #84]	; (800644c <pvPortMalloc+0x184>)
 80063f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	4b10      	ldr	r3, [pc, #64]	; (8006440 <pvPortMalloc+0x178>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	431a      	orrs	r2, r3
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800640e:	f7fe fd47 	bl	8004ea0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <pvPortMalloc+0x16a>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	60fb      	str	r3, [r7, #12]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <pvPortMalloc+0x168>
	return pvReturn;
 8006432:	69fb      	ldr	r3, [r7, #28]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3728      	adds	r7, #40	; 0x28
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	200133b4 	.word	0x200133b4
 8006440:	200133c0 	.word	0x200133c0
 8006444:	200133b8 	.word	0x200133b8
 8006448:	200133ac 	.word	0x200133ac
 800644c:	200133bc 	.word	0x200133bc

08006450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d048      	beq.n	80064f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006462:	2308      	movs	r3, #8
 8006464:	425b      	negs	r3, r3
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4413      	add	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	4b21      	ldr	r3, [pc, #132]	; (80064fc <vPortFree+0xac>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <vPortFree+0x44>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	60fb      	str	r3, [r7, #12]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <vPortFree+0x62>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	60bb      	str	r3, [r7, #8]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	4b11      	ldr	r3, [pc, #68]	; (80064fc <vPortFree+0xac>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d019      	beq.n	80064f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d115      	bne.n	80064f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <vPortFree+0xac>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	43db      	mvns	r3, r3
 80064d2:	401a      	ands	r2, r3
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064d8:	f7fe fcd4 	bl	8004e84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <vPortFree+0xb0>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4413      	add	r3, r2
 80064e6:	4a06      	ldr	r2, [pc, #24]	; (8006500 <vPortFree+0xb0>)
 80064e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064ea:	6938      	ldr	r0, [r7, #16]
 80064ec:	f000 f86c 	bl	80065c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80064f0:	f7fe fcd6 	bl	8004ea0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064f4:	bf00      	nop
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	200133c0 	.word	0x200133c0
 8006500:	200133b8 	.word	0x200133b8

08006504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800650a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800650e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006510:	4b27      	ldr	r3, [pc, #156]	; (80065b0 <prvHeapInit+0xac>)
 8006512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00c      	beq.n	8006538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3307      	adds	r3, #7
 8006522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0307 	bic.w	r3, r3, #7
 800652a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	4a1f      	ldr	r2, [pc, #124]	; (80065b0 <prvHeapInit+0xac>)
 8006534:	4413      	add	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800653c:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <prvHeapInit+0xb0>)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <prvHeapInit+0xb0>)
 8006544:	2200      	movs	r2, #0
 8006546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	4413      	add	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006550:	2208      	movs	r2, #8
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <prvHeapInit+0xb4>)
 8006564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <prvHeapInit+0xb4>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800656e:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <prvHeapInit+0xb4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006584:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <prvHeapInit+0xb4>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <prvHeapInit+0xb8>)
 8006592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <prvHeapInit+0xbc>)
 800659a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800659c:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <prvHeapInit+0xc0>)
 800659e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065a2:	601a      	str	r2, [r3, #0]
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	200007ac 	.word	0x200007ac
 80065b4:	200133ac 	.word	0x200133ac
 80065b8:	200133b4 	.word	0x200133b4
 80065bc:	200133bc 	.word	0x200133bc
 80065c0:	200133b8 	.word	0x200133b8
 80065c4:	200133c0 	.word	0x200133c0

080065c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065d0:	4b28      	ldr	r3, [pc, #160]	; (8006674 <prvInsertBlockIntoFreeList+0xac>)
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e002      	b.n	80065dc <prvInsertBlockIntoFreeList+0x14>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d8f7      	bhi.n	80065d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4413      	add	r3, r2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d108      	bne.n	800660a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	441a      	add	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	441a      	add	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d118      	bne.n	8006650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b15      	ldr	r3, [pc, #84]	; (8006678 <prvInsertBlockIntoFreeList+0xb0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d00d      	beq.n	8006646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	441a      	add	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e008      	b.n	8006658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <prvInsertBlockIntoFreeList+0xb0>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e003      	b.n	8006658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d002      	beq.n	8006666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	200133ac 	.word	0x200133ac
 8006678:	200133b4 	.word	0x200133b4

0800667c <DoorCtrlTask>:
int RDID_pass;



void DoorCtrlTask(void* parameter)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b09e      	sub	sp, #120	; 0x78
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	Mode = INIT;
 8006684:	4bb1      	ldr	r3, [pc, #708]	; (800694c <DoorCtrlTask+0x2d0>)
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
	press_key = '\0';
 800668a:	4bb1      	ldr	r3, [pc, #708]	; (8006950 <DoorCtrlTask+0x2d4>)
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
	strcpy(Default_Password, "123");
 8006690:	4bb0      	ldr	r3, [pc, #704]	; (8006954 <DoorCtrlTask+0x2d8>)
 8006692:	4ab1      	ldr	r2, [pc, #708]	; (8006958 <DoorCtrlTask+0x2dc>)
 8006694:	601a      	str	r2, [r3, #0]
	strcpy(Manage_Password, "000");
 8006696:	4bb1      	ldr	r3, [pc, #708]	; (800695c <DoorCtrlTask+0x2e0>)
 8006698:	4ab1      	ldr	r2, [pc, #708]	; (8006960 <DoorCtrlTask+0x2e4>)
 800669a:	601a      	str	r2, [r3, #0]
	int SubManagePage = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	677b      	str	r3, [r7, #116]	; 0x74
	int SubChangePWPage = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	673b      	str	r3, [r7, #112]	; 0x70
	int Sel_Item;
	int Data = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	663b      	str	r3, [r7, #96]	; 0x60

    QueueData queueData;
    QueueData RFIDqueueData_tx = {
 80066a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	609a      	str	r2, [r3, #8]
 80066b4:	60da      	str	r2, [r3, #12]
 80066b6:	611a      	str	r2, [r3, #16]
 80066b8:	615a      	str	r2, [r3, #20]
 80066ba:	619a      	str	r2, [r3, #24]
 80066bc:	2302      	movs	r3, #2
 80066be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        .result = {0},
		.systemmode = INIT,
		.status = Idle
    };

    QueueData RFIDqueueData_rx = {
 80066c2:	f107 0308 	add.w	r3, r7, #8
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	609a      	str	r2, [r3, #8]
 80066ce:	60da      	str	r2, [r3, #12]
 80066d0:	611a      	str	r2, [r3, #16]
 80066d2:	615a      	str	r2, [r3, #20]
 80066d4:	619a      	str	r2, [r3, #24]
 80066d6:	2302      	movs	r3, #2
 80066d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
//		xQueueSend(RFIDQueue, &queueData, portMAX_DELAY);
//		xQueueSend(FPQueue, &queueData, portMAX_DELAY);


//		RFIDqueueData.systemmode = Mode;
		switch (Mode)
 80066dc:	4b9b      	ldr	r3, [pc, #620]	; (800694c <DoorCtrlTask+0x2d0>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b0f      	cmp	r3, #15
 80066e2:	f200 846a 	bhi.w	8006fba <DoorCtrlTask+0x93e>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <DoorCtrlTask+0x70>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	0800672d 	.word	0x0800672d
 80066f0:	0800674f 	.word	0x0800674f
 80066f4:	08006761 	.word	0x08006761
 80066f8:	08006863 	.word	0x08006863
 80066fc:	080068d9 	.word	0x080068d9
 8006700:	080069a5 	.word	0x080069a5
 8006704:	08006a15 	.word	0x08006a15
 8006708:	08006a2f 	.word	0x08006a2f
 800670c:	08006b17 	.word	0x08006b17
 8006710:	08006b97 	.word	0x08006b97
 8006714:	08006bab 	.word	0x08006bab
 8006718:	08006d7d 	.word	0x08006d7d
 800671c:	08006fbb 	.word	0x08006fbb
 8006720:	08006fbb 	.word	0x08006fbb
 8006724:	08006fbb 	.word	0x08006fbb
 8006728:	08006fbb 	.word	0x08006fbb
		{

	    case INIT:
//	    	pw_fail_flag = 1;

	    	OLED_ShowChinese(32,24, "智慧門鎖");
 800672c:	4a8d      	ldr	r2, [pc, #564]	; (8006964 <DoorCtrlTask+0x2e8>)
 800672e:	2118      	movs	r1, #24
 8006730:	2020      	movs	r0, #32
 8006732:	f7fa fff5 	bl	8001720 <OLED_ShowChinese>
	    	OLED_Clear();
 8006736:	f7fa fee7 	bl	8001508 <OLED_Clear>
	    	OLED_Update();
 800673a:	f7fa feb9 	bl	80014b0 <OLED_Update>
	    	vTaskDelay(200);
 800673e:	20c8      	movs	r0, #200	; 0xc8
 8006740:	f7fe fb1e 	bl	8004d80 <vTaskDelay>

	    	Mode = CLOSE_CLEAR;
 8006744:	4b81      	ldr	r3, [pc, #516]	; (800694c <DoorCtrlTask+0x2d0>)
 8006746:	2201      	movs	r2, #1
 8006748:	701a      	strb	r2, [r3, #0]


	        break;
 800674a:	f000 bc37 	b.w	8006fbc <DoorCtrlTask+0x940>

	    case CLOSE_CLEAR:

	    	OLED_Clear();
 800674e:	f7fa fedb 	bl	8001508 <OLED_Clear>
	    	OLED_Update();
 8006752:	f7fa fead 	bl	80014b0 <OLED_Update>
	    	Mode = CLOSE;
 8006756:	4b7d      	ldr	r3, [pc, #500]	; (800694c <DoorCtrlTask+0x2d0>)
 8006758:	2202      	movs	r2, #2
 800675a:	701a      	strb	r2, [r3, #0]

	    	break;
 800675c:	f000 bc2e 	b.w	8006fbc <DoorCtrlTask+0x940>


	    case CLOSE:
//	    	printf("mode Close");
//	    	OLED_ShowString(0, 0, "Input Password", OLED_8X16);
	    	OLED_ShowChinese(0, 0, "輸入密碼卡片指紋");
 8006760:	4a81      	ldr	r2, [pc, #516]	; (8006968 <DoorCtrlTask+0x2ec>)
 8006762:	2100      	movs	r1, #0
 8006764:	2000      	movs	r0, #0
 8006766:	f7fa ffdb 	bl	8001720 <OLED_ShowChinese>
//	    	OLED_ShowString(0, 16, "or RFID/FP", OLED_8X16);


	    	/* Key password */
//	    	OLED_ShowString(0, 48, "  Clean B", OLED_8X16);
	    	OLED_ShowChinese(0, 48, "＊確認　　＃清除");
 800676a:	4a80      	ldr	r2, [pc, #512]	; (800696c <DoorCtrlTask+0x2f0>)
 800676c:	2130      	movs	r1, #48	; 0x30
 800676e:	2000      	movs	r0, #0
 8006770:	f7fa ffd6 	bl	8001720 <OLED_ShowChinese>

	    	press_key = KEY_SCAN();
 8006774:	f7fa fcda 	bl	800112c <KEY_SCAN>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	4b74      	ldr	r3, [pc, #464]	; (8006950 <DoorCtrlTask+0x2d4>)
 800677e:	701a      	strb	r2, [r3, #0]
//	    	printf("press_key = %c \r\n",press_key);
	    	if (press_key != '\0')
 8006780:	4b73      	ldr	r3, [pc, #460]	; (8006950 <DoorCtrlTask+0x2d4>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d04b      	beq.n	8006820 <DoorCtrlTask+0x1a4>
	    	{

	    		if(press_key != 'A' && press_key != 'B'
 8006788:	4b71      	ldr	r3, [pc, #452]	; (8006950 <DoorCtrlTask+0x2d4>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b41      	cmp	r3, #65	; 0x41
 800678e:	d021      	beq.n	80067d4 <DoorCtrlTask+0x158>
 8006790:	4b6f      	ldr	r3, [pc, #444]	; (8006950 <DoorCtrlTask+0x2d4>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b42      	cmp	r3, #66	; 0x42
 8006796:	d01d      	beq.n	80067d4 <DoorCtrlTask+0x158>
	    				&& press_key != 'C'&& press_key != 'D'
 8006798:	4b6d      	ldr	r3, [pc, #436]	; (8006950 <DoorCtrlTask+0x2d4>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b43      	cmp	r3, #67	; 0x43
 800679e:	d019      	beq.n	80067d4 <DoorCtrlTask+0x158>
 80067a0:	4b6b      	ldr	r3, [pc, #428]	; (8006950 <DoorCtrlTask+0x2d4>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b44      	cmp	r3, #68	; 0x44
 80067a6:	d015      	beq.n	80067d4 <DoorCtrlTask+0x158>
	    				&& press_key != '#'&& press_key != '*')
 80067a8:	4b69      	ldr	r3, [pc, #420]	; (8006950 <DoorCtrlTask+0x2d4>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b23      	cmp	r3, #35	; 0x23
 80067ae:	d011      	beq.n	80067d4 <DoorCtrlTask+0x158>
 80067b0:	4b67      	ldr	r3, [pc, #412]	; (8006950 <DoorCtrlTask+0x2d4>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b2a      	cmp	r3, #42	; 0x2a
 80067b6:	d00d      	beq.n	80067d4 <DoorCtrlTask+0x158>
	    		{
					  printf("press_key = %c \r\n",press_key);
 80067b8:	4b65      	ldr	r3, [pc, #404]	; (8006950 <DoorCtrlTask+0x2d4>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	4619      	mov	r1, r3
 80067be:	486c      	ldr	r0, [pc, #432]	; (8006970 <DoorCtrlTask+0x2f4>)
 80067c0:	f000 fcd8 	bl	8007174 <iprintf>
					  appendChar(Password,press_key,sizeof(Password));
 80067c4:	4b62      	ldr	r3, [pc, #392]	; (8006950 <DoorCtrlTask+0x2d4>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	220a      	movs	r2, #10
 80067ca:	4619      	mov	r1, r3
 80067cc:	4869      	ldr	r0, [pc, #420]	; (8006974 <DoorCtrlTask+0x2f8>)
 80067ce:	f7fa fd87 	bl	80012e0 <appendChar>
 80067d2:	e01b      	b.n	800680c <DoorCtrlTask+0x190>
	    		}
	    		else
	    		{
		    		if(press_key == '#')
 80067d4:	4b5e      	ldr	r3, [pc, #376]	; (8006950 <DoorCtrlTask+0x2d4>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b23      	cmp	r3, #35	; 0x23
 80067da:	d109      	bne.n	80067f0 <DoorCtrlTask+0x174>
		    		{
						  removeChar(Password);
 80067dc:	4865      	ldr	r0, [pc, #404]	; (8006974 <DoorCtrlTask+0x2f8>)
 80067de:	f7fa fda9 	bl	8001334 <removeChar>
						  OLED_ClearArea(0, 16, 128, 16);
 80067e2:	2310      	movs	r3, #16
 80067e4:	2280      	movs	r2, #128	; 0x80
 80067e6:	2110      	movs	r1, #16
 80067e8:	2000      	movs	r0, #0
 80067ea:	f7fa feb5 	bl	8001558 <OLED_ClearArea>
 80067ee:	e00d      	b.n	800680c <DoorCtrlTask+0x190>
		    		}
		    		else if(press_key == '*')
 80067f0:	4b57      	ldr	r3, [pc, #348]	; (8006950 <DoorCtrlTask+0x2d4>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b2a      	cmp	r3, #42	; 0x2a
 80067f6:	d103      	bne.n	8006800 <DoorCtrlTask+0x184>
		    		{
		    			/* check password */
		    			Mode = CHECK_PW;
 80067f8:	4b54      	ldr	r3, [pc, #336]	; (800694c <DoorCtrlTask+0x2d0>)
 80067fa:	2203      	movs	r2, #3
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	e005      	b.n	800680c <DoorCtrlTask+0x190>

		    		}
		    		else if(press_key == 'B')
 8006800:	4b53      	ldr	r3, [pc, #332]	; (8006950 <DoorCtrlTask+0x2d4>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b42      	cmp	r3, #66	; 0x42
 8006806:	d101      	bne.n	800680c <DoorCtrlTask+0x190>
		    		{
		    			RFIDqueueData_tx.cmd.start = 1;
 8006808:	2301      	movs	r3, #1
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
		    		}


	    		}

				OLED_ShowString(0, 16, Password, OLED_8X16);
 800680c:	2308      	movs	r3, #8
 800680e:	4a59      	ldr	r2, [pc, #356]	; (8006974 <DoorCtrlTask+0x2f8>)
 8006810:	2110      	movs	r1, #16
 8006812:	2000      	movs	r0, #0
 8006814:	f7fa ff54 	bl	80016c0 <OLED_ShowString>
				printf("Password = %s \r\n",Password);
 8006818:	4956      	ldr	r1, [pc, #344]	; (8006974 <DoorCtrlTask+0x2f8>)
 800681a:	4857      	ldr	r0, [pc, #348]	; (8006978 <DoorCtrlTask+0x2fc>)
 800681c:	f000 fcaa 	bl	8007174 <iprintf>
			 * QueueData : RFIDqueueData_rx
			 ******************************* */


	    	/* DoorCtrl -> RFID */
	        xStatus = xQueueSend(Ctrl_RFID_Queue, &RFIDqueueData_tx, portMAX_DELAY);
 8006820:	4b56      	ldr	r3, [pc, #344]	; (800697c <DoorCtrlTask+0x300>)
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006828:	2300      	movs	r3, #0
 800682a:	f04f 32ff 	mov.w	r2, #4294967295
 800682e:	f7fd fcf5 	bl	800421c <xQueueGenericSend>
 8006832:	65f8      	str	r0, [r7, #92]	; 0x5c
	        if (xStatus != pdPASS) {
	            // Fail
	            // ...
	        }
	        RFIDqueueData_tx.cmd.start = 1;
 8006834:	2301      	movs	r3, #1
 8006836:	627b      	str	r3, [r7, #36]	; 0x24

	        /* RFID -> DoorCtrl */
			if(xQueueReceive(RFID_Ctrl_Queue, &RFIDqueueData_rx, portMAX_DELAY)== pdPASS)
 8006838:	4b51      	ldr	r3, [pc, #324]	; (8006980 <DoorCtrlTask+0x304>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f107 0108 	add.w	r1, r7, #8
 8006840:	f04f 32ff 	mov.w	r2, #4294967295
 8006844:	4618      	mov	r0, r3
 8006846:	f7fd fe7f 	bl	8004548 <xQueueReceive>
 800684a:	4603      	mov	r3, r0
 800684c:	2b01      	cmp	r3, #1
 800684e:	d105      	bne.n	800685c <DoorCtrlTask+0x1e0>
			{
				if(RFIDqueueData_rx.result.pass == 1)
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d102      	bne.n	800685c <DoorCtrlTask+0x1e0>
				{
					Mode = CHECK_RFID;
 8006856:	4b3d      	ldr	r3, [pc, #244]	; (800694c <DoorCtrlTask+0x2d0>)
 8006858:	2204      	movs	r2, #4
 800685a:	701a      	strb	r2, [r3, #0]
			/* DoorCtrl -> FP */


			/* FP -> DoorCtrl */

	    	OLED_Update();
 800685c:	f7fa fe28 	bl	80014b0 <OLED_Update>
	        break;
 8006860:	e3ac      	b.n	8006fbc <DoorCtrlTask+0x940>


	    case CHECK_PW:

			if (strcmp(Password, Default_Password) == 0) {
 8006862:	493c      	ldr	r1, [pc, #240]	; (8006954 <DoorCtrlTask+0x2d8>)
 8006864:	4843      	ldr	r0, [pc, #268]	; (8006974 <DoorCtrlTask+0x2f8>)
 8006866:	f7f9 fcb3 	bl	80001d0 <strcmp>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d117      	bne.n	80068a0 <DoorCtrlTask+0x224>
				printf("Password is correct.\r\n");
 8006870:	4844      	ldr	r0, [pc, #272]	; (8006984 <DoorCtrlTask+0x308>)
 8006872:	f000 fd05 	bl	8007280 <puts>

				OLED_ClearArea(0, 16, 128, 16);
 8006876:	2310      	movs	r3, #16
 8006878:	2280      	movs	r2, #128	; 0x80
 800687a:	2110      	movs	r1, #16
 800687c:	2000      	movs	r0, #0
 800687e:	f7fa fe6b 	bl	8001558 <OLED_ClearArea>
				OLED_ShowChinese(0, 16, "密碼正確");
 8006882:	4a41      	ldr	r2, [pc, #260]	; (8006988 <DoorCtrlTask+0x30c>)
 8006884:	2110      	movs	r1, #16
 8006886:	2000      	movs	r0, #0
 8006888:	f7fa ff4a 	bl	8001720 <OLED_ShowChinese>
				OLED_Update();
 800688c:	f7fa fe10 	bl	80014b0 <OLED_Update>
				vTaskDelay(500);
 8006890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006894:	f7fe fa74 	bl	8004d80 <vTaskDelay>
				Mode = OPEN_CLEAR;
 8006898:	4b2c      	ldr	r3, [pc, #176]	; (800694c <DoorCtrlTask+0x2d0>)
 800689a:	2206      	movs	r2, #6
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	e016      	b.n	80068ce <DoorCtrlTask+0x252>
			} else {
				printf("Password is incorrect.\r\n");
 80068a0:	483a      	ldr	r0, [pc, #232]	; (800698c <DoorCtrlTask+0x310>)
 80068a2:	f000 fced 	bl	8007280 <puts>

				OLED_ClearArea(0, 16, 128, 16);
 80068a6:	2310      	movs	r3, #16
 80068a8:	2280      	movs	r2, #128	; 0x80
 80068aa:	2110      	movs	r1, #16
 80068ac:	2000      	movs	r0, #0
 80068ae:	f7fa fe53 	bl	8001558 <OLED_ClearArea>
				OLED_ShowChinese(0, 16, "密碼錯誤");
 80068b2:	4a37      	ldr	r2, [pc, #220]	; (8006990 <DoorCtrlTask+0x314>)
 80068b4:	2110      	movs	r1, #16
 80068b6:	2000      	movs	r0, #0
 80068b8:	f7fa ff32 	bl	8001720 <OLED_ShowChinese>
				OLED_Update();
 80068bc:	f7fa fdf8 	bl	80014b0 <OLED_Update>
				vTaskDelay(500);
 80068c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068c4:	f7fe fa5c 	bl	8004d80 <vTaskDelay>
				Mode = CLOSE_CLEAR;
 80068c8:	4b20      	ldr	r3, [pc, #128]	; (800694c <DoorCtrlTask+0x2d0>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
			}
			OLED_Clear();
 80068ce:	f7fa fe1b 	bl	8001508 <OLED_Clear>
			OLED_Update();
 80068d2:	f7fa fded 	bl	80014b0 <OLED_Update>

	    	break;
 80068d6:	e371      	b.n	8006fbc <DoorCtrlTask+0x940>

	    case CHECK_RFID:

			if (RFIDqueueData_rx.result.pass == 1)
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d117      	bne.n	800690e <DoorCtrlTask+0x292>
			{
				printf("RDID pass.\r\n");
 80068de:	482d      	ldr	r0, [pc, #180]	; (8006994 <DoorCtrlTask+0x318>)
 80068e0:	f000 fcce 	bl	8007280 <puts>

				OLED_ClearArea(0, 16, 128, 16);
 80068e4:	2310      	movs	r3, #16
 80068e6:	2280      	movs	r2, #128	; 0x80
 80068e8:	2110      	movs	r1, #16
 80068ea:	2000      	movs	r0, #0
 80068ec:	f7fa fe34 	bl	8001558 <OLED_ClearArea>
				OLED_ShowChinese(0, 16, "卡片正確");
 80068f0:	4a29      	ldr	r2, [pc, #164]	; (8006998 <DoorCtrlTask+0x31c>)
 80068f2:	2110      	movs	r1, #16
 80068f4:	2000      	movs	r0, #0
 80068f6:	f7fa ff13 	bl	8001720 <OLED_ShowChinese>
				OLED_Update();
 80068fa:	f7fa fdd9 	bl	80014b0 <OLED_Update>
				vTaskDelay(500);
 80068fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006902:	f7fe fa3d 	bl	8004d80 <vTaskDelay>
				Mode = OPEN_CLEAR;
 8006906:	4b11      	ldr	r3, [pc, #68]	; (800694c <DoorCtrlTask+0x2d0>)
 8006908:	2206      	movs	r2, #6
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	e019      	b.n	8006942 <DoorCtrlTask+0x2c6>
			}
			else if (RFIDqueueData_rx.result.fail == 1)
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d116      	bne.n	8006942 <DoorCtrlTask+0x2c6>
			{
				printf("RDID fail.\r\n");
 8006914:	4821      	ldr	r0, [pc, #132]	; (800699c <DoorCtrlTask+0x320>)
 8006916:	f000 fcb3 	bl	8007280 <puts>

				OLED_ClearArea(0, 16, 128, 16);
 800691a:	2310      	movs	r3, #16
 800691c:	2280      	movs	r2, #128	; 0x80
 800691e:	2110      	movs	r1, #16
 8006920:	2000      	movs	r0, #0
 8006922:	f7fa fe19 	bl	8001558 <OLED_ClearArea>
				OLED_ShowChinese(0, 16, "卡片錯誤");
 8006926:	4a1e      	ldr	r2, [pc, #120]	; (80069a0 <DoorCtrlTask+0x324>)
 8006928:	2110      	movs	r1, #16
 800692a:	2000      	movs	r0, #0
 800692c:	f7fa fef8 	bl	8001720 <OLED_ShowChinese>
				OLED_Update();
 8006930:	f7fa fdbe 	bl	80014b0 <OLED_Update>
				vTaskDelay(500);
 8006934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006938:	f7fe fa22 	bl	8004d80 <vTaskDelay>
				Mode = CLOSE_CLEAR;
 800693c:	4b03      	ldr	r3, [pc, #12]	; (800694c <DoorCtrlTask+0x2d0>)
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
			}
			OLED_Clear();
 8006942:	f7fa fde1 	bl	8001508 <OLED_Clear>
			OLED_Update();
 8006946:	f7fa fdb3 	bl	80014b0 <OLED_Update>

	    	break;
 800694a:	e337      	b.n	8006fbc <DoorCtrlTask+0x940>
 800694c:	200133c4 	.word	0x200133c4
 8006950:	200133c5 	.word	0x200133c5
 8006954:	200133e0 	.word	0x200133e0
 8006958:	00333231 	.word	0x00333231
 800695c:	200133ec 	.word	0x200133ec
 8006960:	00303030 	.word	0x00303030
 8006964:	08008390 	.word	0x08008390
 8006968:	080083a0 	.word	0x080083a0
 800696c:	080083bc 	.word	0x080083bc
 8006970:	080083d8 	.word	0x080083d8
 8006974:	200133c8 	.word	0x200133c8
 8006978:	080083ec 	.word	0x080083ec
 800697c:	20000180 	.word	0x20000180
 8006980:	20000184 	.word	0x20000184
 8006984:	08008400 	.word	0x08008400
 8006988:	08008418 	.word	0x08008418
 800698c:	08008428 	.word	0x08008428
 8006990:	08008440 	.word	0x08008440
 8006994:	08008450 	.word	0x08008450
 8006998:	0800845c 	.word	0x0800845c
 800699c:	0800846c 	.word	0x0800846c
 80069a0:	08008478 	.word	0x08008478

	    case CHECK_FP:

			if (RDID_pass == 1) {
 80069a4:	4bab      	ldr	r3, [pc, #684]	; (8006c54 <DoorCtrlTask+0x5d8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d117      	bne.n	80069dc <DoorCtrlTask+0x360>
				printf("Finger Print pass.\r\n");
 80069ac:	48aa      	ldr	r0, [pc, #680]	; (8006c58 <DoorCtrlTask+0x5dc>)
 80069ae:	f000 fc67 	bl	8007280 <puts>

				OLED_ClearArea(0, 16, 128, 16);
 80069b2:	2310      	movs	r3, #16
 80069b4:	2280      	movs	r2, #128	; 0x80
 80069b6:	2110      	movs	r1, #16
 80069b8:	2000      	movs	r0, #0
 80069ba:	f7fa fdcd 	bl	8001558 <OLED_ClearArea>
				OLED_ShowChinese(0, 16, "指紋正確");
 80069be:	4aa7      	ldr	r2, [pc, #668]	; (8006c5c <DoorCtrlTask+0x5e0>)
 80069c0:	2110      	movs	r1, #16
 80069c2:	2000      	movs	r0, #0
 80069c4:	f7fa feac 	bl	8001720 <OLED_ShowChinese>
				OLED_Update();
 80069c8:	f7fa fd72 	bl	80014b0 <OLED_Update>
				vTaskDelay(500);
 80069cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069d0:	f7fe f9d6 	bl	8004d80 <vTaskDelay>
				Mode = OPEN_CLEAR;
 80069d4:	4ba2      	ldr	r3, [pc, #648]	; (8006c60 <DoorCtrlTask+0x5e4>)
 80069d6:	2206      	movs	r2, #6
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	e016      	b.n	8006a0a <DoorCtrlTask+0x38e>
			} else {
				printf("Finger Print fail.\r\n");
 80069dc:	48a1      	ldr	r0, [pc, #644]	; (8006c64 <DoorCtrlTask+0x5e8>)
 80069de:	f000 fc4f 	bl	8007280 <puts>

				OLED_ClearArea(0, 16, 128, 16);
 80069e2:	2310      	movs	r3, #16
 80069e4:	2280      	movs	r2, #128	; 0x80
 80069e6:	2110      	movs	r1, #16
 80069e8:	2000      	movs	r0, #0
 80069ea:	f7fa fdb5 	bl	8001558 <OLED_ClearArea>
				OLED_ShowChinese(0, 16, "指紋錯誤");
 80069ee:	4a9e      	ldr	r2, [pc, #632]	; (8006c68 <DoorCtrlTask+0x5ec>)
 80069f0:	2110      	movs	r1, #16
 80069f2:	2000      	movs	r0, #0
 80069f4:	f7fa fe94 	bl	8001720 <OLED_ShowChinese>
				OLED_Update();
 80069f8:	f7fa fd5a 	bl	80014b0 <OLED_Update>
				vTaskDelay(500);
 80069fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a00:	f7fe f9be 	bl	8004d80 <vTaskDelay>
				Mode = CLOSE_CLEAR;
 8006a04:	4b96      	ldr	r3, [pc, #600]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
			}
			OLED_Clear();
 8006a0a:	f7fa fd7d 	bl	8001508 <OLED_Clear>
			OLED_Update();
 8006a0e:	f7fa fd4f 	bl	80014b0 <OLED_Update>

	    	break;
 8006a12:	e2d3      	b.n	8006fbc <DoorCtrlTask+0x940>


	    case OPEN_CLEAR:

			memset(Password, '\0', PASSWORD_LENGTH);
 8006a14:	220a      	movs	r2, #10
 8006a16:	2100      	movs	r1, #0
 8006a18:	4894      	ldr	r0, [pc, #592]	; (8006c6c <DoorCtrlTask+0x5f0>)
 8006a1a:	f000 fba3 	bl	8007164 <memset>
	    	OLED_Clear();
 8006a1e:	f7fa fd73 	bl	8001508 <OLED_Clear>
	    	OLED_Update();
 8006a22:	f7fa fd45 	bl	80014b0 <OLED_Update>
	    	Mode = OPEN;
 8006a26:	4b8e      	ldr	r3, [pc, #568]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006a28:	2207      	movs	r2, #7
 8006a2a:	701a      	strb	r2, [r3, #0]

	    	break;
 8006a2c:	e2c6      	b.n	8006fbc <DoorCtrlTask+0x940>

	    case OPEN:

//	    	OLED_ShowString(0, 0, "Mode: OPEN", OLED_8X16);
//	    	OLED_ShowString(0, 0, "Input Manage PW", OLED_8X16);
	    	OLED_ShowChinese(0, 0, "輸入管理密碼");
 8006a2e:	4a90      	ldr	r2, [pc, #576]	; (8006c70 <DoorCtrlTask+0x5f4>)
 8006a30:	2100      	movs	r1, #0
 8006a32:	2000      	movs	r0, #0
 8006a34:	f7fa fe74 	bl	8001720 <OLED_ShowChinese>

	    	/* Key password */
//	    	OLED_ShowString(0, 48, "Enter A  Clean B", OLED_8X16);
	    	OLED_ShowChinese(0, 32, "　　　　　Ａ關閉");
 8006a38:	4a8e      	ldr	r2, [pc, #568]	; (8006c74 <DoorCtrlTask+0x5f8>)
 8006a3a:	2120      	movs	r1, #32
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	f7fa fe6f 	bl	8001720 <OLED_ShowChinese>
	    	OLED_ShowChinese(0, 48, "＊確認　　＃清除");
 8006a42:	4a8d      	ldr	r2, [pc, #564]	; (8006c78 <DoorCtrlTask+0x5fc>)
 8006a44:	2130      	movs	r1, #48	; 0x30
 8006a46:	2000      	movs	r0, #0
 8006a48:	f7fa fe6a 	bl	8001720 <OLED_ShowChinese>
	    	press_key = KEY_SCAN();
 8006a4c:	f7fa fb6e 	bl	800112c <KEY_SCAN>
 8006a50:	4603      	mov	r3, r0
 8006a52:	461a      	mov	r2, r3
 8006a54:	4b89      	ldr	r3, [pc, #548]	; (8006c7c <DoorCtrlTask+0x600>)
 8006a56:	701a      	strb	r2, [r3, #0]

	    	if (press_key != '\0')
 8006a58:	4b88      	ldr	r3, [pc, #544]	; (8006c7c <DoorCtrlTask+0x600>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d057      	beq.n	8006b10 <DoorCtrlTask+0x494>
	    	{

	    		if(press_key != 'A' && press_key != 'B'
 8006a60:	4b86      	ldr	r3, [pc, #536]	; (8006c7c <DoorCtrlTask+0x600>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b41      	cmp	r3, #65	; 0x41
 8006a66:	d021      	beq.n	8006aac <DoorCtrlTask+0x430>
 8006a68:	4b84      	ldr	r3, [pc, #528]	; (8006c7c <DoorCtrlTask+0x600>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b42      	cmp	r3, #66	; 0x42
 8006a6e:	d01d      	beq.n	8006aac <DoorCtrlTask+0x430>
	    				&& press_key != 'C'&& press_key != 'D'
 8006a70:	4b82      	ldr	r3, [pc, #520]	; (8006c7c <DoorCtrlTask+0x600>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b43      	cmp	r3, #67	; 0x43
 8006a76:	d019      	beq.n	8006aac <DoorCtrlTask+0x430>
 8006a78:	4b80      	ldr	r3, [pc, #512]	; (8006c7c <DoorCtrlTask+0x600>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b44      	cmp	r3, #68	; 0x44
 8006a7e:	d015      	beq.n	8006aac <DoorCtrlTask+0x430>
	    				&& press_key != '#'&& press_key != '*')
 8006a80:	4b7e      	ldr	r3, [pc, #504]	; (8006c7c <DoorCtrlTask+0x600>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b23      	cmp	r3, #35	; 0x23
 8006a86:	d011      	beq.n	8006aac <DoorCtrlTask+0x430>
 8006a88:	4b7c      	ldr	r3, [pc, #496]	; (8006c7c <DoorCtrlTask+0x600>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a8e:	d00d      	beq.n	8006aac <DoorCtrlTask+0x430>
	    		{
					  printf("press_key = %c \r\n",press_key);
 8006a90:	4b7a      	ldr	r3, [pc, #488]	; (8006c7c <DoorCtrlTask+0x600>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	4619      	mov	r1, r3
 8006a96:	487a      	ldr	r0, [pc, #488]	; (8006c80 <DoorCtrlTask+0x604>)
 8006a98:	f000 fb6c 	bl	8007174 <iprintf>
					  appendChar(Password,press_key,sizeof(Password));
 8006a9c:	4b77      	ldr	r3, [pc, #476]	; (8006c7c <DoorCtrlTask+0x600>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	220a      	movs	r2, #10
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4871      	ldr	r0, [pc, #452]	; (8006c6c <DoorCtrlTask+0x5f0>)
 8006aa6:	f7fa fc1b 	bl	80012e0 <appendChar>
 8006aaa:	e027      	b.n	8006afc <DoorCtrlTask+0x480>
	    		}
	    		else
	    		{
		    		if(press_key == '#')
 8006aac:	4b73      	ldr	r3, [pc, #460]	; (8006c7c <DoorCtrlTask+0x600>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b23      	cmp	r3, #35	; 0x23
 8006ab2:	d109      	bne.n	8006ac8 <DoorCtrlTask+0x44c>
		    		{
						  removeChar(Password);
 8006ab4:	486d      	ldr	r0, [pc, #436]	; (8006c6c <DoorCtrlTask+0x5f0>)
 8006ab6:	f7fa fc3d 	bl	8001334 <removeChar>
						  OLED_ClearArea(0, 16, 128, 16);
 8006aba:	2310      	movs	r3, #16
 8006abc:	2280      	movs	r2, #128	; 0x80
 8006abe:	2110      	movs	r1, #16
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	f7fa fd49 	bl	8001558 <OLED_ClearArea>
 8006ac6:	e019      	b.n	8006afc <DoorCtrlTask+0x480>
		    		}
		    		else if(press_key == '*')
 8006ac8:	4b6c      	ldr	r3, [pc, #432]	; (8006c7c <DoorCtrlTask+0x600>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ace:	d103      	bne.n	8006ad8 <DoorCtrlTask+0x45c>
		    		{
		    			/* check password */
		    			Mode = CHECK_MNPW;
 8006ad0:	4b63      	ldr	r3, [pc, #396]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e011      	b.n	8006afc <DoorCtrlTask+0x480>

		    		}
		    		else if(press_key == 'A')
 8006ad8:	4b68      	ldr	r3, [pc, #416]	; (8006c7c <DoorCtrlTask+0x600>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b41      	cmp	r3, #65	; 0x41
 8006ade:	d10d      	bne.n	8006afc <DoorCtrlTask+0x480>
		    		{
						memset(Password, '\0', PASSWORD_LENGTH);
 8006ae0:	220a      	movs	r2, #10
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	4861      	ldr	r0, [pc, #388]	; (8006c6c <DoorCtrlTask+0x5f0>)
 8006ae6:	f000 fb3d 	bl	8007164 <memset>
						OLED_ClearArea(0, 32, 128, 16);
 8006aea:	2310      	movs	r3, #16
 8006aec:	2280      	movs	r2, #128	; 0x80
 8006aee:	2120      	movs	r1, #32
 8006af0:	2000      	movs	r0, #0
 8006af2:	f7fa fd31 	bl	8001558 <OLED_ClearArea>
		    			Mode = CLOSE_CLEAR;
 8006af6:	4b5a      	ldr	r3, [pc, #360]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	701a      	strb	r2, [r3, #0]
		    		}

	    		}

				OLED_ShowString(0, 16, Password, OLED_8X16);
 8006afc:	2308      	movs	r3, #8
 8006afe:	4a5b      	ldr	r2, [pc, #364]	; (8006c6c <DoorCtrlTask+0x5f0>)
 8006b00:	2110      	movs	r1, #16
 8006b02:	2000      	movs	r0, #0
 8006b04:	f7fa fddc 	bl	80016c0 <OLED_ShowString>
				printf("Manage Password = %s \r\n",Password);
 8006b08:	4958      	ldr	r1, [pc, #352]	; (8006c6c <DoorCtrlTask+0x5f0>)
 8006b0a:	485e      	ldr	r0, [pc, #376]	; (8006c84 <DoorCtrlTask+0x608>)
 8006b0c:	f000 fb32 	bl	8007174 <iprintf>

	    	}

	    	OLED_Update();
 8006b10:	f7fa fcce 	bl	80014b0 <OLED_Update>
	        break;
 8006b14:	e252      	b.n	8006fbc <DoorCtrlTask+0x940>

	    case CHECK_MNPW:

			if (strcmp(Password, Manage_Password) == 0) {
 8006b16:	495c      	ldr	r1, [pc, #368]	; (8006c88 <DoorCtrlTask+0x60c>)
 8006b18:	4854      	ldr	r0, [pc, #336]	; (8006c6c <DoorCtrlTask+0x5f0>)
 8006b1a:	f7f9 fb59 	bl	80001d0 <strcmp>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d117      	bne.n	8006b54 <DoorCtrlTask+0x4d8>
				printf("Password is correct.\r\n");
 8006b24:	4859      	ldr	r0, [pc, #356]	; (8006c8c <DoorCtrlTask+0x610>)
 8006b26:	f000 fbab 	bl	8007280 <puts>

				OLED_ClearArea(0, 16, 128, 16);
 8006b2a:	2310      	movs	r3, #16
 8006b2c:	2280      	movs	r2, #128	; 0x80
 8006b2e:	2110      	movs	r1, #16
 8006b30:	2000      	movs	r0, #0
 8006b32:	f7fa fd11 	bl	8001558 <OLED_ClearArea>
				OLED_ShowChinese(0, 16, "管理密碼正確");
 8006b36:	4a56      	ldr	r2, [pc, #344]	; (8006c90 <DoorCtrlTask+0x614>)
 8006b38:	2110      	movs	r1, #16
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	f7fa fdf0 	bl	8001720 <OLED_ShowChinese>
				OLED_Update();
 8006b40:	f7fa fcb6 	bl	80014b0 <OLED_Update>
				vTaskDelay(500);
 8006b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b48:	f7fe f91a 	bl	8004d80 <vTaskDelay>
				Mode = MANAGE_CLEAR;
 8006b4c:	4b44      	ldr	r3, [pc, #272]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006b4e:	2209      	movs	r2, #9
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	e016      	b.n	8006b82 <DoorCtrlTask+0x506>
			} else {
				printf("Password is incorrect.\r\n");
 8006b54:	484f      	ldr	r0, [pc, #316]	; (8006c94 <DoorCtrlTask+0x618>)
 8006b56:	f000 fb93 	bl	8007280 <puts>

				OLED_ClearArea(0, 16, 128, 16);
 8006b5a:	2310      	movs	r3, #16
 8006b5c:	2280      	movs	r2, #128	; 0x80
 8006b5e:	2110      	movs	r1, #16
 8006b60:	2000      	movs	r0, #0
 8006b62:	f7fa fcf9 	bl	8001558 <OLED_ClearArea>
				OLED_ShowChinese(0, 16, "管理密碼錯誤");
 8006b66:	4a4c      	ldr	r2, [pc, #304]	; (8006c98 <DoorCtrlTask+0x61c>)
 8006b68:	2110      	movs	r1, #16
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	f7fa fdd8 	bl	8001720 <OLED_ShowChinese>
				OLED_Update();
 8006b70:	f7fa fc9e 	bl	80014b0 <OLED_Update>
				vTaskDelay(500);
 8006b74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b78:	f7fe f902 	bl	8004d80 <vTaskDelay>
				Mode = OPEN;
 8006b7c:	4b38      	ldr	r3, [pc, #224]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006b7e:	2207      	movs	r2, #7
 8006b80:	701a      	strb	r2, [r3, #0]
			}
			memset(Password, '\0', PASSWORD_LENGTH);
 8006b82:	220a      	movs	r2, #10
 8006b84:	2100      	movs	r1, #0
 8006b86:	4839      	ldr	r0, [pc, #228]	; (8006c6c <DoorCtrlTask+0x5f0>)
 8006b88:	f000 faec 	bl	8007164 <memset>
			OLED_Clear();
 8006b8c:	f7fa fcbc 	bl	8001508 <OLED_Clear>
			OLED_Update();
 8006b90:	f7fa fc8e 	bl	80014b0 <OLED_Update>

	    	break;
 8006b94:	e212      	b.n	8006fbc <DoorCtrlTask+0x940>

	    case MANAGE_CLEAR:

	    	Sel_Item = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	66fb      	str	r3, [r7, #108]	; 0x6c

	    	OLED_Clear();
 8006b9a:	f7fa fcb5 	bl	8001508 <OLED_Clear>
	    	OLED_Update();
 8006b9e:	f7fa fc87 	bl	80014b0 <OLED_Update>
	    	Mode = MANAGE;
 8006ba2:	4b2f      	ldr	r3, [pc, #188]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006ba4:	220a      	movs	r2, #10
 8006ba6:	701a      	strb	r2, [r3, #0]

	    	break;
 8006ba8:	e208      	b.n	8006fbc <DoorCtrlTask+0x940>


	    case MANAGE:


	    	OLED_ShowChinese(0, 48, "＊確認　Ｃ上Ｄ下");
 8006baa:	4a3c      	ldr	r2, [pc, #240]	; (8006c9c <DoorCtrlTask+0x620>)
 8006bac:	2130      	movs	r1, #48	; 0x30
 8006bae:	2000      	movs	r0, #0
 8006bb0:	f7fa fdb6 	bl	8001720 <OLED_ShowChinese>
	    	press_key = KEY_SCAN();
 8006bb4:	f7fa faba 	bl	800112c <KEY_SCAN>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4b2f      	ldr	r3, [pc, #188]	; (8006c7c <DoorCtrlTask+0x600>)
 8006bbe:	701a      	strb	r2, [r3, #0]

	    	if (press_key != '\0')
 8006bc0:	4b2e      	ldr	r3, [pc, #184]	; (8006c7c <DoorCtrlTask+0x600>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d077      	beq.n	8006cb8 <DoorCtrlTask+0x63c>
	    	{
				if(press_key == 'C')/*Up*/
 8006bc8:	4b2c      	ldr	r3, [pc, #176]	; (8006c7c <DoorCtrlTask+0x600>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b43      	cmp	r3, #67	; 0x43
 8006bce:	d109      	bne.n	8006be4 <DoorCtrlTask+0x568>
				{
					if(Sel_Item == 0)
 8006bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d102      	bne.n	8006bdc <DoorCtrlTask+0x560>
					{
						Sel_Item =(sizeof(ItemListCH) / sizeof(ItemListCH[0]))-1;
 8006bd6:	2305      	movs	r3, #5
 8006bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bda:	e067      	b.n	8006cac <DoorCtrlTask+0x630>
					}
					else
					{
						Sel_Item--;
 8006bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bde:	3b01      	subs	r3, #1
 8006be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006be2:	e063      	b.n	8006cac <DoorCtrlTask+0x630>
					}
				}
				else if(press_key == 'D')/*Down*/
 8006be4:	4b25      	ldr	r3, [pc, #148]	; (8006c7c <DoorCtrlTask+0x600>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b44      	cmp	r3, #68	; 0x44
 8006bea:	d109      	bne.n	8006c00 <DoorCtrlTask+0x584>
				{
					if(Sel_Item == 5)
 8006bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d102      	bne.n	8006bf8 <DoorCtrlTask+0x57c>
					{
						Sel_Item = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bf6:	e059      	b.n	8006cac <DoorCtrlTask+0x630>
					}
					else
					{
						Sel_Item++;
 8006bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bfe:	e055      	b.n	8006cac <DoorCtrlTask+0x630>
					}

				}
				else if(press_key == '*')/*Enter*/
 8006c00:	4b1e      	ldr	r3, [pc, #120]	; (8006c7c <DoorCtrlTask+0x600>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b2a      	cmp	r3, #42	; 0x2a
 8006c06:	d151      	bne.n	8006cac <DoorCtrlTask+0x630>
				{

					if(Sel_Item == 0) /* CHANGE_PASSWORD */
 8006c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d105      	bne.n	8006c1a <DoorCtrlTask+0x59e>
					{
						SubChangePWPage = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	673b      	str	r3, [r7, #112]	; 0x70
						Mode = CHANGE_PW;
 8006c12:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006c14:	220b      	movs	r2, #11
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e048      	b.n	8006cac <DoorCtrlTask+0x630>
					}
					else if (Sel_Item == 1) /* NEW_RFID */
 8006c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d103      	bne.n	8006c28 <DoorCtrlTask+0x5ac>
					{
						Mode = NEW_RFID;
 8006c20:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006c22:	220c      	movs	r2, #12
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e041      	b.n	8006cac <DoorCtrlTask+0x630>
					}
					else if (Sel_Item == 2) /* DEL_RFID */
 8006c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d103      	bne.n	8006c36 <DoorCtrlTask+0x5ba>
					{
						Mode = DEL_RFID;
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006c30:	220d      	movs	r2, #13
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	e03a      	b.n	8006cac <DoorCtrlTask+0x630>
					}
					else if (Sel_Item == 3) /* NEW_FP */
 8006c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d103      	bne.n	8006c44 <DoorCtrlTask+0x5c8>
					{
						Mode = NEW_FP;
 8006c3c:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006c3e:	220e      	movs	r2, #14
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	e033      	b.n	8006cac <DoorCtrlTask+0x630>
					}
					else if (Sel_Item == 4) /* DEL_FP */
 8006c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d12a      	bne.n	8006ca0 <DoorCtrlTask+0x624>
					{
						Mode = DEL_FP;
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <DoorCtrlTask+0x5e4>)
 8006c4c:	220f      	movs	r2, #15
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e02c      	b.n	8006cac <DoorCtrlTask+0x630>
 8006c52:	bf00      	nop
 8006c54:	200133f8 	.word	0x200133f8
 8006c58:	08008488 	.word	0x08008488
 8006c5c:	0800849c 	.word	0x0800849c
 8006c60:	200133c4 	.word	0x200133c4
 8006c64:	080084ac 	.word	0x080084ac
 8006c68:	080084c0 	.word	0x080084c0
 8006c6c:	200133c8 	.word	0x200133c8
 8006c70:	080084d0 	.word	0x080084d0
 8006c74:	080084e4 	.word	0x080084e4
 8006c78:	080083bc 	.word	0x080083bc
 8006c7c:	200133c5 	.word	0x200133c5
 8006c80:	080083d8 	.word	0x080083d8
 8006c84:	08008500 	.word	0x08008500
 8006c88:	200133ec 	.word	0x200133ec
 8006c8c:	08008400 	.word	0x08008400
 8006c90:	08008518 	.word	0x08008518
 8006c94:	08008428 	.word	0x08008428
 8006c98:	0800852c 	.word	0x0800852c
 8006c9c:	08008540 	.word	0x08008540
					}
					else if (Sel_Item == 5) /* CLOSE */
 8006ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca2:	2b05      	cmp	r3, #5
 8006ca4:	d102      	bne.n	8006cac <DoorCtrlTask+0x630>
					{
						Mode = CLOSE_CLEAR;
 8006ca6:	4b9e      	ldr	r3, [pc, #632]	; (8006f20 <DoorCtrlTask+0x8a4>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	701a      	strb	r2, [r3, #0]
					}

				}

				OLED_ClearArea(0, 0, 128, 48);
 8006cac:	2330      	movs	r3, #48	; 0x30
 8006cae:	2280      	movs	r2, #128	; 0x80
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	f7fa fc50 	bl	8001558 <OLED_ClearArea>
	    	}

	    	if(Sel_Item < 3)
 8006cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	dc0c      	bgt.n	8006cd8 <DoorCtrlTask+0x65c>
	    	{
	    		SubManagePage = 1;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	677b      	str	r3, [r7, #116]	; 0x74
	    		OLED_ShowChinese(0, Sel_Item*16, "－＞");
 8006cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	b21b      	sxth	r3, r3
 8006ccc:	4a95      	ldr	r2, [pc, #596]	; (8006f24 <DoorCtrlTask+0x8a8>)
 8006cce:	4619      	mov	r1, r3
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	f7fa fd25 	bl	8001720 <OLED_ShowChinese>
 8006cd6:	e00f      	b.n	8006cf8 <DoorCtrlTask+0x67c>


	    	}
	    	else if(Sel_Item > 2)
 8006cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	dd0c      	ble.n	8006cf8 <DoorCtrlTask+0x67c>
	    	{
	    		SubManagePage = 2;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	677b      	str	r3, [r7, #116]	; 0x74
	    		OLED_ShowChinese(0, (Sel_Item-3)*16, "－＞");
 8006ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce4:	3b03      	subs	r3, #3
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	b21b      	sxth	r3, r3
 8006cee:	4a8d      	ldr	r2, [pc, #564]	; (8006f24 <DoorCtrlTask+0x8a8>)
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	f7fa fd14 	bl	8001720 <OLED_ShowChinese>
 8006cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d023      	beq.n	8006d46 <DoorCtrlTask+0x6ca>
 8006cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	dc38      	bgt.n	8006d76 <DoorCtrlTask+0x6fa>
 8006d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <DoorCtrlTask+0x696>
 8006d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d003      	beq.n	8006d18 <DoorCtrlTask+0x69c>
 8006d10:	e031      	b.n	8006d76 <DoorCtrlTask+0x6fa>

//	    	printf("Sel_Item = %d", Sel_Item);
			switch (SubManagePage)
			{
				case 0:
					SubManagePage = 1;
 8006d12:	2301      	movs	r3, #1
 8006d14:	677b      	str	r3, [r7, #116]	; 0x74
					break;
 8006d16:	e02e      	b.n	8006d76 <DoorCtrlTask+0x6fa>

				case 1:
					for(int i = 0;i<3;i++)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d1c:	e00f      	b.n	8006d3e <DoorCtrlTask+0x6c2>
					{
						OLED_ShowChinese(40, 16*i, ItemListCH[i]);
 8006d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	b219      	sxth	r1, r3
 8006d28:	4a7f      	ldr	r2, [pc, #508]	; (8006f28 <DoorCtrlTask+0x8ac>)
 8006d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d30:	461a      	mov	r2, r3
 8006d32:	2028      	movs	r0, #40	; 0x28
 8006d34:	f7fa fcf4 	bl	8001720 <OLED_ShowChinese>
					for(int i = 0;i<3;i++)
 8006d38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	ddec      	ble.n	8006d1e <DoorCtrlTask+0x6a2>
					}
					break;
 8006d44:	e017      	b.n	8006d76 <DoorCtrlTask+0x6fa>

				case 2:
					for(int i = 0;i<3;i++)
 8006d46:	2300      	movs	r3, #0
 8006d48:	667b      	str	r3, [r7, #100]	; 0x64
 8006d4a:	e010      	b.n	8006d6e <DoorCtrlTask+0x6f2>
					{
						OLED_ShowChinese(40, 16*i, ItemListCH[i+3]);
 8006d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	b219      	sxth	r1, r3
 8006d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d58:	3303      	adds	r3, #3
 8006d5a:	4a73      	ldr	r2, [pc, #460]	; (8006f28 <DoorCtrlTask+0x8ac>)
 8006d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d60:	461a      	mov	r2, r3
 8006d62:	2028      	movs	r0, #40	; 0x28
 8006d64:	f7fa fcdc 	bl	8001720 <OLED_ShowChinese>
					for(int i = 0;i<3;i++)
 8006d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	ddeb      	ble.n	8006d4c <DoorCtrlTask+0x6d0>
					}
					break;
 8006d74:	bf00      	nop
			}



			OLED_Update();
 8006d76:	f7fa fb9b 	bl	80014b0 <OLED_Update>
	        break;
 8006d7a:	e11f      	b.n	8006fbc <DoorCtrlTask+0x940>
 8006d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d06a      	beq.n	8006e58 <DoorCtrlTask+0x7dc>
 8006d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	f300 8110 	bgt.w	8006faa <DoorCtrlTask+0x92e>
 8006d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d003      	beq.n	8006d98 <DoorCtrlTask+0x71c>
 8006d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d005      	beq.n	8006da2 <DoorCtrlTask+0x726>
 8006d96:	e108      	b.n	8006faa <DoorCtrlTask+0x92e>
	    case CHANGE_PW:

			switch (SubChangePWPage)
			{
				case 0:
					OLED_Clear();
 8006d98:	f7fa fbb6 	bl	8001508 <OLED_Clear>
					SubChangePWPage = 1;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	673b      	str	r3, [r7, #112]	; 0x70
					break;
 8006da0:	e103      	b.n	8006faa <DoorCtrlTask+0x92e>

				case 1:
					OLED_ShowChinese(0, 0, "輸入第一次新密碼");
 8006da2:	4a62      	ldr	r2, [pc, #392]	; (8006f2c <DoorCtrlTask+0x8b0>)
 8006da4:	2100      	movs	r1, #0
 8006da6:	2000      	movs	r0, #0
 8006da8:	f7fa fcba 	bl	8001720 <OLED_ShowChinese>

			    	press_key = KEY_SCAN();
 8006dac:	f7fa f9be 	bl	800112c <KEY_SCAN>
 8006db0:	4603      	mov	r3, r0
 8006db2:	461a      	mov	r2, r3
 8006db4:	4b5e      	ldr	r3, [pc, #376]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006db6:	701a      	strb	r2, [r3, #0]
			    	if (press_key != '\0')
 8006db8:	4b5d      	ldr	r3, [pc, #372]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80f1 	beq.w	8006fa4 <DoorCtrlTask+0x928>
			    	{

			    		if(press_key != 'A' && press_key != 'B'
 8006dc2:	4b5b      	ldr	r3, [pc, #364]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b41      	cmp	r3, #65	; 0x41
 8006dc8:	d021      	beq.n	8006e0e <DoorCtrlTask+0x792>
 8006dca:	4b59      	ldr	r3, [pc, #356]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b42      	cmp	r3, #66	; 0x42
 8006dd0:	d01d      	beq.n	8006e0e <DoorCtrlTask+0x792>
			    				&& press_key != 'C'&& press_key != 'D'
 8006dd2:	4b57      	ldr	r3, [pc, #348]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2b43      	cmp	r3, #67	; 0x43
 8006dd8:	d019      	beq.n	8006e0e <DoorCtrlTask+0x792>
 8006dda:	4b55      	ldr	r3, [pc, #340]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b44      	cmp	r3, #68	; 0x44
 8006de0:	d015      	beq.n	8006e0e <DoorCtrlTask+0x792>
			    				&& press_key != '#'&& press_key != '*')
 8006de2:	4b53      	ldr	r3, [pc, #332]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b23      	cmp	r3, #35	; 0x23
 8006de8:	d011      	beq.n	8006e0e <DoorCtrlTask+0x792>
 8006dea:	4b51      	ldr	r3, [pc, #324]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b2a      	cmp	r3, #42	; 0x2a
 8006df0:	d00d      	beq.n	8006e0e <DoorCtrlTask+0x792>
			    		{
							  printf("press_key = %c \r\n",press_key);
 8006df2:	4b4f      	ldr	r3, [pc, #316]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	4619      	mov	r1, r3
 8006df8:	484e      	ldr	r0, [pc, #312]	; (8006f34 <DoorCtrlTask+0x8b8>)
 8006dfa:	f000 f9bb 	bl	8007174 <iprintf>
							  appendChar(Password,press_key,sizeof(Password));
 8006dfe:	4b4c      	ldr	r3, [pc, #304]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	220a      	movs	r2, #10
 8006e04:	4619      	mov	r1, r3
 8006e06:	484c      	ldr	r0, [pc, #304]	; (8006f38 <DoorCtrlTask+0x8bc>)
 8006e08:	f7fa fa6a 	bl	80012e0 <appendChar>
 8006e0c:	e019      	b.n	8006e42 <DoorCtrlTask+0x7c6>
			    		}
			    		else
			    		{
				    		if(press_key == '#')
 8006e0e:	4b48      	ldr	r3, [pc, #288]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b23      	cmp	r3, #35	; 0x23
 8006e14:	d109      	bne.n	8006e2a <DoorCtrlTask+0x7ae>
				    		{
								  removeChar(Password);
 8006e16:	4848      	ldr	r0, [pc, #288]	; (8006f38 <DoorCtrlTask+0x8bc>)
 8006e18:	f7fa fa8c 	bl	8001334 <removeChar>
								  OLED_ClearArea(0, 16, 128, 16);
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	2280      	movs	r2, #128	; 0x80
 8006e20:	2110      	movs	r1, #16
 8006e22:	2000      	movs	r0, #0
 8006e24:	f7fa fb98 	bl	8001558 <OLED_ClearArea>
 8006e28:	e00b      	b.n	8006e42 <DoorCtrlTask+0x7c6>
				    		}
				    		else if(press_key == '*')
 8006e2a:	4b41      	ldr	r3, [pc, #260]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e30:	d107      	bne.n	8006e42 <DoorCtrlTask+0x7c6>
				    		{
				    			/* change password */
				    			SubChangePWPage = 2;
 8006e32:	2302      	movs	r3, #2
 8006e34:	673b      	str	r3, [r7, #112]	; 0x70
								OLED_ClearArea(0, 16, 128, 16);
 8006e36:	2310      	movs	r3, #16
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	2110      	movs	r1, #16
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	f7fa fb8b 	bl	8001558 <OLED_ClearArea>
				    		}
			    		}

						OLED_ShowString(0, 16, Password, OLED_8X16);
 8006e42:	2308      	movs	r3, #8
 8006e44:	4a3c      	ldr	r2, [pc, #240]	; (8006f38 <DoorCtrlTask+0x8bc>)
 8006e46:	2110      	movs	r1, #16
 8006e48:	2000      	movs	r0, #0
 8006e4a:	f7fa fc39 	bl	80016c0 <OLED_ShowString>
						printf("New 1 Password = %s \r\n",Password);
 8006e4e:	493a      	ldr	r1, [pc, #232]	; (8006f38 <DoorCtrlTask+0x8bc>)
 8006e50:	483a      	ldr	r0, [pc, #232]	; (8006f3c <DoorCtrlTask+0x8c0>)
 8006e52:	f000 f98f 	bl	8007174 <iprintf>
			    	}

					break;
 8006e56:	e0a5      	b.n	8006fa4 <DoorCtrlTask+0x928>
				case 2:
					OLED_ShowChinese(0, 0, "輸入第二次新密碼");
 8006e58:	4a39      	ldr	r2, [pc, #228]	; (8006f40 <DoorCtrlTask+0x8c4>)
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f7fa fc5f 	bl	8001720 <OLED_ShowChinese>

			    	press_key = KEY_SCAN();
 8006e62:	f7fa f963 	bl	800112c <KEY_SCAN>
 8006e66:	4603      	mov	r3, r0
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4b31      	ldr	r3, [pc, #196]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006e6c:	701a      	strb	r2, [r3, #0]
			    	if (press_key != '\0')
 8006e6e:	4b30      	ldr	r3, [pc, #192]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8098 	beq.w	8006fa8 <DoorCtrlTask+0x92c>
			    	{

			    		if(press_key != 'A' && press_key != 'B'
 8006e78:	4b2d      	ldr	r3, [pc, #180]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b41      	cmp	r3, #65	; 0x41
 8006e7e:	d021      	beq.n	8006ec4 <DoorCtrlTask+0x848>
 8006e80:	4b2b      	ldr	r3, [pc, #172]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b42      	cmp	r3, #66	; 0x42
 8006e86:	d01d      	beq.n	8006ec4 <DoorCtrlTask+0x848>
			    				&& press_key != 'C'&& press_key != 'D'
 8006e88:	4b29      	ldr	r3, [pc, #164]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b43      	cmp	r3, #67	; 0x43
 8006e8e:	d019      	beq.n	8006ec4 <DoorCtrlTask+0x848>
 8006e90:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b44      	cmp	r3, #68	; 0x44
 8006e96:	d015      	beq.n	8006ec4 <DoorCtrlTask+0x848>
			    				&& press_key != '#'&& press_key != '*')
 8006e98:	4b25      	ldr	r3, [pc, #148]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b23      	cmp	r3, #35	; 0x23
 8006e9e:	d011      	beq.n	8006ec4 <DoorCtrlTask+0x848>
 8006ea0:	4b23      	ldr	r3, [pc, #140]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ea6:	d00d      	beq.n	8006ec4 <DoorCtrlTask+0x848>
			    		{
							  printf("press_key = %c \r\n",press_key);
 8006ea8:	4b21      	ldr	r3, [pc, #132]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	4619      	mov	r1, r3
 8006eae:	4821      	ldr	r0, [pc, #132]	; (8006f34 <DoorCtrlTask+0x8b8>)
 8006eb0:	f000 f960 	bl	8007174 <iprintf>
							  appendChar(Password2,press_key,sizeof(Password2));
 8006eb4:	4b1e      	ldr	r3, [pc, #120]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	220a      	movs	r2, #10
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4821      	ldr	r0, [pc, #132]	; (8006f44 <DoorCtrlTask+0x8c8>)
 8006ebe:	f7fa fa0f 	bl	80012e0 <appendChar>
 8006ec2:	e064      	b.n	8006f8e <DoorCtrlTask+0x912>
			    		}
			    		else
			    		{
				    		if(press_key == '#')
 8006ec4:	4b1a      	ldr	r3, [pc, #104]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b23      	cmp	r3, #35	; 0x23
 8006eca:	d109      	bne.n	8006ee0 <DoorCtrlTask+0x864>
				    		{
								  removeChar(Password2);
 8006ecc:	481d      	ldr	r0, [pc, #116]	; (8006f44 <DoorCtrlTask+0x8c8>)
 8006ece:	f7fa fa31 	bl	8001334 <removeChar>
								  OLED_ClearArea(0, 32, 128, 16);
 8006ed2:	2310      	movs	r3, #16
 8006ed4:	2280      	movs	r2, #128	; 0x80
 8006ed6:	2120      	movs	r1, #32
 8006ed8:	2000      	movs	r0, #0
 8006eda:	f7fa fb3d 	bl	8001558 <OLED_ClearArea>
 8006ede:	e056      	b.n	8006f8e <DoorCtrlTask+0x912>
				    		}
				    		else if(press_key == '*')
 8006ee0:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <DoorCtrlTask+0x8b4>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee6:	d152      	bne.n	8006f8e <DoorCtrlTask+0x912>
				    		{
				    			/* change password */

								if (strcmp(Password, Password2) == 0)
 8006ee8:	4916      	ldr	r1, [pc, #88]	; (8006f44 <DoorCtrlTask+0x8c8>)
 8006eea:	4813      	ldr	r0, [pc, #76]	; (8006f38 <DoorCtrlTask+0x8bc>)
 8006eec:	f7f9 f970 	bl	80001d0 <strcmp>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d12e      	bne.n	8006f54 <DoorCtrlTask+0x8d8>
								{
//									memset(Default_Password, Password, PASSWORD_LENGTH);
									strcpy(Default_Password, Password);
 8006ef6:	4910      	ldr	r1, [pc, #64]	; (8006f38 <DoorCtrlTask+0x8bc>)
 8006ef8:	4813      	ldr	r0, [pc, #76]	; (8006f48 <DoorCtrlTask+0x8cc>)
 8006efa:	f000 f9c9 	bl	8007290 <strcpy>
									printf("change Password OK \r\n");
 8006efe:	4813      	ldr	r0, [pc, #76]	; (8006f4c <DoorCtrlTask+0x8d0>)
 8006f00:	f000 f9be 	bl	8007280 <puts>
									OLED_Clear();
 8006f04:	f7fa fb00 	bl	8001508 <OLED_Clear>
									OLED_ShowChinese(0, 0, "修改密碼成功");
 8006f08:	4a11      	ldr	r2, [pc, #68]	; (8006f50 <DoorCtrlTask+0x8d4>)
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	f7fa fc07 	bl	8001720 <OLED_ShowChinese>
									OLED_Update();
 8006f12:	f7fa facd 	bl	80014b0 <OLED_Update>
									vTaskDelay(500);
 8006f16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f1a:	f7fd ff31 	bl	8004d80 <vTaskDelay>
 8006f1e:	e029      	b.n	8006f74 <DoorCtrlTask+0x8f8>
 8006f20:	200133c4 	.word	0x200133c4
 8006f24:	0800855c 	.word	0x0800855c
 8006f28:	20000014 	.word	0x20000014
 8006f2c:	08008564 	.word	0x08008564
 8006f30:	200133c5 	.word	0x200133c5
 8006f34:	080083d8 	.word	0x080083d8
 8006f38:	200133c8 	.word	0x200133c8
 8006f3c:	08008580 	.word	0x08008580
 8006f40:	08008598 	.word	0x08008598
 8006f44:	200133d4 	.word	0x200133d4
 8006f48:	200133e0 	.word	0x200133e0
 8006f4c:	080085b4 	.word	0x080085b4
 8006f50:	080085cc 	.word	0x080085cc
								}
								else
								{
									printf("change Password fail \r\n");
 8006f54:	481c      	ldr	r0, [pc, #112]	; (8006fc8 <DoorCtrlTask+0x94c>)
 8006f56:	f000 f993 	bl	8007280 <puts>
									OLED_Clear();
 8006f5a:	f7fa fad5 	bl	8001508 <OLED_Clear>
									OLED_ShowChinese(0, 0, "修改密碼失敗");
 8006f5e:	4a1b      	ldr	r2, [pc, #108]	; (8006fcc <DoorCtrlTask+0x950>)
 8006f60:	2100      	movs	r1, #0
 8006f62:	2000      	movs	r0, #0
 8006f64:	f7fa fbdc 	bl	8001720 <OLED_ShowChinese>
									OLED_Update();
 8006f68:	f7fa faa2 	bl	80014b0 <OLED_Update>
									vTaskDelay(500);
 8006f6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f70:	f7fd ff06 	bl	8004d80 <vTaskDelay>
								}
								memset(Password, '\0', PASSWORD_LENGTH);
 8006f74:	220a      	movs	r2, #10
 8006f76:	2100      	movs	r1, #0
 8006f78:	4815      	ldr	r0, [pc, #84]	; (8006fd0 <DoorCtrlTask+0x954>)
 8006f7a:	f000 f8f3 	bl	8007164 <memset>
								memset(Password2, '\0', PASSWORD_LENGTH);
 8006f7e:	220a      	movs	r2, #10
 8006f80:	2100      	movs	r1, #0
 8006f82:	4814      	ldr	r0, [pc, #80]	; (8006fd4 <DoorCtrlTask+0x958>)
 8006f84:	f000 f8ee 	bl	8007164 <memset>

								Mode = MANAGE_CLEAR;
 8006f88:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <DoorCtrlTask+0x95c>)
 8006f8a:	2209      	movs	r2, #9
 8006f8c:	701a      	strb	r2, [r3, #0]


				    		}
			    		}
						OLED_ShowString(0, 32, Password2, OLED_8X16);
 8006f8e:	2308      	movs	r3, #8
 8006f90:	4a10      	ldr	r2, [pc, #64]	; (8006fd4 <DoorCtrlTask+0x958>)
 8006f92:	2120      	movs	r1, #32
 8006f94:	2000      	movs	r0, #0
 8006f96:	f7fa fb93 	bl	80016c0 <OLED_ShowString>
						printf("New 2 Password = %s \r\n",Password2);
 8006f9a:	490e      	ldr	r1, [pc, #56]	; (8006fd4 <DoorCtrlTask+0x958>)
 8006f9c:	480f      	ldr	r0, [pc, #60]	; (8006fdc <DoorCtrlTask+0x960>)
 8006f9e:	f000 f8e9 	bl	8007174 <iprintf>
					}
					break;
 8006fa2:	e001      	b.n	8006fa8 <DoorCtrlTask+0x92c>
					break;
 8006fa4:	bf00      	nop
 8006fa6:	e000      	b.n	8006faa <DoorCtrlTask+0x92e>
					break;
 8006fa8:	bf00      	nop
			//	    	OLED_ShowString(0, 48, "Enter A  Clean B", OLED_8X16);
//			OLED_ShowChinese(0, 48, "＊確認　　＃清除");


			}
			OLED_ShowChinese(0, 48, "＊確認　　＃清除");
 8006faa:	4a0d      	ldr	r2, [pc, #52]	; (8006fe0 <DoorCtrlTask+0x964>)
 8006fac:	2130      	movs	r1, #48	; 0x30
 8006fae:	2000      	movs	r0, #0
 8006fb0:	f7fa fbb6 	bl	8001720 <OLED_ShowChinese>


			OLED_Update();
 8006fb4:	f7fa fa7c 	bl	80014b0 <OLED_Update>
			 break;
 8006fb8:	e000      	b.n	8006fbc <DoorCtrlTask+0x940>
			 break;



	    default:
	        break;
 8006fba:	bf00      	nop


		}


		vTaskDelay(50);
 8006fbc:	2032      	movs	r0, #50	; 0x32
 8006fbe:	f7fd fedf 	bl	8004d80 <vTaskDelay>
		switch (Mode)
 8006fc2:	f7ff bb8b 	b.w	80066dc <DoorCtrlTask+0x60>
 8006fc6:	bf00      	nop
 8006fc8:	080085e0 	.word	0x080085e0
 8006fcc:	080085f8 	.word	0x080085f8
 8006fd0:	200133c8 	.word	0x200133c8
 8006fd4:	200133d4 	.word	0x200133d4
 8006fd8:	200133c4 	.word	0x200133c4
 8006fdc:	0800860c 	.word	0x0800860c
 8006fe0:	080083bc 	.word	0x080083bc

08006fe4 <FPTask>:




void FPTask(void* parameter)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]

	for(;;)
	{

		/* FP -> DoorCtrl */
		if(xQueueReceive(Ctrl_FP_Queue, &CtrlqueueData_rx, portMAX_DELAY)== pdPASS)
 8006fec:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <FPTask+0x40>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff4:	490c      	ldr	r1, [pc, #48]	; (8007028 <FPTask+0x44>)
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fd faa6 	bl	8004548 <xQueueReceive>
		}



		/* DoorCtrl -> FP */
		xStatus = xQueueSend(FP_Ctrl_Queue, &CtrlqueueData_tx, portMAX_DELAY);
 8006ffc:	4b0b      	ldr	r3, [pc, #44]	; (800702c <FPTask+0x48>)
 8006ffe:	6818      	ldr	r0, [r3, #0]
 8007000:	2300      	movs	r3, #0
 8007002:	f04f 32ff 	mov.w	r2, #4294967295
 8007006:	490a      	ldr	r1, [pc, #40]	; (8007030 <FPTask+0x4c>)
 8007008:	f7fd f908 	bl	800421c <xQueueGenericSend>
 800700c:	4603      	mov	r3, r0
 800700e:	4a09      	ldr	r2, [pc, #36]	; (8007034 <FPTask+0x50>)
 8007010:	6013      	str	r3, [r2, #0]
		if (xStatus != pdPASS) {
 8007012:	4b08      	ldr	r3, [pc, #32]	; (8007034 <FPTask+0x50>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d0e8      	beq.n	8006fec <FPTask+0x8>
			printf("FP CtrlqueueData_tx fail");
 800701a:	4807      	ldr	r0, [pc, #28]	; (8007038 <FPTask+0x54>)
 800701c:	f000 f8aa 	bl	8007174 <iprintf>
		if(xQueueReceive(Ctrl_FP_Queue, &CtrlqueueData_rx, portMAX_DELAY)== pdPASS)
 8007020:	e7e4      	b.n	8006fec <FPTask+0x8>
 8007022:	bf00      	nop
 8007024:	20000188 	.word	0x20000188
 8007028:	2000002c 	.word	0x2000002c
 800702c:	2000018c 	.word	0x2000018c
 8007030:	20000048 	.word	0x20000048
 8007034:	200133fc 	.word	0x200133fc
 8007038:	08008624 	.word	0x08008624

0800703c <RFIDTask>:
uint32_t counter =0;



void RFIDTask(void* parameter)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]

	for(;;)
	{

		/* DoorCtrl -> RFID */
		if(xQueueReceive(Ctrl_RFID_Queue, &CtrlqueueData_rx, portMAX_DELAY)== pdPASS)
 8007044:	4b23      	ldr	r3, [pc, #140]	; (80070d4 <RFIDTask+0x98>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f04f 32ff 	mov.w	r2, #4294967295
 800704c:	4922      	ldr	r1, [pc, #136]	; (80070d8 <RFIDTask+0x9c>)
 800704e:	4618      	mov	r0, r3
 8007050:	f7fd fa7a 	bl	8004548 <xQueueReceive>
 8007054:	4603      	mov	r3, r0
 8007056:	2b01      	cmp	r3, #1
 8007058:	d125      	bne.n	80070a6 <RFIDTask+0x6a>
		{
			if(CtrlqueueData_rx.cmd.start == 1)
 800705a:	4b1f      	ldr	r3, [pc, #124]	; (80070d8 <RFIDTask+0x9c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d11a      	bne.n	8007098 <RFIDTask+0x5c>
			{
				CtrlqueueData_tx.status = Busy;
 8007062:	4b1e      	ldr	r3, [pc, #120]	; (80070dc <RFIDTask+0xa0>)
 8007064:	2200      	movs	r2, #0
 8007066:	765a      	strb	r2, [r3, #25]
				OLED_ShowString(0, 16, "RFID Busy ", OLED_8X16);
 8007068:	2308      	movs	r3, #8
 800706a:	4a1d      	ldr	r2, [pc, #116]	; (80070e0 <RFIDTask+0xa4>)
 800706c:	2110      	movs	r1, #16
 800706e:	2000      	movs	r0, #0
 8007070:	f7fa fb26 	bl	80016c0 <OLED_ShowString>
				counter++;
 8007074:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <RFIDTask+0xa8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	4a1a      	ldr	r2, [pc, #104]	; (80070e4 <RFIDTask+0xa8>)
 800707c:	6013      	str	r3, [r2, #0]

				if(counter > 10)
 800707e:	4b19      	ldr	r3, [pc, #100]	; (80070e4 <RFIDTask+0xa8>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b0a      	cmp	r3, #10
 8007084:	d90f      	bls.n	80070a6 <RFIDTask+0x6a>
				{
					CtrlqueueData_tx.status = Idle;
 8007086:	4b15      	ldr	r3, [pc, #84]	; (80070dc <RFIDTask+0xa0>)
 8007088:	2202      	movs	r2, #2
 800708a:	765a      	strb	r2, [r3, #25]
					CtrlqueueData_tx.result.pass = 1;
 800708c:	4b13      	ldr	r3, [pc, #76]	; (80070dc <RFIDTask+0xa0>)
 800708e:	2201      	movs	r2, #1
 8007090:	611a      	str	r2, [r3, #16]
					OLED_Clear();
 8007092:	f7fa fa39 	bl	8001508 <OLED_Clear>
 8007096:	e006      	b.n	80070a6 <RFIDTask+0x6a>


				}
			}
			else if(CtrlqueueData_rx.cmd.start != 1)
 8007098:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <RFIDTask+0x9c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d002      	beq.n	80070a6 <RFIDTask+0x6a>
			{
				counter = 0;
 80070a0:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <RFIDTask+0xa8>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
			}

		}

		/* RFID -> DoorCtrl */
		xStatus = xQueueSend(RFID_Ctrl_Queue, &CtrlqueueData_tx, portMAX_DELAY);
 80070a6:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <RFIDTask+0xac>)
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	2300      	movs	r3, #0
 80070ac:	f04f 32ff 	mov.w	r2, #4294967295
 80070b0:	490a      	ldr	r1, [pc, #40]	; (80070dc <RFIDTask+0xa0>)
 80070b2:	f7fd f8b3 	bl	800421c <xQueueGenericSend>
 80070b6:	4603      	mov	r3, r0
 80070b8:	4a0c      	ldr	r2, [pc, #48]	; (80070ec <RFIDTask+0xb0>)
 80070ba:	6013      	str	r3, [r2, #0]
		if (xStatus != pdPASS) {
 80070bc:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <RFIDTask+0xb0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d002      	beq.n	80070ca <RFIDTask+0x8e>
			printf("RFID CtrlqueueData_tx fail");
 80070c4:	480a      	ldr	r0, [pc, #40]	; (80070f0 <RFIDTask+0xb4>)
 80070c6:	f000 f855 	bl	8007174 <iprintf>
		}


     vTaskDelay(20);
 80070ca:	2014      	movs	r0, #20
 80070cc:	f7fd fe58 	bl	8004d80 <vTaskDelay>
		if(xQueueReceive(Ctrl_RFID_Queue, &CtrlqueueData_rx, portMAX_DELAY)== pdPASS)
 80070d0:	e7b8      	b.n	8007044 <RFIDTask+0x8>
 80070d2:	bf00      	nop
 80070d4:	20000180 	.word	0x20000180
 80070d8:	20000064 	.word	0x20000064
 80070dc:	20000080 	.word	0x20000080
 80070e0:	08008640 	.word	0x08008640
 80070e4:	20013404 	.word	0x20013404
 80070e8:	20000184 	.word	0x20000184
 80070ec:	20013400 	.word	0x20013400
 80070f0:	0800864c 	.word	0x0800864c

080070f4 <__errno>:
 80070f4:	4b01      	ldr	r3, [pc, #4]	; (80070fc <__errno+0x8>)
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	2000009c 	.word	0x2000009c

08007100 <__libc_init_array>:
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	4d0d      	ldr	r5, [pc, #52]	; (8007138 <__libc_init_array+0x38>)
 8007104:	4c0d      	ldr	r4, [pc, #52]	; (800713c <__libc_init_array+0x3c>)
 8007106:	1b64      	subs	r4, r4, r5
 8007108:	10a4      	asrs	r4, r4, #2
 800710a:	2600      	movs	r6, #0
 800710c:	42a6      	cmp	r6, r4
 800710e:	d109      	bne.n	8007124 <__libc_init_array+0x24>
 8007110:	4d0b      	ldr	r5, [pc, #44]	; (8007140 <__libc_init_array+0x40>)
 8007112:	4c0c      	ldr	r4, [pc, #48]	; (8007144 <__libc_init_array+0x44>)
 8007114:	f001 f83a 	bl	800818c <_init>
 8007118:	1b64      	subs	r4, r4, r5
 800711a:	10a4      	asrs	r4, r4, #2
 800711c:	2600      	movs	r6, #0
 800711e:	42a6      	cmp	r6, r4
 8007120:	d105      	bne.n	800712e <__libc_init_array+0x2e>
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	f855 3b04 	ldr.w	r3, [r5], #4
 8007128:	4798      	blx	r3
 800712a:	3601      	adds	r6, #1
 800712c:	e7ee      	b.n	800710c <__libc_init_array+0xc>
 800712e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007132:	4798      	blx	r3
 8007134:	3601      	adds	r6, #1
 8007136:	e7f2      	b.n	800711e <__libc_init_array+0x1e>
 8007138:	08009798 	.word	0x08009798
 800713c:	08009798 	.word	0x08009798
 8007140:	08009798 	.word	0x08009798
 8007144:	0800979c 	.word	0x0800979c

08007148 <memcpy>:
 8007148:	440a      	add	r2, r1
 800714a:	4291      	cmp	r1, r2
 800714c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007150:	d100      	bne.n	8007154 <memcpy+0xc>
 8007152:	4770      	bx	lr
 8007154:	b510      	push	{r4, lr}
 8007156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800715a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800715e:	4291      	cmp	r1, r2
 8007160:	d1f9      	bne.n	8007156 <memcpy+0xe>
 8007162:	bd10      	pop	{r4, pc}

08007164 <memset>:
 8007164:	4402      	add	r2, r0
 8007166:	4603      	mov	r3, r0
 8007168:	4293      	cmp	r3, r2
 800716a:	d100      	bne.n	800716e <memset+0xa>
 800716c:	4770      	bx	lr
 800716e:	f803 1b01 	strb.w	r1, [r3], #1
 8007172:	e7f9      	b.n	8007168 <memset+0x4>

08007174 <iprintf>:
 8007174:	b40f      	push	{r0, r1, r2, r3}
 8007176:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <iprintf+0x2c>)
 8007178:	b513      	push	{r0, r1, r4, lr}
 800717a:	681c      	ldr	r4, [r3, #0]
 800717c:	b124      	cbz	r4, 8007188 <iprintf+0x14>
 800717e:	69a3      	ldr	r3, [r4, #24]
 8007180:	b913      	cbnz	r3, 8007188 <iprintf+0x14>
 8007182:	4620      	mov	r0, r4
 8007184:	f000 fa66 	bl	8007654 <__sinit>
 8007188:	ab05      	add	r3, sp, #20
 800718a:	9a04      	ldr	r2, [sp, #16]
 800718c:	68a1      	ldr	r1, [r4, #8]
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fc6f 	bl	8007a74 <_vfiprintf_r>
 8007196:	b002      	add	sp, #8
 8007198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800719c:	b004      	add	sp, #16
 800719e:	4770      	bx	lr
 80071a0:	2000009c 	.word	0x2000009c

080071a4 <_puts_r>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	460e      	mov	r6, r1
 80071a8:	4605      	mov	r5, r0
 80071aa:	b118      	cbz	r0, 80071b4 <_puts_r+0x10>
 80071ac:	6983      	ldr	r3, [r0, #24]
 80071ae:	b90b      	cbnz	r3, 80071b4 <_puts_r+0x10>
 80071b0:	f000 fa50 	bl	8007654 <__sinit>
 80071b4:	69ab      	ldr	r3, [r5, #24]
 80071b6:	68ac      	ldr	r4, [r5, #8]
 80071b8:	b913      	cbnz	r3, 80071c0 <_puts_r+0x1c>
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 fa4a 	bl	8007654 <__sinit>
 80071c0:	4b2c      	ldr	r3, [pc, #176]	; (8007274 <_puts_r+0xd0>)
 80071c2:	429c      	cmp	r4, r3
 80071c4:	d120      	bne.n	8007208 <_puts_r+0x64>
 80071c6:	686c      	ldr	r4, [r5, #4]
 80071c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ca:	07db      	lsls	r3, r3, #31
 80071cc:	d405      	bmi.n	80071da <_puts_r+0x36>
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	0598      	lsls	r0, r3, #22
 80071d2:	d402      	bmi.n	80071da <_puts_r+0x36>
 80071d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071d6:	f000 fadb 	bl	8007790 <__retarget_lock_acquire_recursive>
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	0719      	lsls	r1, r3, #28
 80071de:	d51d      	bpl.n	800721c <_puts_r+0x78>
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	b1db      	cbz	r3, 800721c <_puts_r+0x78>
 80071e4:	3e01      	subs	r6, #1
 80071e6:	68a3      	ldr	r3, [r4, #8]
 80071e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071ec:	3b01      	subs	r3, #1
 80071ee:	60a3      	str	r3, [r4, #8]
 80071f0:	bb39      	cbnz	r1, 8007242 <_puts_r+0x9e>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	da38      	bge.n	8007268 <_puts_r+0xc4>
 80071f6:	4622      	mov	r2, r4
 80071f8:	210a      	movs	r1, #10
 80071fa:	4628      	mov	r0, r5
 80071fc:	f000 f850 	bl	80072a0 <__swbuf_r>
 8007200:	3001      	adds	r0, #1
 8007202:	d011      	beq.n	8007228 <_puts_r+0x84>
 8007204:	250a      	movs	r5, #10
 8007206:	e011      	b.n	800722c <_puts_r+0x88>
 8007208:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <_puts_r+0xd4>)
 800720a:	429c      	cmp	r4, r3
 800720c:	d101      	bne.n	8007212 <_puts_r+0x6e>
 800720e:	68ac      	ldr	r4, [r5, #8]
 8007210:	e7da      	b.n	80071c8 <_puts_r+0x24>
 8007212:	4b1a      	ldr	r3, [pc, #104]	; (800727c <_puts_r+0xd8>)
 8007214:	429c      	cmp	r4, r3
 8007216:	bf08      	it	eq
 8007218:	68ec      	ldreq	r4, [r5, #12]
 800721a:	e7d5      	b.n	80071c8 <_puts_r+0x24>
 800721c:	4621      	mov	r1, r4
 800721e:	4628      	mov	r0, r5
 8007220:	f000 f890 	bl	8007344 <__swsetup_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	d0dd      	beq.n	80071e4 <_puts_r+0x40>
 8007228:	f04f 35ff 	mov.w	r5, #4294967295
 800722c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800722e:	07da      	lsls	r2, r3, #31
 8007230:	d405      	bmi.n	800723e <_puts_r+0x9a>
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	059b      	lsls	r3, r3, #22
 8007236:	d402      	bmi.n	800723e <_puts_r+0x9a>
 8007238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800723a:	f000 faaa 	bl	8007792 <__retarget_lock_release_recursive>
 800723e:	4628      	mov	r0, r5
 8007240:	bd70      	pop	{r4, r5, r6, pc}
 8007242:	2b00      	cmp	r3, #0
 8007244:	da04      	bge.n	8007250 <_puts_r+0xac>
 8007246:	69a2      	ldr	r2, [r4, #24]
 8007248:	429a      	cmp	r2, r3
 800724a:	dc06      	bgt.n	800725a <_puts_r+0xb6>
 800724c:	290a      	cmp	r1, #10
 800724e:	d004      	beq.n	800725a <_puts_r+0xb6>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	6022      	str	r2, [r4, #0]
 8007256:	7019      	strb	r1, [r3, #0]
 8007258:	e7c5      	b.n	80071e6 <_puts_r+0x42>
 800725a:	4622      	mov	r2, r4
 800725c:	4628      	mov	r0, r5
 800725e:	f000 f81f 	bl	80072a0 <__swbuf_r>
 8007262:	3001      	adds	r0, #1
 8007264:	d1bf      	bne.n	80071e6 <_puts_r+0x42>
 8007266:	e7df      	b.n	8007228 <_puts_r+0x84>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	250a      	movs	r5, #10
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	6022      	str	r2, [r4, #0]
 8007270:	701d      	strb	r5, [r3, #0]
 8007272:	e7db      	b.n	800722c <_puts_r+0x88>
 8007274:	0800971c 	.word	0x0800971c
 8007278:	0800973c 	.word	0x0800973c
 800727c:	080096fc 	.word	0x080096fc

08007280 <puts>:
 8007280:	4b02      	ldr	r3, [pc, #8]	; (800728c <puts+0xc>)
 8007282:	4601      	mov	r1, r0
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	f7ff bf8d 	b.w	80071a4 <_puts_r>
 800728a:	bf00      	nop
 800728c:	2000009c 	.word	0x2000009c

08007290 <strcpy>:
 8007290:	4603      	mov	r3, r0
 8007292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007296:	f803 2b01 	strb.w	r2, [r3], #1
 800729a:	2a00      	cmp	r2, #0
 800729c:	d1f9      	bne.n	8007292 <strcpy+0x2>
 800729e:	4770      	bx	lr

080072a0 <__swbuf_r>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	460e      	mov	r6, r1
 80072a4:	4614      	mov	r4, r2
 80072a6:	4605      	mov	r5, r0
 80072a8:	b118      	cbz	r0, 80072b2 <__swbuf_r+0x12>
 80072aa:	6983      	ldr	r3, [r0, #24]
 80072ac:	b90b      	cbnz	r3, 80072b2 <__swbuf_r+0x12>
 80072ae:	f000 f9d1 	bl	8007654 <__sinit>
 80072b2:	4b21      	ldr	r3, [pc, #132]	; (8007338 <__swbuf_r+0x98>)
 80072b4:	429c      	cmp	r4, r3
 80072b6:	d12b      	bne.n	8007310 <__swbuf_r+0x70>
 80072b8:	686c      	ldr	r4, [r5, #4]
 80072ba:	69a3      	ldr	r3, [r4, #24]
 80072bc:	60a3      	str	r3, [r4, #8]
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	071a      	lsls	r2, r3, #28
 80072c2:	d52f      	bpl.n	8007324 <__swbuf_r+0x84>
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	b36b      	cbz	r3, 8007324 <__swbuf_r+0x84>
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	6820      	ldr	r0, [r4, #0]
 80072cc:	1ac0      	subs	r0, r0, r3
 80072ce:	6963      	ldr	r3, [r4, #20]
 80072d0:	b2f6      	uxtb	r6, r6
 80072d2:	4283      	cmp	r3, r0
 80072d4:	4637      	mov	r7, r6
 80072d6:	dc04      	bgt.n	80072e2 <__swbuf_r+0x42>
 80072d8:	4621      	mov	r1, r4
 80072da:	4628      	mov	r0, r5
 80072dc:	f000 f926 	bl	800752c <_fflush_r>
 80072e0:	bb30      	cbnz	r0, 8007330 <__swbuf_r+0x90>
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	60a3      	str	r3, [r4, #8]
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	6022      	str	r2, [r4, #0]
 80072ee:	701e      	strb	r6, [r3, #0]
 80072f0:	6963      	ldr	r3, [r4, #20]
 80072f2:	3001      	adds	r0, #1
 80072f4:	4283      	cmp	r3, r0
 80072f6:	d004      	beq.n	8007302 <__swbuf_r+0x62>
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	07db      	lsls	r3, r3, #31
 80072fc:	d506      	bpl.n	800730c <__swbuf_r+0x6c>
 80072fe:	2e0a      	cmp	r6, #10
 8007300:	d104      	bne.n	800730c <__swbuf_r+0x6c>
 8007302:	4621      	mov	r1, r4
 8007304:	4628      	mov	r0, r5
 8007306:	f000 f911 	bl	800752c <_fflush_r>
 800730a:	b988      	cbnz	r0, 8007330 <__swbuf_r+0x90>
 800730c:	4638      	mov	r0, r7
 800730e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <__swbuf_r+0x9c>)
 8007312:	429c      	cmp	r4, r3
 8007314:	d101      	bne.n	800731a <__swbuf_r+0x7a>
 8007316:	68ac      	ldr	r4, [r5, #8]
 8007318:	e7cf      	b.n	80072ba <__swbuf_r+0x1a>
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <__swbuf_r+0xa0>)
 800731c:	429c      	cmp	r4, r3
 800731e:	bf08      	it	eq
 8007320:	68ec      	ldreq	r4, [r5, #12]
 8007322:	e7ca      	b.n	80072ba <__swbuf_r+0x1a>
 8007324:	4621      	mov	r1, r4
 8007326:	4628      	mov	r0, r5
 8007328:	f000 f80c 	bl	8007344 <__swsetup_r>
 800732c:	2800      	cmp	r0, #0
 800732e:	d0cb      	beq.n	80072c8 <__swbuf_r+0x28>
 8007330:	f04f 37ff 	mov.w	r7, #4294967295
 8007334:	e7ea      	b.n	800730c <__swbuf_r+0x6c>
 8007336:	bf00      	nop
 8007338:	0800971c 	.word	0x0800971c
 800733c:	0800973c 	.word	0x0800973c
 8007340:	080096fc 	.word	0x080096fc

08007344 <__swsetup_r>:
 8007344:	4b32      	ldr	r3, [pc, #200]	; (8007410 <__swsetup_r+0xcc>)
 8007346:	b570      	push	{r4, r5, r6, lr}
 8007348:	681d      	ldr	r5, [r3, #0]
 800734a:	4606      	mov	r6, r0
 800734c:	460c      	mov	r4, r1
 800734e:	b125      	cbz	r5, 800735a <__swsetup_r+0x16>
 8007350:	69ab      	ldr	r3, [r5, #24]
 8007352:	b913      	cbnz	r3, 800735a <__swsetup_r+0x16>
 8007354:	4628      	mov	r0, r5
 8007356:	f000 f97d 	bl	8007654 <__sinit>
 800735a:	4b2e      	ldr	r3, [pc, #184]	; (8007414 <__swsetup_r+0xd0>)
 800735c:	429c      	cmp	r4, r3
 800735e:	d10f      	bne.n	8007380 <__swsetup_r+0x3c>
 8007360:	686c      	ldr	r4, [r5, #4]
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007368:	0719      	lsls	r1, r3, #28
 800736a:	d42c      	bmi.n	80073c6 <__swsetup_r+0x82>
 800736c:	06dd      	lsls	r5, r3, #27
 800736e:	d411      	bmi.n	8007394 <__swsetup_r+0x50>
 8007370:	2309      	movs	r3, #9
 8007372:	6033      	str	r3, [r6, #0]
 8007374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007378:	81a3      	strh	r3, [r4, #12]
 800737a:	f04f 30ff 	mov.w	r0, #4294967295
 800737e:	e03e      	b.n	80073fe <__swsetup_r+0xba>
 8007380:	4b25      	ldr	r3, [pc, #148]	; (8007418 <__swsetup_r+0xd4>)
 8007382:	429c      	cmp	r4, r3
 8007384:	d101      	bne.n	800738a <__swsetup_r+0x46>
 8007386:	68ac      	ldr	r4, [r5, #8]
 8007388:	e7eb      	b.n	8007362 <__swsetup_r+0x1e>
 800738a:	4b24      	ldr	r3, [pc, #144]	; (800741c <__swsetup_r+0xd8>)
 800738c:	429c      	cmp	r4, r3
 800738e:	bf08      	it	eq
 8007390:	68ec      	ldreq	r4, [r5, #12]
 8007392:	e7e6      	b.n	8007362 <__swsetup_r+0x1e>
 8007394:	0758      	lsls	r0, r3, #29
 8007396:	d512      	bpl.n	80073be <__swsetup_r+0x7a>
 8007398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800739a:	b141      	cbz	r1, 80073ae <__swsetup_r+0x6a>
 800739c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073a0:	4299      	cmp	r1, r3
 80073a2:	d002      	beq.n	80073aa <__swsetup_r+0x66>
 80073a4:	4630      	mov	r0, r6
 80073a6:	f000 fa5b 	bl	8007860 <_free_r>
 80073aa:	2300      	movs	r3, #0
 80073ac:	6363      	str	r3, [r4, #52]	; 0x34
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	2300      	movs	r3, #0
 80073b8:	6063      	str	r3, [r4, #4]
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f043 0308 	orr.w	r3, r3, #8
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	6923      	ldr	r3, [r4, #16]
 80073c8:	b94b      	cbnz	r3, 80073de <__swsetup_r+0x9a>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d4:	d003      	beq.n	80073de <__swsetup_r+0x9a>
 80073d6:	4621      	mov	r1, r4
 80073d8:	4630      	mov	r0, r6
 80073da:	f000 fa01 	bl	80077e0 <__smakebuf_r>
 80073de:	89a0      	ldrh	r0, [r4, #12]
 80073e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e4:	f010 0301 	ands.w	r3, r0, #1
 80073e8:	d00a      	beq.n	8007400 <__swsetup_r+0xbc>
 80073ea:	2300      	movs	r3, #0
 80073ec:	60a3      	str	r3, [r4, #8]
 80073ee:	6963      	ldr	r3, [r4, #20]
 80073f0:	425b      	negs	r3, r3
 80073f2:	61a3      	str	r3, [r4, #24]
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	b943      	cbnz	r3, 800740a <__swsetup_r+0xc6>
 80073f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073fc:	d1ba      	bne.n	8007374 <__swsetup_r+0x30>
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	0781      	lsls	r1, r0, #30
 8007402:	bf58      	it	pl
 8007404:	6963      	ldrpl	r3, [r4, #20]
 8007406:	60a3      	str	r3, [r4, #8]
 8007408:	e7f4      	b.n	80073f4 <__swsetup_r+0xb0>
 800740a:	2000      	movs	r0, #0
 800740c:	e7f7      	b.n	80073fe <__swsetup_r+0xba>
 800740e:	bf00      	nop
 8007410:	2000009c 	.word	0x2000009c
 8007414:	0800971c 	.word	0x0800971c
 8007418:	0800973c 	.word	0x0800973c
 800741c:	080096fc 	.word	0x080096fc

08007420 <__sflush_r>:
 8007420:	898a      	ldrh	r2, [r1, #12]
 8007422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007426:	4605      	mov	r5, r0
 8007428:	0710      	lsls	r0, r2, #28
 800742a:	460c      	mov	r4, r1
 800742c:	d458      	bmi.n	80074e0 <__sflush_r+0xc0>
 800742e:	684b      	ldr	r3, [r1, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	dc05      	bgt.n	8007440 <__sflush_r+0x20>
 8007434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	dc02      	bgt.n	8007440 <__sflush_r+0x20>
 800743a:	2000      	movs	r0, #0
 800743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007442:	2e00      	cmp	r6, #0
 8007444:	d0f9      	beq.n	800743a <__sflush_r+0x1a>
 8007446:	2300      	movs	r3, #0
 8007448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800744c:	682f      	ldr	r7, [r5, #0]
 800744e:	602b      	str	r3, [r5, #0]
 8007450:	d032      	beq.n	80074b8 <__sflush_r+0x98>
 8007452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	075a      	lsls	r2, r3, #29
 8007458:	d505      	bpl.n	8007466 <__sflush_r+0x46>
 800745a:	6863      	ldr	r3, [r4, #4]
 800745c:	1ac0      	subs	r0, r0, r3
 800745e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007460:	b10b      	cbz	r3, 8007466 <__sflush_r+0x46>
 8007462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007464:	1ac0      	subs	r0, r0, r3
 8007466:	2300      	movs	r3, #0
 8007468:	4602      	mov	r2, r0
 800746a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800746c:	6a21      	ldr	r1, [r4, #32]
 800746e:	4628      	mov	r0, r5
 8007470:	47b0      	blx	r6
 8007472:	1c43      	adds	r3, r0, #1
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	d106      	bne.n	8007486 <__sflush_r+0x66>
 8007478:	6829      	ldr	r1, [r5, #0]
 800747a:	291d      	cmp	r1, #29
 800747c:	d82c      	bhi.n	80074d8 <__sflush_r+0xb8>
 800747e:	4a2a      	ldr	r2, [pc, #168]	; (8007528 <__sflush_r+0x108>)
 8007480:	40ca      	lsrs	r2, r1
 8007482:	07d6      	lsls	r6, r2, #31
 8007484:	d528      	bpl.n	80074d8 <__sflush_r+0xb8>
 8007486:	2200      	movs	r2, #0
 8007488:	6062      	str	r2, [r4, #4]
 800748a:	04d9      	lsls	r1, r3, #19
 800748c:	6922      	ldr	r2, [r4, #16]
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	d504      	bpl.n	800749c <__sflush_r+0x7c>
 8007492:	1c42      	adds	r2, r0, #1
 8007494:	d101      	bne.n	800749a <__sflush_r+0x7a>
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	b903      	cbnz	r3, 800749c <__sflush_r+0x7c>
 800749a:	6560      	str	r0, [r4, #84]	; 0x54
 800749c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800749e:	602f      	str	r7, [r5, #0]
 80074a0:	2900      	cmp	r1, #0
 80074a2:	d0ca      	beq.n	800743a <__sflush_r+0x1a>
 80074a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a8:	4299      	cmp	r1, r3
 80074aa:	d002      	beq.n	80074b2 <__sflush_r+0x92>
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 f9d7 	bl	8007860 <_free_r>
 80074b2:	2000      	movs	r0, #0
 80074b4:	6360      	str	r0, [r4, #52]	; 0x34
 80074b6:	e7c1      	b.n	800743c <__sflush_r+0x1c>
 80074b8:	6a21      	ldr	r1, [r4, #32]
 80074ba:	2301      	movs	r3, #1
 80074bc:	4628      	mov	r0, r5
 80074be:	47b0      	blx	r6
 80074c0:	1c41      	adds	r1, r0, #1
 80074c2:	d1c7      	bne.n	8007454 <__sflush_r+0x34>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0c4      	beq.n	8007454 <__sflush_r+0x34>
 80074ca:	2b1d      	cmp	r3, #29
 80074cc:	d001      	beq.n	80074d2 <__sflush_r+0xb2>
 80074ce:	2b16      	cmp	r3, #22
 80074d0:	d101      	bne.n	80074d6 <__sflush_r+0xb6>
 80074d2:	602f      	str	r7, [r5, #0]
 80074d4:	e7b1      	b.n	800743a <__sflush_r+0x1a>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	e7ad      	b.n	800743c <__sflush_r+0x1c>
 80074e0:	690f      	ldr	r7, [r1, #16]
 80074e2:	2f00      	cmp	r7, #0
 80074e4:	d0a9      	beq.n	800743a <__sflush_r+0x1a>
 80074e6:	0793      	lsls	r3, r2, #30
 80074e8:	680e      	ldr	r6, [r1, #0]
 80074ea:	bf08      	it	eq
 80074ec:	694b      	ldreq	r3, [r1, #20]
 80074ee:	600f      	str	r7, [r1, #0]
 80074f0:	bf18      	it	ne
 80074f2:	2300      	movne	r3, #0
 80074f4:	eba6 0807 	sub.w	r8, r6, r7
 80074f8:	608b      	str	r3, [r1, #8]
 80074fa:	f1b8 0f00 	cmp.w	r8, #0
 80074fe:	dd9c      	ble.n	800743a <__sflush_r+0x1a>
 8007500:	6a21      	ldr	r1, [r4, #32]
 8007502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007504:	4643      	mov	r3, r8
 8007506:	463a      	mov	r2, r7
 8007508:	4628      	mov	r0, r5
 800750a:	47b0      	blx	r6
 800750c:	2800      	cmp	r0, #0
 800750e:	dc06      	bgt.n	800751e <__sflush_r+0xfe>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	e78e      	b.n	800743c <__sflush_r+0x1c>
 800751e:	4407      	add	r7, r0
 8007520:	eba8 0800 	sub.w	r8, r8, r0
 8007524:	e7e9      	b.n	80074fa <__sflush_r+0xda>
 8007526:	bf00      	nop
 8007528:	20400001 	.word	0x20400001

0800752c <_fflush_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	690b      	ldr	r3, [r1, #16]
 8007530:	4605      	mov	r5, r0
 8007532:	460c      	mov	r4, r1
 8007534:	b913      	cbnz	r3, 800753c <_fflush_r+0x10>
 8007536:	2500      	movs	r5, #0
 8007538:	4628      	mov	r0, r5
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	b118      	cbz	r0, 8007546 <_fflush_r+0x1a>
 800753e:	6983      	ldr	r3, [r0, #24]
 8007540:	b90b      	cbnz	r3, 8007546 <_fflush_r+0x1a>
 8007542:	f000 f887 	bl	8007654 <__sinit>
 8007546:	4b14      	ldr	r3, [pc, #80]	; (8007598 <_fflush_r+0x6c>)
 8007548:	429c      	cmp	r4, r3
 800754a:	d11b      	bne.n	8007584 <_fflush_r+0x58>
 800754c:	686c      	ldr	r4, [r5, #4]
 800754e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0ef      	beq.n	8007536 <_fflush_r+0xa>
 8007556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007558:	07d0      	lsls	r0, r2, #31
 800755a:	d404      	bmi.n	8007566 <_fflush_r+0x3a>
 800755c:	0599      	lsls	r1, r3, #22
 800755e:	d402      	bmi.n	8007566 <_fflush_r+0x3a>
 8007560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007562:	f000 f915 	bl	8007790 <__retarget_lock_acquire_recursive>
 8007566:	4628      	mov	r0, r5
 8007568:	4621      	mov	r1, r4
 800756a:	f7ff ff59 	bl	8007420 <__sflush_r>
 800756e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007570:	07da      	lsls	r2, r3, #31
 8007572:	4605      	mov	r5, r0
 8007574:	d4e0      	bmi.n	8007538 <_fflush_r+0xc>
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	059b      	lsls	r3, r3, #22
 800757a:	d4dd      	bmi.n	8007538 <_fflush_r+0xc>
 800757c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757e:	f000 f908 	bl	8007792 <__retarget_lock_release_recursive>
 8007582:	e7d9      	b.n	8007538 <_fflush_r+0xc>
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <_fflush_r+0x70>)
 8007586:	429c      	cmp	r4, r3
 8007588:	d101      	bne.n	800758e <_fflush_r+0x62>
 800758a:	68ac      	ldr	r4, [r5, #8]
 800758c:	e7df      	b.n	800754e <_fflush_r+0x22>
 800758e:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <_fflush_r+0x74>)
 8007590:	429c      	cmp	r4, r3
 8007592:	bf08      	it	eq
 8007594:	68ec      	ldreq	r4, [r5, #12]
 8007596:	e7da      	b.n	800754e <_fflush_r+0x22>
 8007598:	0800971c 	.word	0x0800971c
 800759c:	0800973c 	.word	0x0800973c
 80075a0:	080096fc 	.word	0x080096fc

080075a4 <std>:
 80075a4:	2300      	movs	r3, #0
 80075a6:	b510      	push	{r4, lr}
 80075a8:	4604      	mov	r4, r0
 80075aa:	e9c0 3300 	strd	r3, r3, [r0]
 80075ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075b2:	6083      	str	r3, [r0, #8]
 80075b4:	8181      	strh	r1, [r0, #12]
 80075b6:	6643      	str	r3, [r0, #100]	; 0x64
 80075b8:	81c2      	strh	r2, [r0, #14]
 80075ba:	6183      	str	r3, [r0, #24]
 80075bc:	4619      	mov	r1, r3
 80075be:	2208      	movs	r2, #8
 80075c0:	305c      	adds	r0, #92	; 0x5c
 80075c2:	f7ff fdcf 	bl	8007164 <memset>
 80075c6:	4b05      	ldr	r3, [pc, #20]	; (80075dc <std+0x38>)
 80075c8:	6263      	str	r3, [r4, #36]	; 0x24
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <std+0x3c>)
 80075cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ce:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <std+0x40>)
 80075d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <std+0x44>)
 80075d4:	6224      	str	r4, [r4, #32]
 80075d6:	6323      	str	r3, [r4, #48]	; 0x30
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	bf00      	nop
 80075dc:	0800801d 	.word	0x0800801d
 80075e0:	0800803f 	.word	0x0800803f
 80075e4:	08008077 	.word	0x08008077
 80075e8:	0800809b 	.word	0x0800809b

080075ec <_cleanup_r>:
 80075ec:	4901      	ldr	r1, [pc, #4]	; (80075f4 <_cleanup_r+0x8>)
 80075ee:	f000 b8af 	b.w	8007750 <_fwalk_reent>
 80075f2:	bf00      	nop
 80075f4:	0800752d 	.word	0x0800752d

080075f8 <__sfmoreglue>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	2268      	movs	r2, #104	; 0x68
 80075fc:	1e4d      	subs	r5, r1, #1
 80075fe:	4355      	muls	r5, r2
 8007600:	460e      	mov	r6, r1
 8007602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007606:	f000 f997 	bl	8007938 <_malloc_r>
 800760a:	4604      	mov	r4, r0
 800760c:	b140      	cbz	r0, 8007620 <__sfmoreglue+0x28>
 800760e:	2100      	movs	r1, #0
 8007610:	e9c0 1600 	strd	r1, r6, [r0]
 8007614:	300c      	adds	r0, #12
 8007616:	60a0      	str	r0, [r4, #8]
 8007618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800761c:	f7ff fda2 	bl	8007164 <memset>
 8007620:	4620      	mov	r0, r4
 8007622:	bd70      	pop	{r4, r5, r6, pc}

08007624 <__sfp_lock_acquire>:
 8007624:	4801      	ldr	r0, [pc, #4]	; (800762c <__sfp_lock_acquire+0x8>)
 8007626:	f000 b8b3 	b.w	8007790 <__retarget_lock_acquire_recursive>
 800762a:	bf00      	nop
 800762c:	20013409 	.word	0x20013409

08007630 <__sfp_lock_release>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__sfp_lock_release+0x8>)
 8007632:	f000 b8ae 	b.w	8007792 <__retarget_lock_release_recursive>
 8007636:	bf00      	nop
 8007638:	20013409 	.word	0x20013409

0800763c <__sinit_lock_acquire>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__sinit_lock_acquire+0x8>)
 800763e:	f000 b8a7 	b.w	8007790 <__retarget_lock_acquire_recursive>
 8007642:	bf00      	nop
 8007644:	2001340a 	.word	0x2001340a

08007648 <__sinit_lock_release>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__sinit_lock_release+0x8>)
 800764a:	f000 b8a2 	b.w	8007792 <__retarget_lock_release_recursive>
 800764e:	bf00      	nop
 8007650:	2001340a 	.word	0x2001340a

08007654 <__sinit>:
 8007654:	b510      	push	{r4, lr}
 8007656:	4604      	mov	r4, r0
 8007658:	f7ff fff0 	bl	800763c <__sinit_lock_acquire>
 800765c:	69a3      	ldr	r3, [r4, #24]
 800765e:	b11b      	cbz	r3, 8007668 <__sinit+0x14>
 8007660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007664:	f7ff bff0 	b.w	8007648 <__sinit_lock_release>
 8007668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800766c:	6523      	str	r3, [r4, #80]	; 0x50
 800766e:	4b13      	ldr	r3, [pc, #76]	; (80076bc <__sinit+0x68>)
 8007670:	4a13      	ldr	r2, [pc, #76]	; (80076c0 <__sinit+0x6c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	62a2      	str	r2, [r4, #40]	; 0x28
 8007676:	42a3      	cmp	r3, r4
 8007678:	bf04      	itt	eq
 800767a:	2301      	moveq	r3, #1
 800767c:	61a3      	streq	r3, [r4, #24]
 800767e:	4620      	mov	r0, r4
 8007680:	f000 f820 	bl	80076c4 <__sfp>
 8007684:	6060      	str	r0, [r4, #4]
 8007686:	4620      	mov	r0, r4
 8007688:	f000 f81c 	bl	80076c4 <__sfp>
 800768c:	60a0      	str	r0, [r4, #8]
 800768e:	4620      	mov	r0, r4
 8007690:	f000 f818 	bl	80076c4 <__sfp>
 8007694:	2200      	movs	r2, #0
 8007696:	60e0      	str	r0, [r4, #12]
 8007698:	2104      	movs	r1, #4
 800769a:	6860      	ldr	r0, [r4, #4]
 800769c:	f7ff ff82 	bl	80075a4 <std>
 80076a0:	68a0      	ldr	r0, [r4, #8]
 80076a2:	2201      	movs	r2, #1
 80076a4:	2109      	movs	r1, #9
 80076a6:	f7ff ff7d 	bl	80075a4 <std>
 80076aa:	68e0      	ldr	r0, [r4, #12]
 80076ac:	2202      	movs	r2, #2
 80076ae:	2112      	movs	r1, #18
 80076b0:	f7ff ff78 	bl	80075a4 <std>
 80076b4:	2301      	movs	r3, #1
 80076b6:	61a3      	str	r3, [r4, #24]
 80076b8:	e7d2      	b.n	8007660 <__sinit+0xc>
 80076ba:	bf00      	nop
 80076bc:	080096f8 	.word	0x080096f8
 80076c0:	080075ed 	.word	0x080075ed

080076c4 <__sfp>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	4607      	mov	r7, r0
 80076c8:	f7ff ffac 	bl	8007624 <__sfp_lock_acquire>
 80076cc:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <__sfp+0x84>)
 80076ce:	681e      	ldr	r6, [r3, #0]
 80076d0:	69b3      	ldr	r3, [r6, #24]
 80076d2:	b913      	cbnz	r3, 80076da <__sfp+0x16>
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7ff ffbd 	bl	8007654 <__sinit>
 80076da:	3648      	adds	r6, #72	; 0x48
 80076dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	d503      	bpl.n	80076ec <__sfp+0x28>
 80076e4:	6833      	ldr	r3, [r6, #0]
 80076e6:	b30b      	cbz	r3, 800772c <__sfp+0x68>
 80076e8:	6836      	ldr	r6, [r6, #0]
 80076ea:	e7f7      	b.n	80076dc <__sfp+0x18>
 80076ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076f0:	b9d5      	cbnz	r5, 8007728 <__sfp+0x64>
 80076f2:	4b16      	ldr	r3, [pc, #88]	; (800774c <__sfp+0x88>)
 80076f4:	60e3      	str	r3, [r4, #12]
 80076f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076fa:	6665      	str	r5, [r4, #100]	; 0x64
 80076fc:	f000 f847 	bl	800778e <__retarget_lock_init_recursive>
 8007700:	f7ff ff96 	bl	8007630 <__sfp_lock_release>
 8007704:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007708:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800770c:	6025      	str	r5, [r4, #0]
 800770e:	61a5      	str	r5, [r4, #24]
 8007710:	2208      	movs	r2, #8
 8007712:	4629      	mov	r1, r5
 8007714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007718:	f7ff fd24 	bl	8007164 <memset>
 800771c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007724:	4620      	mov	r0, r4
 8007726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007728:	3468      	adds	r4, #104	; 0x68
 800772a:	e7d9      	b.n	80076e0 <__sfp+0x1c>
 800772c:	2104      	movs	r1, #4
 800772e:	4638      	mov	r0, r7
 8007730:	f7ff ff62 	bl	80075f8 <__sfmoreglue>
 8007734:	4604      	mov	r4, r0
 8007736:	6030      	str	r0, [r6, #0]
 8007738:	2800      	cmp	r0, #0
 800773a:	d1d5      	bne.n	80076e8 <__sfp+0x24>
 800773c:	f7ff ff78 	bl	8007630 <__sfp_lock_release>
 8007740:	230c      	movs	r3, #12
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	e7ee      	b.n	8007724 <__sfp+0x60>
 8007746:	bf00      	nop
 8007748:	080096f8 	.word	0x080096f8
 800774c:	ffff0001 	.word	0xffff0001

08007750 <_fwalk_reent>:
 8007750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007754:	4606      	mov	r6, r0
 8007756:	4688      	mov	r8, r1
 8007758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800775c:	2700      	movs	r7, #0
 800775e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007762:	f1b9 0901 	subs.w	r9, r9, #1
 8007766:	d505      	bpl.n	8007774 <_fwalk_reent+0x24>
 8007768:	6824      	ldr	r4, [r4, #0]
 800776a:	2c00      	cmp	r4, #0
 800776c:	d1f7      	bne.n	800775e <_fwalk_reent+0xe>
 800776e:	4638      	mov	r0, r7
 8007770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007774:	89ab      	ldrh	r3, [r5, #12]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d907      	bls.n	800778a <_fwalk_reent+0x3a>
 800777a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800777e:	3301      	adds	r3, #1
 8007780:	d003      	beq.n	800778a <_fwalk_reent+0x3a>
 8007782:	4629      	mov	r1, r5
 8007784:	4630      	mov	r0, r6
 8007786:	47c0      	blx	r8
 8007788:	4307      	orrs	r7, r0
 800778a:	3568      	adds	r5, #104	; 0x68
 800778c:	e7e9      	b.n	8007762 <_fwalk_reent+0x12>

0800778e <__retarget_lock_init_recursive>:
 800778e:	4770      	bx	lr

08007790 <__retarget_lock_acquire_recursive>:
 8007790:	4770      	bx	lr

08007792 <__retarget_lock_release_recursive>:
 8007792:	4770      	bx	lr

08007794 <__swhatbuf_r>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	460e      	mov	r6, r1
 8007798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779c:	2900      	cmp	r1, #0
 800779e:	b096      	sub	sp, #88	; 0x58
 80077a0:	4614      	mov	r4, r2
 80077a2:	461d      	mov	r5, r3
 80077a4:	da08      	bge.n	80077b8 <__swhatbuf_r+0x24>
 80077a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	602a      	str	r2, [r5, #0]
 80077ae:	061a      	lsls	r2, r3, #24
 80077b0:	d410      	bmi.n	80077d4 <__swhatbuf_r+0x40>
 80077b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b6:	e00e      	b.n	80077d6 <__swhatbuf_r+0x42>
 80077b8:	466a      	mov	r2, sp
 80077ba:	f000 fc95 	bl	80080e8 <_fstat_r>
 80077be:	2800      	cmp	r0, #0
 80077c0:	dbf1      	blt.n	80077a6 <__swhatbuf_r+0x12>
 80077c2:	9a01      	ldr	r2, [sp, #4]
 80077c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077cc:	425a      	negs	r2, r3
 80077ce:	415a      	adcs	r2, r3
 80077d0:	602a      	str	r2, [r5, #0]
 80077d2:	e7ee      	b.n	80077b2 <__swhatbuf_r+0x1e>
 80077d4:	2340      	movs	r3, #64	; 0x40
 80077d6:	2000      	movs	r0, #0
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	b016      	add	sp, #88	; 0x58
 80077dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080077e0 <__smakebuf_r>:
 80077e0:	898b      	ldrh	r3, [r1, #12]
 80077e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077e4:	079d      	lsls	r5, r3, #30
 80077e6:	4606      	mov	r6, r0
 80077e8:	460c      	mov	r4, r1
 80077ea:	d507      	bpl.n	80077fc <__smakebuf_r+0x1c>
 80077ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	6123      	str	r3, [r4, #16]
 80077f4:	2301      	movs	r3, #1
 80077f6:	6163      	str	r3, [r4, #20]
 80077f8:	b002      	add	sp, #8
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	ab01      	add	r3, sp, #4
 80077fe:	466a      	mov	r2, sp
 8007800:	f7ff ffc8 	bl	8007794 <__swhatbuf_r>
 8007804:	9900      	ldr	r1, [sp, #0]
 8007806:	4605      	mov	r5, r0
 8007808:	4630      	mov	r0, r6
 800780a:	f000 f895 	bl	8007938 <_malloc_r>
 800780e:	b948      	cbnz	r0, 8007824 <__smakebuf_r+0x44>
 8007810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007814:	059a      	lsls	r2, r3, #22
 8007816:	d4ef      	bmi.n	80077f8 <__smakebuf_r+0x18>
 8007818:	f023 0303 	bic.w	r3, r3, #3
 800781c:	f043 0302 	orr.w	r3, r3, #2
 8007820:	81a3      	strh	r3, [r4, #12]
 8007822:	e7e3      	b.n	80077ec <__smakebuf_r+0xc>
 8007824:	4b0d      	ldr	r3, [pc, #52]	; (800785c <__smakebuf_r+0x7c>)
 8007826:	62b3      	str	r3, [r6, #40]	; 0x28
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	6020      	str	r0, [r4, #0]
 800782c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	9b00      	ldr	r3, [sp, #0]
 8007834:	6163      	str	r3, [r4, #20]
 8007836:	9b01      	ldr	r3, [sp, #4]
 8007838:	6120      	str	r0, [r4, #16]
 800783a:	b15b      	cbz	r3, 8007854 <__smakebuf_r+0x74>
 800783c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007840:	4630      	mov	r0, r6
 8007842:	f000 fc63 	bl	800810c <_isatty_r>
 8007846:	b128      	cbz	r0, 8007854 <__smakebuf_r+0x74>
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	f023 0303 	bic.w	r3, r3, #3
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	89a0      	ldrh	r0, [r4, #12]
 8007856:	4305      	orrs	r5, r0
 8007858:	81a5      	strh	r5, [r4, #12]
 800785a:	e7cd      	b.n	80077f8 <__smakebuf_r+0x18>
 800785c:	080075ed 	.word	0x080075ed

08007860 <_free_r>:
 8007860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007862:	2900      	cmp	r1, #0
 8007864:	d044      	beq.n	80078f0 <_free_r+0x90>
 8007866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800786a:	9001      	str	r0, [sp, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f1a1 0404 	sub.w	r4, r1, #4
 8007872:	bfb8      	it	lt
 8007874:	18e4      	addlt	r4, r4, r3
 8007876:	f000 fc6b 	bl	8008150 <__malloc_lock>
 800787a:	4a1e      	ldr	r2, [pc, #120]	; (80078f4 <_free_r+0x94>)
 800787c:	9801      	ldr	r0, [sp, #4]
 800787e:	6813      	ldr	r3, [r2, #0]
 8007880:	b933      	cbnz	r3, 8007890 <_free_r+0x30>
 8007882:	6063      	str	r3, [r4, #4]
 8007884:	6014      	str	r4, [r2, #0]
 8007886:	b003      	add	sp, #12
 8007888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800788c:	f000 bc66 	b.w	800815c <__malloc_unlock>
 8007890:	42a3      	cmp	r3, r4
 8007892:	d908      	bls.n	80078a6 <_free_r+0x46>
 8007894:	6825      	ldr	r5, [r4, #0]
 8007896:	1961      	adds	r1, r4, r5
 8007898:	428b      	cmp	r3, r1
 800789a:	bf01      	itttt	eq
 800789c:	6819      	ldreq	r1, [r3, #0]
 800789e:	685b      	ldreq	r3, [r3, #4]
 80078a0:	1949      	addeq	r1, r1, r5
 80078a2:	6021      	streq	r1, [r4, #0]
 80078a4:	e7ed      	b.n	8007882 <_free_r+0x22>
 80078a6:	461a      	mov	r2, r3
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	b10b      	cbz	r3, 80078b0 <_free_r+0x50>
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	d9fa      	bls.n	80078a6 <_free_r+0x46>
 80078b0:	6811      	ldr	r1, [r2, #0]
 80078b2:	1855      	adds	r5, r2, r1
 80078b4:	42a5      	cmp	r5, r4
 80078b6:	d10b      	bne.n	80078d0 <_free_r+0x70>
 80078b8:	6824      	ldr	r4, [r4, #0]
 80078ba:	4421      	add	r1, r4
 80078bc:	1854      	adds	r4, r2, r1
 80078be:	42a3      	cmp	r3, r4
 80078c0:	6011      	str	r1, [r2, #0]
 80078c2:	d1e0      	bne.n	8007886 <_free_r+0x26>
 80078c4:	681c      	ldr	r4, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	6053      	str	r3, [r2, #4]
 80078ca:	4421      	add	r1, r4
 80078cc:	6011      	str	r1, [r2, #0]
 80078ce:	e7da      	b.n	8007886 <_free_r+0x26>
 80078d0:	d902      	bls.n	80078d8 <_free_r+0x78>
 80078d2:	230c      	movs	r3, #12
 80078d4:	6003      	str	r3, [r0, #0]
 80078d6:	e7d6      	b.n	8007886 <_free_r+0x26>
 80078d8:	6825      	ldr	r5, [r4, #0]
 80078da:	1961      	adds	r1, r4, r5
 80078dc:	428b      	cmp	r3, r1
 80078de:	bf04      	itt	eq
 80078e0:	6819      	ldreq	r1, [r3, #0]
 80078e2:	685b      	ldreq	r3, [r3, #4]
 80078e4:	6063      	str	r3, [r4, #4]
 80078e6:	bf04      	itt	eq
 80078e8:	1949      	addeq	r1, r1, r5
 80078ea:	6021      	streq	r1, [r4, #0]
 80078ec:	6054      	str	r4, [r2, #4]
 80078ee:	e7ca      	b.n	8007886 <_free_r+0x26>
 80078f0:	b003      	add	sp, #12
 80078f2:	bd30      	pop	{r4, r5, pc}
 80078f4:	2001340c 	.word	0x2001340c

080078f8 <sbrk_aligned>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	4e0e      	ldr	r6, [pc, #56]	; (8007934 <sbrk_aligned+0x3c>)
 80078fc:	460c      	mov	r4, r1
 80078fe:	6831      	ldr	r1, [r6, #0]
 8007900:	4605      	mov	r5, r0
 8007902:	b911      	cbnz	r1, 800790a <sbrk_aligned+0x12>
 8007904:	f000 fb7a 	bl	8007ffc <_sbrk_r>
 8007908:	6030      	str	r0, [r6, #0]
 800790a:	4621      	mov	r1, r4
 800790c:	4628      	mov	r0, r5
 800790e:	f000 fb75 	bl	8007ffc <_sbrk_r>
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	d00a      	beq.n	800792c <sbrk_aligned+0x34>
 8007916:	1cc4      	adds	r4, r0, #3
 8007918:	f024 0403 	bic.w	r4, r4, #3
 800791c:	42a0      	cmp	r0, r4
 800791e:	d007      	beq.n	8007930 <sbrk_aligned+0x38>
 8007920:	1a21      	subs	r1, r4, r0
 8007922:	4628      	mov	r0, r5
 8007924:	f000 fb6a 	bl	8007ffc <_sbrk_r>
 8007928:	3001      	adds	r0, #1
 800792a:	d101      	bne.n	8007930 <sbrk_aligned+0x38>
 800792c:	f04f 34ff 	mov.w	r4, #4294967295
 8007930:	4620      	mov	r0, r4
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	20013410 	.word	0x20013410

08007938 <_malloc_r>:
 8007938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793c:	1ccd      	adds	r5, r1, #3
 800793e:	f025 0503 	bic.w	r5, r5, #3
 8007942:	3508      	adds	r5, #8
 8007944:	2d0c      	cmp	r5, #12
 8007946:	bf38      	it	cc
 8007948:	250c      	movcc	r5, #12
 800794a:	2d00      	cmp	r5, #0
 800794c:	4607      	mov	r7, r0
 800794e:	db01      	blt.n	8007954 <_malloc_r+0x1c>
 8007950:	42a9      	cmp	r1, r5
 8007952:	d905      	bls.n	8007960 <_malloc_r+0x28>
 8007954:	230c      	movs	r3, #12
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	2600      	movs	r6, #0
 800795a:	4630      	mov	r0, r6
 800795c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007960:	4e2e      	ldr	r6, [pc, #184]	; (8007a1c <_malloc_r+0xe4>)
 8007962:	f000 fbf5 	bl	8008150 <__malloc_lock>
 8007966:	6833      	ldr	r3, [r6, #0]
 8007968:	461c      	mov	r4, r3
 800796a:	bb34      	cbnz	r4, 80079ba <_malloc_r+0x82>
 800796c:	4629      	mov	r1, r5
 800796e:	4638      	mov	r0, r7
 8007970:	f7ff ffc2 	bl	80078f8 <sbrk_aligned>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	4604      	mov	r4, r0
 8007978:	d14d      	bne.n	8007a16 <_malloc_r+0xde>
 800797a:	6834      	ldr	r4, [r6, #0]
 800797c:	4626      	mov	r6, r4
 800797e:	2e00      	cmp	r6, #0
 8007980:	d140      	bne.n	8007a04 <_malloc_r+0xcc>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	4631      	mov	r1, r6
 8007986:	4638      	mov	r0, r7
 8007988:	eb04 0803 	add.w	r8, r4, r3
 800798c:	f000 fb36 	bl	8007ffc <_sbrk_r>
 8007990:	4580      	cmp	r8, r0
 8007992:	d13a      	bne.n	8007a0a <_malloc_r+0xd2>
 8007994:	6821      	ldr	r1, [r4, #0]
 8007996:	3503      	adds	r5, #3
 8007998:	1a6d      	subs	r5, r5, r1
 800799a:	f025 0503 	bic.w	r5, r5, #3
 800799e:	3508      	adds	r5, #8
 80079a0:	2d0c      	cmp	r5, #12
 80079a2:	bf38      	it	cc
 80079a4:	250c      	movcc	r5, #12
 80079a6:	4629      	mov	r1, r5
 80079a8:	4638      	mov	r0, r7
 80079aa:	f7ff ffa5 	bl	80078f8 <sbrk_aligned>
 80079ae:	3001      	adds	r0, #1
 80079b0:	d02b      	beq.n	8007a0a <_malloc_r+0xd2>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	442b      	add	r3, r5
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	e00e      	b.n	80079d8 <_malloc_r+0xa0>
 80079ba:	6822      	ldr	r2, [r4, #0]
 80079bc:	1b52      	subs	r2, r2, r5
 80079be:	d41e      	bmi.n	80079fe <_malloc_r+0xc6>
 80079c0:	2a0b      	cmp	r2, #11
 80079c2:	d916      	bls.n	80079f2 <_malloc_r+0xba>
 80079c4:	1961      	adds	r1, r4, r5
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	6025      	str	r5, [r4, #0]
 80079ca:	bf18      	it	ne
 80079cc:	6059      	strne	r1, [r3, #4]
 80079ce:	6863      	ldr	r3, [r4, #4]
 80079d0:	bf08      	it	eq
 80079d2:	6031      	streq	r1, [r6, #0]
 80079d4:	5162      	str	r2, [r4, r5]
 80079d6:	604b      	str	r3, [r1, #4]
 80079d8:	4638      	mov	r0, r7
 80079da:	f104 060b 	add.w	r6, r4, #11
 80079de:	f000 fbbd 	bl	800815c <__malloc_unlock>
 80079e2:	f026 0607 	bic.w	r6, r6, #7
 80079e6:	1d23      	adds	r3, r4, #4
 80079e8:	1af2      	subs	r2, r6, r3
 80079ea:	d0b6      	beq.n	800795a <_malloc_r+0x22>
 80079ec:	1b9b      	subs	r3, r3, r6
 80079ee:	50a3      	str	r3, [r4, r2]
 80079f0:	e7b3      	b.n	800795a <_malloc_r+0x22>
 80079f2:	6862      	ldr	r2, [r4, #4]
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	bf0c      	ite	eq
 80079f8:	6032      	streq	r2, [r6, #0]
 80079fa:	605a      	strne	r2, [r3, #4]
 80079fc:	e7ec      	b.n	80079d8 <_malloc_r+0xa0>
 80079fe:	4623      	mov	r3, r4
 8007a00:	6864      	ldr	r4, [r4, #4]
 8007a02:	e7b2      	b.n	800796a <_malloc_r+0x32>
 8007a04:	4634      	mov	r4, r6
 8007a06:	6876      	ldr	r6, [r6, #4]
 8007a08:	e7b9      	b.n	800797e <_malloc_r+0x46>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f000 fba4 	bl	800815c <__malloc_unlock>
 8007a14:	e7a1      	b.n	800795a <_malloc_r+0x22>
 8007a16:	6025      	str	r5, [r4, #0]
 8007a18:	e7de      	b.n	80079d8 <_malloc_r+0xa0>
 8007a1a:	bf00      	nop
 8007a1c:	2001340c 	.word	0x2001340c

08007a20 <__sfputc_r>:
 8007a20:	6893      	ldr	r3, [r2, #8]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	b410      	push	{r4}
 8007a28:	6093      	str	r3, [r2, #8]
 8007a2a:	da08      	bge.n	8007a3e <__sfputc_r+0x1e>
 8007a2c:	6994      	ldr	r4, [r2, #24]
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	db01      	blt.n	8007a36 <__sfputc_r+0x16>
 8007a32:	290a      	cmp	r1, #10
 8007a34:	d103      	bne.n	8007a3e <__sfputc_r+0x1e>
 8007a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a3a:	f7ff bc31 	b.w	80072a0 <__swbuf_r>
 8007a3e:	6813      	ldr	r3, [r2, #0]
 8007a40:	1c58      	adds	r0, r3, #1
 8007a42:	6010      	str	r0, [r2, #0]
 8007a44:	7019      	strb	r1, [r3, #0]
 8007a46:	4608      	mov	r0, r1
 8007a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <__sfputs_r>:
 8007a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a50:	4606      	mov	r6, r0
 8007a52:	460f      	mov	r7, r1
 8007a54:	4614      	mov	r4, r2
 8007a56:	18d5      	adds	r5, r2, r3
 8007a58:	42ac      	cmp	r4, r5
 8007a5a:	d101      	bne.n	8007a60 <__sfputs_r+0x12>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e007      	b.n	8007a70 <__sfputs_r+0x22>
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	463a      	mov	r2, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ffda 	bl	8007a20 <__sfputc_r>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d1f3      	bne.n	8007a58 <__sfputs_r+0xa>
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a74 <_vfiprintf_r>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	460d      	mov	r5, r1
 8007a7a:	b09d      	sub	sp, #116	; 0x74
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	4698      	mov	r8, r3
 8007a80:	4606      	mov	r6, r0
 8007a82:	b118      	cbz	r0, 8007a8c <_vfiprintf_r+0x18>
 8007a84:	6983      	ldr	r3, [r0, #24]
 8007a86:	b90b      	cbnz	r3, 8007a8c <_vfiprintf_r+0x18>
 8007a88:	f7ff fde4 	bl	8007654 <__sinit>
 8007a8c:	4b89      	ldr	r3, [pc, #548]	; (8007cb4 <_vfiprintf_r+0x240>)
 8007a8e:	429d      	cmp	r5, r3
 8007a90:	d11b      	bne.n	8007aca <_vfiprintf_r+0x56>
 8007a92:	6875      	ldr	r5, [r6, #4]
 8007a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a96:	07d9      	lsls	r1, r3, #31
 8007a98:	d405      	bmi.n	8007aa6 <_vfiprintf_r+0x32>
 8007a9a:	89ab      	ldrh	r3, [r5, #12]
 8007a9c:	059a      	lsls	r2, r3, #22
 8007a9e:	d402      	bmi.n	8007aa6 <_vfiprintf_r+0x32>
 8007aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aa2:	f7ff fe75 	bl	8007790 <__retarget_lock_acquire_recursive>
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	071b      	lsls	r3, r3, #28
 8007aaa:	d501      	bpl.n	8007ab0 <_vfiprintf_r+0x3c>
 8007aac:	692b      	ldr	r3, [r5, #16]
 8007aae:	b9eb      	cbnz	r3, 8007aec <_vfiprintf_r+0x78>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7ff fc46 	bl	8007344 <__swsetup_r>
 8007ab8:	b1c0      	cbz	r0, 8007aec <_vfiprintf_r+0x78>
 8007aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007abc:	07dc      	lsls	r4, r3, #31
 8007abe:	d50e      	bpl.n	8007ade <_vfiprintf_r+0x6a>
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac4:	b01d      	add	sp, #116	; 0x74
 8007ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aca:	4b7b      	ldr	r3, [pc, #492]	; (8007cb8 <_vfiprintf_r+0x244>)
 8007acc:	429d      	cmp	r5, r3
 8007ace:	d101      	bne.n	8007ad4 <_vfiprintf_r+0x60>
 8007ad0:	68b5      	ldr	r5, [r6, #8]
 8007ad2:	e7df      	b.n	8007a94 <_vfiprintf_r+0x20>
 8007ad4:	4b79      	ldr	r3, [pc, #484]	; (8007cbc <_vfiprintf_r+0x248>)
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	bf08      	it	eq
 8007ada:	68f5      	ldreq	r5, [r6, #12]
 8007adc:	e7da      	b.n	8007a94 <_vfiprintf_r+0x20>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	0598      	lsls	r0, r3, #22
 8007ae2:	d4ed      	bmi.n	8007ac0 <_vfiprintf_r+0x4c>
 8007ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ae6:	f7ff fe54 	bl	8007792 <__retarget_lock_release_recursive>
 8007aea:	e7e9      	b.n	8007ac0 <_vfiprintf_r+0x4c>
 8007aec:	2300      	movs	r3, #0
 8007aee:	9309      	str	r3, [sp, #36]	; 0x24
 8007af0:	2320      	movs	r3, #32
 8007af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007afa:	2330      	movs	r3, #48	; 0x30
 8007afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cc0 <_vfiprintf_r+0x24c>
 8007b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b04:	f04f 0901 	mov.w	r9, #1
 8007b08:	4623      	mov	r3, r4
 8007b0a:	469a      	mov	sl, r3
 8007b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b10:	b10a      	cbz	r2, 8007b16 <_vfiprintf_r+0xa2>
 8007b12:	2a25      	cmp	r2, #37	; 0x25
 8007b14:	d1f9      	bne.n	8007b0a <_vfiprintf_r+0x96>
 8007b16:	ebba 0b04 	subs.w	fp, sl, r4
 8007b1a:	d00b      	beq.n	8007b34 <_vfiprintf_r+0xc0>
 8007b1c:	465b      	mov	r3, fp
 8007b1e:	4622      	mov	r2, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ff93 	bl	8007a4e <__sfputs_r>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f000 80aa 	beq.w	8007c82 <_vfiprintf_r+0x20e>
 8007b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b30:	445a      	add	r2, fp
 8007b32:	9209      	str	r2, [sp, #36]	; 0x24
 8007b34:	f89a 3000 	ldrb.w	r3, [sl]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80a2 	beq.w	8007c82 <_vfiprintf_r+0x20e>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f04f 32ff 	mov.w	r2, #4294967295
 8007b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b48:	f10a 0a01 	add.w	sl, sl, #1
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	9307      	str	r3, [sp, #28]
 8007b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b54:	931a      	str	r3, [sp, #104]	; 0x68
 8007b56:	4654      	mov	r4, sl
 8007b58:	2205      	movs	r2, #5
 8007b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5e:	4858      	ldr	r0, [pc, #352]	; (8007cc0 <_vfiprintf_r+0x24c>)
 8007b60:	f7f8 fb4e 	bl	8000200 <memchr>
 8007b64:	9a04      	ldr	r2, [sp, #16]
 8007b66:	b9d8      	cbnz	r0, 8007ba0 <_vfiprintf_r+0x12c>
 8007b68:	06d1      	lsls	r1, r2, #27
 8007b6a:	bf44      	itt	mi
 8007b6c:	2320      	movmi	r3, #32
 8007b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b72:	0713      	lsls	r3, r2, #28
 8007b74:	bf44      	itt	mi
 8007b76:	232b      	movmi	r3, #43	; 0x2b
 8007b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b80:	2b2a      	cmp	r3, #42	; 0x2a
 8007b82:	d015      	beq.n	8007bb0 <_vfiprintf_r+0x13c>
 8007b84:	9a07      	ldr	r2, [sp, #28]
 8007b86:	4654      	mov	r4, sl
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f04f 0c0a 	mov.w	ip, #10
 8007b8e:	4621      	mov	r1, r4
 8007b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b94:	3b30      	subs	r3, #48	; 0x30
 8007b96:	2b09      	cmp	r3, #9
 8007b98:	d94e      	bls.n	8007c38 <_vfiprintf_r+0x1c4>
 8007b9a:	b1b0      	cbz	r0, 8007bca <_vfiprintf_r+0x156>
 8007b9c:	9207      	str	r2, [sp, #28]
 8007b9e:	e014      	b.n	8007bca <_vfiprintf_r+0x156>
 8007ba0:	eba0 0308 	sub.w	r3, r0, r8
 8007ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	46a2      	mov	sl, r4
 8007bae:	e7d2      	b.n	8007b56 <_vfiprintf_r+0xe2>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	1d19      	adds	r1, r3, #4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	9103      	str	r1, [sp, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bfbb      	ittet	lt
 8007bbc:	425b      	neglt	r3, r3
 8007bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8007bc2:	9307      	strge	r3, [sp, #28]
 8007bc4:	9307      	strlt	r3, [sp, #28]
 8007bc6:	bfb8      	it	lt
 8007bc8:	9204      	strlt	r2, [sp, #16]
 8007bca:	7823      	ldrb	r3, [r4, #0]
 8007bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8007bce:	d10c      	bne.n	8007bea <_vfiprintf_r+0x176>
 8007bd0:	7863      	ldrb	r3, [r4, #1]
 8007bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd4:	d135      	bne.n	8007c42 <_vfiprintf_r+0x1ce>
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	1d1a      	adds	r2, r3, #4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	9203      	str	r2, [sp, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfb8      	it	lt
 8007be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007be6:	3402      	adds	r4, #2
 8007be8:	9305      	str	r3, [sp, #20]
 8007bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cd0 <_vfiprintf_r+0x25c>
 8007bee:	7821      	ldrb	r1, [r4, #0]
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	f7f8 fb04 	bl	8000200 <memchr>
 8007bf8:	b140      	cbz	r0, 8007c0c <_vfiprintf_r+0x198>
 8007bfa:	2340      	movs	r3, #64	; 0x40
 8007bfc:	eba0 000a 	sub.w	r0, r0, sl
 8007c00:	fa03 f000 	lsl.w	r0, r3, r0
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	4303      	orrs	r3, r0
 8007c08:	3401      	adds	r4, #1
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c10:	482c      	ldr	r0, [pc, #176]	; (8007cc4 <_vfiprintf_r+0x250>)
 8007c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c16:	2206      	movs	r2, #6
 8007c18:	f7f8 faf2 	bl	8000200 <memchr>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d03f      	beq.n	8007ca0 <_vfiprintf_r+0x22c>
 8007c20:	4b29      	ldr	r3, [pc, #164]	; (8007cc8 <_vfiprintf_r+0x254>)
 8007c22:	bb1b      	cbnz	r3, 8007c6c <_vfiprintf_r+0x1f8>
 8007c24:	9b03      	ldr	r3, [sp, #12]
 8007c26:	3307      	adds	r3, #7
 8007c28:	f023 0307 	bic.w	r3, r3, #7
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	9303      	str	r3, [sp, #12]
 8007c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c32:	443b      	add	r3, r7
 8007c34:	9309      	str	r3, [sp, #36]	; 0x24
 8007c36:	e767      	b.n	8007b08 <_vfiprintf_r+0x94>
 8007c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	2001      	movs	r0, #1
 8007c40:	e7a5      	b.n	8007b8e <_vfiprintf_r+0x11a>
 8007c42:	2300      	movs	r3, #0
 8007c44:	3401      	adds	r4, #1
 8007c46:	9305      	str	r3, [sp, #20]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f04f 0c0a 	mov.w	ip, #10
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c54:	3a30      	subs	r2, #48	; 0x30
 8007c56:	2a09      	cmp	r2, #9
 8007c58:	d903      	bls.n	8007c62 <_vfiprintf_r+0x1ee>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0c5      	beq.n	8007bea <_vfiprintf_r+0x176>
 8007c5e:	9105      	str	r1, [sp, #20]
 8007c60:	e7c3      	b.n	8007bea <_vfiprintf_r+0x176>
 8007c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c66:	4604      	mov	r4, r0
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e7f0      	b.n	8007c4e <_vfiprintf_r+0x1da>
 8007c6c:	ab03      	add	r3, sp, #12
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	462a      	mov	r2, r5
 8007c72:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <_vfiprintf_r+0x258>)
 8007c74:	a904      	add	r1, sp, #16
 8007c76:	4630      	mov	r0, r6
 8007c78:	f3af 8000 	nop.w
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	1c78      	adds	r0, r7, #1
 8007c80:	d1d6      	bne.n	8007c30 <_vfiprintf_r+0x1bc>
 8007c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c84:	07d9      	lsls	r1, r3, #31
 8007c86:	d405      	bmi.n	8007c94 <_vfiprintf_r+0x220>
 8007c88:	89ab      	ldrh	r3, [r5, #12]
 8007c8a:	059a      	lsls	r2, r3, #22
 8007c8c:	d402      	bmi.n	8007c94 <_vfiprintf_r+0x220>
 8007c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c90:	f7ff fd7f 	bl	8007792 <__retarget_lock_release_recursive>
 8007c94:	89ab      	ldrh	r3, [r5, #12]
 8007c96:	065b      	lsls	r3, r3, #25
 8007c98:	f53f af12 	bmi.w	8007ac0 <_vfiprintf_r+0x4c>
 8007c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c9e:	e711      	b.n	8007ac4 <_vfiprintf_r+0x50>
 8007ca0:	ab03      	add	r3, sp, #12
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	462a      	mov	r2, r5
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <_vfiprintf_r+0x258>)
 8007ca8:	a904      	add	r1, sp, #16
 8007caa:	4630      	mov	r0, r6
 8007cac:	f000 f880 	bl	8007db0 <_printf_i>
 8007cb0:	e7e4      	b.n	8007c7c <_vfiprintf_r+0x208>
 8007cb2:	bf00      	nop
 8007cb4:	0800971c 	.word	0x0800971c
 8007cb8:	0800973c 	.word	0x0800973c
 8007cbc:	080096fc 	.word	0x080096fc
 8007cc0:	0800975c 	.word	0x0800975c
 8007cc4:	08009766 	.word	0x08009766
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	08007a4f 	.word	0x08007a4f
 8007cd0:	08009762 	.word	0x08009762

08007cd4 <_printf_common>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4616      	mov	r6, r2
 8007cda:	4699      	mov	r9, r3
 8007cdc:	688a      	ldr	r2, [r1, #8]
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bfb8      	it	lt
 8007ce8:	4613      	movlt	r3, r2
 8007cea:	6033      	str	r3, [r6, #0]
 8007cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b10a      	cbz	r2, 8007cfa <_printf_common+0x26>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	0699      	lsls	r1, r3, #26
 8007cfe:	bf42      	ittt	mi
 8007d00:	6833      	ldrmi	r3, [r6, #0]
 8007d02:	3302      	addmi	r3, #2
 8007d04:	6033      	strmi	r3, [r6, #0]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	f015 0506 	ands.w	r5, r5, #6
 8007d0c:	d106      	bne.n	8007d1c <_printf_common+0x48>
 8007d0e:	f104 0a19 	add.w	sl, r4, #25
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	6832      	ldr	r2, [r6, #0]
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc26      	bgt.n	8007d6a <_printf_common+0x96>
 8007d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d20:	1e13      	subs	r3, r2, #0
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	bf18      	it	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	0692      	lsls	r2, r2, #26
 8007d2a:	d42b      	bmi.n	8007d84 <_printf_common+0xb0>
 8007d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d01e      	beq.n	8007d78 <_printf_common+0xa4>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	68e5      	ldr	r5, [r4, #12]
 8007d3e:	6832      	ldr	r2, [r6, #0]
 8007d40:	f003 0306 	and.w	r3, r3, #6
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	bf08      	it	eq
 8007d48:	1aad      	subeq	r5, r5, r2
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	bf0c      	ite	eq
 8007d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d54:	2500      	movne	r5, #0
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bfc4      	itt	gt
 8007d5a:	1a9b      	subgt	r3, r3, r2
 8007d5c:	18ed      	addgt	r5, r5, r3
 8007d5e:	2600      	movs	r6, #0
 8007d60:	341a      	adds	r4, #26
 8007d62:	42b5      	cmp	r5, r6
 8007d64:	d11a      	bne.n	8007d9c <_printf_common+0xc8>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e008      	b.n	8007d7c <_printf_common+0xa8>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4638      	mov	r0, r7
 8007d72:	47c0      	blx	r8
 8007d74:	3001      	adds	r0, #1
 8007d76:	d103      	bne.n	8007d80 <_printf_common+0xac>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7c6      	b.n	8007d12 <_printf_common+0x3e>
 8007d84:	18e1      	adds	r1, r4, r3
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	2030      	movs	r0, #48	; 0x30
 8007d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8e:	4422      	add	r2, r4
 8007d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d98:	3302      	adds	r3, #2
 8007d9a:	e7c7      	b.n	8007d2c <_printf_common+0x58>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4649      	mov	r1, r9
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d0e6      	beq.n	8007d78 <_printf_common+0xa4>
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7d9      	b.n	8007d62 <_printf_common+0x8e>
	...

08007db0 <_printf_i>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	7e0f      	ldrb	r7, [r1, #24]
 8007db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007db8:	2f78      	cmp	r7, #120	; 0x78
 8007dba:	4691      	mov	r9, r2
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dc6:	d807      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dc8:	2f62      	cmp	r7, #98	; 0x62
 8007dca:	d80a      	bhi.n	8007de2 <_printf_i+0x32>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	f000 80d8 	beq.w	8007f82 <_printf_i+0x1d2>
 8007dd2:	2f58      	cmp	r7, #88	; 0x58
 8007dd4:	f000 80a3 	beq.w	8007f1e <_printf_i+0x16e>
 8007dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de0:	e03a      	b.n	8007e58 <_printf_i+0xa8>
 8007de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de6:	2b15      	cmp	r3, #21
 8007de8:	d8f6      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dea:	a101      	add	r1, pc, #4	; (adr r1, 8007df0 <_printf_i+0x40>)
 8007dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007dd9 	.word	0x08007dd9
 8007dfc:	08007dd9 	.word	0x08007dd9
 8007e00:	08007dd9 	.word	0x08007dd9
 8007e04:	08007dd9 	.word	0x08007dd9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007dd9 	.word	0x08007dd9
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007f69 	.word	0x08007f69
 8007e20:	08007e8d 	.word	0x08007e8d
 8007e24:	08007f4b 	.word	0x08007f4b
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f8b 	.word	0x08007f8b
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f53 	.word	0x08007f53
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	602a      	str	r2, [r5, #0]
 8007e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0a3      	b.n	8007fa4 <_printf_i+0x1f4>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	6829      	ldr	r1, [r5, #0]
 8007e60:	0606      	lsls	r6, r0, #24
 8007e62:	f101 0304 	add.w	r3, r1, #4
 8007e66:	d50a      	bpl.n	8007e7e <_printf_i+0xce>
 8007e68:	680e      	ldr	r6, [r1, #0]
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	da03      	bge.n	8007e78 <_printf_i+0xc8>
 8007e70:	232d      	movs	r3, #45	; 0x2d
 8007e72:	4276      	negs	r6, r6
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	485e      	ldr	r0, [pc, #376]	; (8007ff4 <_printf_i+0x244>)
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	e019      	b.n	8007eb2 <_printf_i+0x102>
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e86:	bf18      	it	ne
 8007e88:	b236      	sxthne	r6, r6
 8007e8a:	e7ef      	b.n	8007e6c <_printf_i+0xbc>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	6029      	str	r1, [r5, #0]
 8007e94:	0601      	lsls	r1, r0, #24
 8007e96:	d501      	bpl.n	8007e9c <_printf_i+0xec>
 8007e98:	681e      	ldr	r6, [r3, #0]
 8007e9a:	e002      	b.n	8007ea2 <_printf_i+0xf2>
 8007e9c:	0646      	lsls	r6, r0, #25
 8007e9e:	d5fb      	bpl.n	8007e98 <_printf_i+0xe8>
 8007ea0:	881e      	ldrh	r6, [r3, #0]
 8007ea2:	4854      	ldr	r0, [pc, #336]	; (8007ff4 <_printf_i+0x244>)
 8007ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2308      	moveq	r3, #8
 8007eaa:	230a      	movne	r3, #10
 8007eac:	2100      	movs	r1, #0
 8007eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eb2:	6865      	ldr	r5, [r4, #4]
 8007eb4:	60a5      	str	r5, [r4, #8]
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	bfa2      	ittt	ge
 8007eba:	6821      	ldrge	r1, [r4, #0]
 8007ebc:	f021 0104 	bicge.w	r1, r1, #4
 8007ec0:	6021      	strge	r1, [r4, #0]
 8007ec2:	b90e      	cbnz	r6, 8007ec8 <_printf_i+0x118>
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	d04d      	beq.n	8007f64 <_printf_i+0x1b4>
 8007ec8:	4615      	mov	r5, r2
 8007eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ece:	fb03 6711 	mls	r7, r3, r1, r6
 8007ed2:	5dc7      	ldrb	r7, [r0, r7]
 8007ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed8:	4637      	mov	r7, r6
 8007eda:	42bb      	cmp	r3, r7
 8007edc:	460e      	mov	r6, r1
 8007ede:	d9f4      	bls.n	8007eca <_printf_i+0x11a>
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d10b      	bne.n	8007efc <_printf_i+0x14c>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07de      	lsls	r6, r3, #31
 8007ee8:	d508      	bpl.n	8007efc <_printf_i+0x14c>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	bfde      	ittt	le
 8007ef2:	2330      	movle	r3, #48	; 0x30
 8007ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007efc:	1b52      	subs	r2, r2, r5
 8007efe:	6122      	str	r2, [r4, #16]
 8007f00:	f8cd a000 	str.w	sl, [sp]
 8007f04:	464b      	mov	r3, r9
 8007f06:	aa03      	add	r2, sp, #12
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff fee2 	bl	8007cd4 <_printf_common>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d14c      	bne.n	8007fae <_printf_i+0x1fe>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b004      	add	sp, #16
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	4835      	ldr	r0, [pc, #212]	; (8007ff4 <_printf_i+0x244>)
 8007f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f24:	6829      	ldr	r1, [r5, #0]
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f2c:	6029      	str	r1, [r5, #0]
 8007f2e:	061d      	lsls	r5, r3, #24
 8007f30:	d514      	bpl.n	8007f5c <_printf_i+0x1ac>
 8007f32:	07df      	lsls	r7, r3, #31
 8007f34:	bf44      	itt	mi
 8007f36:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3a:	6023      	strmi	r3, [r4, #0]
 8007f3c:	b91e      	cbnz	r6, 8007f46 <_printf_i+0x196>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	f023 0320 	bic.w	r3, r3, #32
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	2310      	movs	r3, #16
 8007f48:	e7b0      	b.n	8007eac <_printf_i+0xfc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f043 0320 	orr.w	r3, r3, #32
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	2378      	movs	r3, #120	; 0x78
 8007f54:	4828      	ldr	r0, [pc, #160]	; (8007ff8 <_printf_i+0x248>)
 8007f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f5a:	e7e3      	b.n	8007f24 <_printf_i+0x174>
 8007f5c:	0659      	lsls	r1, r3, #25
 8007f5e:	bf48      	it	mi
 8007f60:	b2b6      	uxthmi	r6, r6
 8007f62:	e7e6      	b.n	8007f32 <_printf_i+0x182>
 8007f64:	4615      	mov	r5, r2
 8007f66:	e7bb      	b.n	8007ee0 <_printf_i+0x130>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	6826      	ldr	r6, [r4, #0]
 8007f6c:	6961      	ldr	r1, [r4, #20]
 8007f6e:	1d18      	adds	r0, r3, #4
 8007f70:	6028      	str	r0, [r5, #0]
 8007f72:	0635      	lsls	r5, r6, #24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	d501      	bpl.n	8007f7c <_printf_i+0x1cc>
 8007f78:	6019      	str	r1, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <_printf_i+0x1d2>
 8007f7c:	0670      	lsls	r0, r6, #25
 8007f7e:	d5fb      	bpl.n	8007f78 <_printf_i+0x1c8>
 8007f80:	8019      	strh	r1, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	4615      	mov	r5, r2
 8007f88:	e7ba      	b.n	8007f00 <_printf_i+0x150>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7f8 f932 	bl	8000200 <memchr>
 8007f9c:	b108      	cbz	r0, 8007fa2 <_printf_i+0x1f2>
 8007f9e:	1b40      	subs	r0, r0, r5
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fac:	e7a8      	b.n	8007f00 <_printf_i+0x150>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	47d0      	blx	sl
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0ab      	beq.n	8007f14 <_printf_i+0x164>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	d413      	bmi.n	8007fea <_printf_i+0x23a>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	bfb8      	it	lt
 8007fca:	4618      	movlt	r0, r3
 8007fcc:	e7a4      	b.n	8007f18 <_printf_i+0x168>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d09b      	beq.n	8007f14 <_printf_i+0x164>
 8007fdc:	3501      	adds	r5, #1
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	9903      	ldr	r1, [sp, #12]
 8007fe2:	1a5b      	subs	r3, r3, r1
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dcf2      	bgt.n	8007fce <_printf_i+0x21e>
 8007fe8:	e7eb      	b.n	8007fc2 <_printf_i+0x212>
 8007fea:	2500      	movs	r5, #0
 8007fec:	f104 0619 	add.w	r6, r4, #25
 8007ff0:	e7f5      	b.n	8007fde <_printf_i+0x22e>
 8007ff2:	bf00      	nop
 8007ff4:	0800976d 	.word	0x0800976d
 8007ff8:	0800977e 	.word	0x0800977e

08007ffc <_sbrk_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d06      	ldr	r5, [pc, #24]	; (8008018 <_sbrk_r+0x1c>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	602b      	str	r3, [r5, #0]
 8008008:	f7f8 ff40 	bl	8000e8c <_sbrk>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_sbrk_r+0x1a>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_sbrk_r+0x1a>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	20013414 	.word	0x20013414

0800801c <__sread>:
 800801c:	b510      	push	{r4, lr}
 800801e:	460c      	mov	r4, r1
 8008020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008024:	f000 f8a0 	bl	8008168 <_read_r>
 8008028:	2800      	cmp	r0, #0
 800802a:	bfab      	itete	ge
 800802c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800802e:	89a3      	ldrhlt	r3, [r4, #12]
 8008030:	181b      	addge	r3, r3, r0
 8008032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008036:	bfac      	ite	ge
 8008038:	6563      	strge	r3, [r4, #84]	; 0x54
 800803a:	81a3      	strhlt	r3, [r4, #12]
 800803c:	bd10      	pop	{r4, pc}

0800803e <__swrite>:
 800803e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008042:	461f      	mov	r7, r3
 8008044:	898b      	ldrh	r3, [r1, #12]
 8008046:	05db      	lsls	r3, r3, #23
 8008048:	4605      	mov	r5, r0
 800804a:	460c      	mov	r4, r1
 800804c:	4616      	mov	r6, r2
 800804e:	d505      	bpl.n	800805c <__swrite+0x1e>
 8008050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008054:	2302      	movs	r3, #2
 8008056:	2200      	movs	r2, #0
 8008058:	f000 f868 	bl	800812c <_lseek_r>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	4632      	mov	r2, r6
 800806a:	463b      	mov	r3, r7
 800806c:	4628      	mov	r0, r5
 800806e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008072:	f000 b817 	b.w	80080a4 <_write_r>

08008076 <__sseek>:
 8008076:	b510      	push	{r4, lr}
 8008078:	460c      	mov	r4, r1
 800807a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807e:	f000 f855 	bl	800812c <_lseek_r>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	bf15      	itete	ne
 8008088:	6560      	strne	r0, [r4, #84]	; 0x54
 800808a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800808e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008092:	81a3      	strheq	r3, [r4, #12]
 8008094:	bf18      	it	ne
 8008096:	81a3      	strhne	r3, [r4, #12]
 8008098:	bd10      	pop	{r4, pc}

0800809a <__sclose>:
 800809a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809e:	f000 b813 	b.w	80080c8 <_close_r>
	...

080080a4 <_write_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d07      	ldr	r5, [pc, #28]	; (80080c4 <_write_r+0x20>)
 80080a8:	4604      	mov	r4, r0
 80080aa:	4608      	mov	r0, r1
 80080ac:	4611      	mov	r1, r2
 80080ae:	2200      	movs	r2, #0
 80080b0:	602a      	str	r2, [r5, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	f7f8 fe99 	bl	8000dea <_write>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_write_r+0x1e>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_write_r+0x1e>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	20013414 	.word	0x20013414

080080c8 <_close_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d06      	ldr	r5, [pc, #24]	; (80080e4 <_close_r+0x1c>)
 80080cc:	2300      	movs	r3, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	f7f8 fea5 	bl	8000e22 <_close>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_close_r+0x1a>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_close_r+0x1a>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	20013414 	.word	0x20013414

080080e8 <_fstat_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d07      	ldr	r5, [pc, #28]	; (8008108 <_fstat_r+0x20>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	602b      	str	r3, [r5, #0]
 80080f6:	f7f8 fea0 	bl	8000e3a <_fstat>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d102      	bne.n	8008104 <_fstat_r+0x1c>
 80080fe:	682b      	ldr	r3, [r5, #0]
 8008100:	b103      	cbz	r3, 8008104 <_fstat_r+0x1c>
 8008102:	6023      	str	r3, [r4, #0]
 8008104:	bd38      	pop	{r3, r4, r5, pc}
 8008106:	bf00      	nop
 8008108:	20013414 	.word	0x20013414

0800810c <_isatty_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d06      	ldr	r5, [pc, #24]	; (8008128 <_isatty_r+0x1c>)
 8008110:	2300      	movs	r3, #0
 8008112:	4604      	mov	r4, r0
 8008114:	4608      	mov	r0, r1
 8008116:	602b      	str	r3, [r5, #0]
 8008118:	f7f8 fe9f 	bl	8000e5a <_isatty>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_isatty_r+0x1a>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	b103      	cbz	r3, 8008126 <_isatty_r+0x1a>
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	20013414 	.word	0x20013414

0800812c <_lseek_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d07      	ldr	r5, [pc, #28]	; (800814c <_lseek_r+0x20>)
 8008130:	4604      	mov	r4, r0
 8008132:	4608      	mov	r0, r1
 8008134:	4611      	mov	r1, r2
 8008136:	2200      	movs	r2, #0
 8008138:	602a      	str	r2, [r5, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	f7f8 fe98 	bl	8000e70 <_lseek>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_lseek_r+0x1e>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_lseek_r+0x1e>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	20013414 	.word	0x20013414

08008150 <__malloc_lock>:
 8008150:	4801      	ldr	r0, [pc, #4]	; (8008158 <__malloc_lock+0x8>)
 8008152:	f7ff bb1d 	b.w	8007790 <__retarget_lock_acquire_recursive>
 8008156:	bf00      	nop
 8008158:	20013408 	.word	0x20013408

0800815c <__malloc_unlock>:
 800815c:	4801      	ldr	r0, [pc, #4]	; (8008164 <__malloc_unlock+0x8>)
 800815e:	f7ff bb18 	b.w	8007792 <__retarget_lock_release_recursive>
 8008162:	bf00      	nop
 8008164:	20013408 	.word	0x20013408

08008168 <_read_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	; (8008188 <_read_r+0x20>)
 800816c:	4604      	mov	r4, r0
 800816e:	4608      	mov	r0, r1
 8008170:	4611      	mov	r1, r2
 8008172:	2200      	movs	r2, #0
 8008174:	602a      	str	r2, [r5, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	f7f8 fe1a 	bl	8000db0 <_read>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_read_r+0x1e>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_read_r+0x1e>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	20013414 	.word	0x20013414

0800818c <_init>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr

08008198 <_fini>:
 8008198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819a:	bf00      	nop
 800819c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819e:	bc08      	pop	{r3}
 80081a0:	469e      	mov	lr, r3
 80081a2:	4770      	bx	lr
